package w_i_s_h_l_i_s_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// NewPostFavoritesItemsBulkParams creates a new PostFavoritesItemsBulkParams object
// with the default values initialized.
func NewPostFavoritesItemsBulkParams() *PostFavoritesItemsBulkParams {
	var ()
	return &PostFavoritesItemsBulkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFavoritesItemsBulkParamsWithTimeout creates a new PostFavoritesItemsBulkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFavoritesItemsBulkParamsWithTimeout(timeout time.Duration) *PostFavoritesItemsBulkParams {
	var ()
	return &PostFavoritesItemsBulkParams{

		timeout: timeout,
	}
}

/*PostFavoritesItemsBulkParams contains all the parameters to send to the API endpoint
for the post favorites items bulk operation typically these are written to a http.Request
*/
type PostFavoritesItemsBulkParams struct {

	/*Authorization
	  Access token

	*/
	Authorization string
	/*Body*/
	Body models_secure.WishlistItemListCreateBody

	timeout time.Duration
}

// WithAuthorization adds the authorization to the post favorites items bulk params
func (o *PostFavoritesItemsBulkParams) WithAuthorization(Authorization string) *PostFavoritesItemsBulkParams {
	o.Authorization = Authorization
	return o
}

// WithBody adds the body to the post favorites items bulk params
func (o *PostFavoritesItemsBulkParams) WithBody(Body models_secure.WishlistItemListCreateBody) *PostFavoritesItemsBulkParams {
	o.Body = Body
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostFavoritesItemsBulkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
