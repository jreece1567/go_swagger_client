package i_n_t_e_g_r_a_t_i_o_n_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPeopleIntegrationsEdnaAccountsParams creates a new GetPeopleIntegrationsEdnaAccountsParams object
// with the default values initialized.
func NewGetPeopleIntegrationsEdnaAccountsParams() *GetPeopleIntegrationsEdnaAccountsParams {
	var ()
	return &GetPeopleIntegrationsEdnaAccountsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPeopleIntegrationsEdnaAccountsParamsWithTimeout creates a new GetPeopleIntegrationsEdnaAccountsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPeopleIntegrationsEdnaAccountsParamsWithTimeout(timeout time.Duration) *GetPeopleIntegrationsEdnaAccountsParams {
	var ()
	return &GetPeopleIntegrationsEdnaAccountsParams{

		timeout: timeout,
	}
}

/*GetPeopleIntegrationsEdnaAccountsParams contains all the parameters to send to the API endpoint
for the get people integrations edna accounts operation typically these are written to a http.Request
*/
type GetPeopleIntegrationsEdnaAccountsParams struct {

	/*Authorization
	  Staff Access token

	*/
	Authorization string
	/*NextPageID
	  Next page identifier. Retrieves the page associated with this identifier. Takes precedence over updated_since.

	*/
	NextPageID *string
	/*OwnerID
	  Owner identifier. Identifier of the database's owner corporation

	*/
	OwnerID string
	/*UpdatedSince
	  Updated since. Request the acounts updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get people integrations edna accounts params
func (o *GetPeopleIntegrationsEdnaAccountsParams) WithAuthorization(Authorization string) *GetPeopleIntegrationsEdnaAccountsParams {
	o.Authorization = Authorization
	return o
}

// WithNextPageID adds the nextPageId to the get people integrations edna accounts params
func (o *GetPeopleIntegrationsEdnaAccountsParams) WithNextPageID(NextPageID *string) *GetPeopleIntegrationsEdnaAccountsParams {
	o.NextPageID = NextPageID
	return o
}

// WithOwnerID adds the ownerId to the get people integrations edna accounts params
func (o *GetPeopleIntegrationsEdnaAccountsParams) WithOwnerID(OwnerID string) *GetPeopleIntegrationsEdnaAccountsParams {
	o.OwnerID = OwnerID
	return o
}

// WithUpdatedSince adds the updatedSince to the get people integrations edna accounts params
func (o *GetPeopleIntegrationsEdnaAccountsParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetPeopleIntegrationsEdnaAccountsParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetPeopleIntegrationsEdnaAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.NextPageID != nil {

		// query param next_page_id
		var qrNextPageID string
		if o.NextPageID != nil {
			qrNextPageID = *o.NextPageID
		}
		qNextPageID := qrNextPageID
		if qNextPageID != "" {
			if err := r.SetQueryParam("next_page_id", qNextPageID); err != nil {
				return err
			}
		}

	}

	// query param owner_id
	qrOwnerID := o.OwnerID
	qOwnerID := qrOwnerID
	if qOwnerID != "" {
		if err := r.SetQueryParam("owner_id", qOwnerID); err != nil {
			return err
		}
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
