package i_n_t_e_g_r_a_t_i_o_n_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPeopleParkingParams creates a new GetPeopleParkingParams object
// with the default values initialized.
func NewGetPeopleParkingParams() *GetPeopleParkingParams {
	var (
		countryDefault string = string("US")
		pageDefault    int64  = int64(1)
		perPageDefault int64  = int64(100)
	)
	return &GetPeopleParkingParams{
		Country: countryDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPeopleParkingParamsWithTimeout creates a new GetPeopleParkingParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPeopleParkingParamsWithTimeout(timeout time.Duration) *GetPeopleParkingParams {
	var (
		countryDefault string = string("US")
		pageDefault    int64  = int64(1)
		perPageDefault int64  = int64(100)
	)
	return &GetPeopleParkingParams{
		Country: countryDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetPeopleParkingParams contains all the parameters to send to the API endpoint
for the get people parking operation typically these are written to a http.Request
*/
type GetPeopleParkingParams struct {

	/*Country
	  Country code of the account.

	*/
	Country string
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*UpdatedSince
	  Updated since. Request the accounts updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCountry adds the country to the get people parking params
func (o *GetPeopleParkingParams) WithCountry(Country string) *GetPeopleParkingParams {
	o.Country = Country
	return o
}

// WithFields adds the fields to the get people parking params
func (o *GetPeopleParkingParams) WithFields(Fields []string) *GetPeopleParkingParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get people parking params
func (o *GetPeopleParkingParams) WithPage(Page *int64) *GetPeopleParkingParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get people parking params
func (o *GetPeopleParkingParams) WithPerPage(PerPage *int64) *GetPeopleParkingParams {
	o.PerPage = PerPage
	return o
}

// WithUpdatedSince adds the updatedSince to the get people parking params
func (o *GetPeopleParkingParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetPeopleParkingParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetPeopleParkingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param country
	qrCountry := o.Country
	qCountry := qrCountry
	if qCountry != "" {
		if err := r.SetQueryParam("country", qCountry); err != nil {
			return err
		}
	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
