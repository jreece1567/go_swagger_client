package p_e_o_p_l_e_m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPeoplePersonIDFoodHistoryParams creates a new GetPeoplePersonIDFoodHistoryParams object
// with the default values initialized.
func NewGetPeoplePersonIDFoodHistoryParams() *GetPeoplePersonIDFoodHistoryParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(25)
	)
	return &GetPeoplePersonIDFoodHistoryParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPeoplePersonIDFoodHistoryParamsWithTimeout creates a new GetPeoplePersonIDFoodHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPeoplePersonIDFoodHistoryParamsWithTimeout(timeout time.Duration) *GetPeoplePersonIDFoodHistoryParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(25)
	)
	return &GetPeoplePersonIDFoodHistoryParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetPeoplePersonIDFoodHistoryParams contains all the parameters to send to the API endpoint
for the get people person ID food history operation typically these are written to a http.Request
*/
type GetPeoplePersonIDFoodHistoryParams struct {

	/*Authorization
	  Staff Access token.

	*/
	Authorization string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*PersonID
	  Identifier of the account

	*/
	PersonID string

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get people person ID food history params
func (o *GetPeoplePersonIDFoodHistoryParams) WithAuthorization(Authorization string) *GetPeoplePersonIDFoodHistoryParams {
	o.Authorization = Authorization
	return o
}

// WithPage adds the page to the get people person ID food history params
func (o *GetPeoplePersonIDFoodHistoryParams) WithPage(Page *int64) *GetPeoplePersonIDFoodHistoryParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get people person ID food history params
func (o *GetPeoplePersonIDFoodHistoryParams) WithPerPage(PerPage *int64) *GetPeoplePersonIDFoodHistoryParams {
	o.PerPage = PerPage
	return o
}

// WithPersonID adds the personId to the get people person ID food history params
func (o *GetPeoplePersonIDFoodHistoryParams) WithPersonID(PersonID string) *GetPeoplePersonIDFoodHistoryParams {
	o.PersonID = PersonID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetPeoplePersonIDFoodHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	// path param person_id
	if err := r.SetPathParam("person_id", o.PersonID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
