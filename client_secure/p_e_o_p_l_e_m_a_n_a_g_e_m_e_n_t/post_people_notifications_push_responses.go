package p_e_o_p_l_e_m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PostPeopleNotificationsPushReader is a Reader for the PostPeopleNotificationsPush structure.
type PostPeopleNotificationsPushReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostPeopleNotificationsPushReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPostPeopleNotificationsPushNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostPeopleNotificationsPushBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostPeopleNotificationsPushUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostPeopleNotificationsPushNoContent creates a PostPeopleNotificationsPushNoContent with default headers values
func NewPostPeopleNotificationsPushNoContent() *PostPeopleNotificationsPushNoContent {
	return &PostPeopleNotificationsPushNoContent{}
}

/*PostPeopleNotificationsPushNoContent handles this case with default header values.

Message published succesfully
*/
type PostPeopleNotificationsPushNoContent struct {
}

func (o *PostPeopleNotificationsPushNoContent) Error() string {
	return fmt.Sprintf("[POST /people/notifications/push][%d] postPeopleNotificationsPushNoContent ", 204)
}

func (o *PostPeopleNotificationsPushNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPeopleNotificationsPushBadRequest creates a PostPeopleNotificationsPushBadRequest with default headers values
func NewPostPeopleNotificationsPushBadRequest() *PostPeopleNotificationsPushBadRequest {
	return &PostPeopleNotificationsPushBadRequest{}
}

/*PostPeopleNotificationsPushBadRequest handles this case with default header values.

Bad request
*/
type PostPeopleNotificationsPushBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PostPeopleNotificationsPushBadRequest) Error() string {
	return fmt.Sprintf("[POST /people/notifications/push][%d] postPeopleNotificationsPushBadRequest  %+v", 400, o.Payload)
}

func (o *PostPeopleNotificationsPushBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPeopleNotificationsPushUnprocessableEntity creates a PostPeopleNotificationsPushUnprocessableEntity with default headers values
func NewPostPeopleNotificationsPushUnprocessableEntity() *PostPeopleNotificationsPushUnprocessableEntity {
	return &PostPeopleNotificationsPushUnprocessableEntity{}
}

/*PostPeopleNotificationsPushUnprocessableEntity handles this case with default header values.

Centre or Person identitifer does not exist
*/
type PostPeopleNotificationsPushUnprocessableEntity struct {
	Payload *models_secure.Notifications422Response
}

func (o *PostPeopleNotificationsPushUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /people/notifications/push][%d] postPeopleNotificationsPushUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostPeopleNotificationsPushUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Notifications422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
