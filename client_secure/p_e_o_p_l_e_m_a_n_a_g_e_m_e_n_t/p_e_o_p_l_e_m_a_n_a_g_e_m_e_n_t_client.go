package p_e_o_p_l_e_m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new p e o p l e m a n a g e m e n t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p e o p l e m a n a g e m e n t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePeoplePersonIDVehiclesLicensePlate deletes a vehicle

Request deletion of a vehicle.
*/
func (a *Client) DeletePeoplePersonIDVehiclesLicensePlate(params *DeletePeoplePersonIDVehiclesLicensePlateParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePeoplePersonIDVehiclesLicensePlateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePeoplePersonIDVehiclesLicensePlateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePeoplePersonIDVehiclesLicensePlate",
		Method:             "DELETE",
		PathPattern:        "/people/{person_id}/vehicles/{license_plate}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePeoplePersonIDVehiclesLicensePlateReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePeoplePersonIDVehiclesLicensePlateNoContent), nil
}

/*
GetPeople retrieves accounts
*/
func (a *Client) GetPeople(params *GetPeopleParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeopleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeopleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeople",
		Method:             "GET",
		PathPattern:        "/people",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeopleReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeopleOK), nil
}

/*
GetPeoplePersonID retrieves a person account details

Retrieve a person account details.
*/
func (a *Client) GetPeoplePersonID(params *GetPeoplePersonIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonID",
		Method:             "GET",
		PathPattern:        "/people/{person_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDOK), nil
}

/*
GetPeoplePersonIDCreditCards retrieves a person account credit cards

Retrieve an account credit cards.
*/
func (a *Client) GetPeoplePersonIDCreditCards(params *GetPeoplePersonIDCreditCardsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDCreditCardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDCreditCardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDCreditCards",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/credit_cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDCreditCardsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDCreditCardsOK), nil
}

/*
GetPeoplePersonIDFoodHistory lists food ordering activities history from a user

Request an array of food ordering activities.
*/
func (a *Client) GetPeoplePersonIDFoodHistory(params *GetPeoplePersonIDFoodHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDFoodHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDFoodHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDFoodHistory",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/food/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDFoodHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDFoodHistoryOK), nil
}

/*
GetPeoplePersonIDFoodOrdersFoodOrderID retrieves food order by id

Request to retrieve food order.
*/
func (a *Client) GetPeoplePersonIDFoodOrdersFoodOrderID(params *GetPeoplePersonIDFoodOrdersFoodOrderIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDFoodOrdersFoodOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDFoodOrdersFoodOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDFoodOrdersFoodOrderID",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/food/orders/{food_order_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDFoodOrdersFoodOrderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDFoodOrdersFoodOrderIDOK), nil
}

/*
GetPeoplePersonIDInterests retrieves account interests

Retrieve account interests for the given person_id. Requires staff authentication.
*/
func (a *Client) GetPeoplePersonIDInterests(params *GetPeoplePersonIDInterestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDInterestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDInterestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDInterests",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/interests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDInterestsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDInterestsOK), nil
}

/*
GetPeoplePersonIDKids retrieves kids in account

Retrieve kids in account for the given person_id. Requires staff authentication.
*/
func (a *Client) GetPeoplePersonIDKids(params *GetPeoplePersonIDKidsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDKidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDKidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDKids",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/kids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDKidsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDKidsOK), nil
}

/*
GetPeoplePersonIDParkingHistory lists parking sessions history from a user

Request an array of parking sessions.
*/
func (a *Client) GetPeoplePersonIDParkingHistory(params *GetPeoplePersonIDParkingHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDParkingHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDParkingHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDParkingHistory",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/parking/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDParkingHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDParkingHistoryOK), nil
}

/*
GetPeoplePersonIDVehicles retrieves all vehicles from a person

Retrieve all vehicles from a person.
*/
func (a *Client) GetPeoplePersonIDVehicles(params *GetPeoplePersonIDVehiclesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeoplePersonIDVehiclesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeoplePersonIDVehiclesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeoplePersonIDVehicles",
		Method:             "GET",
		PathPattern:        "/people/{person_id}/vehicles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPeoplePersonIDVehiclesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeoplePersonIDVehiclesOK), nil
}

/*
PatchPeoplePersonID updates a person account

Update a account.
*/
func (a *Client) PatchPeoplePersonID(params *PatchPeoplePersonIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchPeoplePersonIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPeoplePersonIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPeoplePersonID",
		Method:             "PATCH",
		PathPattern:        "/people/{person_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPeoplePersonIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPeoplePersonIDNoContent), nil
}

/*
PostPeopleNotification sends notifications

Send notifications
*/
func (a *Client) PostPeopleNotification(params *PostPeopleNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleNotificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleNotification",
		Method:             "POST",
		PathPattern:        "/people/notification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleNotificationNoContent), nil
}

/*
PostPeopleNotificationsEmail sends a transactional email message

Send a transactional email message
*/
func (a *Client) PostPeopleNotificationsEmail(params *PostPeopleNotificationsEmailParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleNotificationsEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleNotificationsEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleNotificationsEmail",
		Method:             "POST",
		PathPattern:        "/people/notifications/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleNotificationsEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleNotificationsEmailNoContent), nil
}

/*
PostPeopleNotificationsPush sends a push notification

Send a push notification
*/
func (a *Client) PostPeopleNotificationsPush(params *PostPeopleNotificationsPushParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleNotificationsPushNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleNotificationsPushParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleNotificationsPush",
		Method:             "POST",
		PathPattern:        "/people/notifications/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleNotificationsPushReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleNotificationsPushNoContent), nil
}

/*
PostPeopleNotificationsSms sends a transactional s m s message

Send a transactional SMS message
*/
func (a *Client) PostPeopleNotificationsSms(params *PostPeopleNotificationsSmsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleNotificationsSmsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleNotificationsSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleNotificationsSms",
		Method:             "POST",
		PathPattern:        "/people/notifications/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleNotificationsSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleNotificationsSmsNoContent), nil
}

/*
PostPeoplePasswordResets initiates an account password reset

Initiate an account password reset
*/
func (a *Client) PostPeoplePasswordResets(params *PostPeoplePasswordResetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePasswordResetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePasswordResetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePasswordResets",
		Method:             "POST",
		PathPattern:        "/people/password_resets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePasswordResetsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePasswordResetsOK), nil
}

/*
PostPeoplePersonIDFoodOrdersFoodOrderIDReceipt sends food order receipt email

Request to send food order receipt email.
*/
func (a *Client) PostPeoplePersonIDFoodOrdersFoodOrderIDReceipt(params *PostPeoplePersonIDFoodOrdersFoodOrderIDReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDFoodOrdersFoodOrderIDReceiptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDFoodOrdersFoodOrderIDReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDFoodOrdersFoodOrderIDReceipt",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/food/orders/{food_order_id}/receipt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDFoodOrdersFoodOrderIDReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDFoodOrdersFoodOrderIDReceiptNoContent), nil
}

/*
PostPeoplePersonIDInterests replaces account interests with new interests

Replace account interests for the given person_id. Requires staff authentication.
*/
func (a *Client) PostPeoplePersonIDInterests(params *PostPeoplePersonIDInterestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDInterestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDInterestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDInterests",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/interests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDInterestsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDInterestsOK), nil
}

/*
PostPeoplePersonIDParkingInvoice sends parking invoice email

Request to send parking invoice email.
*/
func (a *Client) PostPeoplePersonIDParkingInvoice(params *PostPeoplePersonIDParkingInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDParkingInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDParkingInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDParkingInvoice",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/parking/invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDParkingInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDParkingInvoiceNoContent), nil
}

/*
PostPeoplePersonIDParkingReceipt sends parking receipt email

Request to send parking receipt email.
*/
func (a *Client) PostPeoplePersonIDParkingReceipt(params *PostPeoplePersonIDParkingReceiptParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDParkingReceiptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDParkingReceiptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDParkingReceipt",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/parking/receipt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDParkingReceiptReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDParkingReceiptNoContent), nil
}

/*
PostPeoplePersonIDParkingRefund refunds a parking session

Request to refund a parking session charge.
*/
func (a *Client) PostPeoplePersonIDParkingRefund(params *PostPeoplePersonIDParkingRefundParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDParkingRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDParkingRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDParkingRefund",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/parking/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDParkingRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDParkingRefundOK), nil
}

/*
PostPeoplePersonIDVehicles adds a vehicle to a user account

Request adding a vehicle to a user account from JSON data in the request body.
*/
func (a *Client) PostPeoplePersonIDVehicles(params *PostPeoplePersonIDVehiclesParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePersonIDVehiclesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePersonIDVehiclesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePersonIDVehicles",
		Method:             "POST",
		PathPattern:        "/people/{person_id}/vehicles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePersonIDVehiclesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePersonIDVehiclesCreated), nil
}

/*
PostPeopleTicketsFeedback creates a feedback ticket
*/
func (a *Client) PostPeopleTicketsFeedback(params *PostPeopleTicketsFeedbackParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleTicketsFeedbackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleTicketsFeedbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleTicketsFeedback",
		Method:             "POST",
		PathPattern:        "/people/tickets/feedback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleTicketsFeedbackReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleTicketsFeedbackNoContent), nil
}

/*
PostPeopleTicketsSupport creates a support ticket
*/
func (a *Client) PostPeopleTicketsSupport(params *PostPeopleTicketsSupportParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeopleTicketsSupportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeopleTicketsSupportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeopleTicketsSupport",
		Method:             "POST",
		PathPattern:        "/people/tickets/support",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeopleTicketsSupportReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeopleTicketsSupportNoContent), nil
}

/*
PutPeoplePersonIDKids replaces kids in account

Replace kids in account for the given person_id. Requires staff authentication.
*/
func (a *Client) PutPeoplePersonIDKids(params *PutPeoplePersonIDKidsParams, authInfo runtime.ClientAuthInfoWriter) (*PutPeoplePersonIDKidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPeoplePersonIDKidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPeoplePersonIDKids",
		Method:             "PUT",
		PathPattern:        "/people/{person_id}/kids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPeoplePersonIDKidsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPeoplePersonIDKidsOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
