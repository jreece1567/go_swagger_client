package p_e_o_p_l_e_m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PostPeopleNotificationsSmsReader is a Reader for the PostPeopleNotificationsSms structure.
type PostPeopleNotificationsSmsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostPeopleNotificationsSmsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPostPeopleNotificationsSmsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostPeopleNotificationsSmsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostPeopleNotificationsSmsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostPeopleNotificationsSmsNoContent creates a PostPeopleNotificationsSmsNoContent with default headers values
func NewPostPeopleNotificationsSmsNoContent() *PostPeopleNotificationsSmsNoContent {
	return &PostPeopleNotificationsSmsNoContent{}
}

/*PostPeopleNotificationsSmsNoContent handles this case with default header values.

Message published succesfully
*/
type PostPeopleNotificationsSmsNoContent struct {
}

func (o *PostPeopleNotificationsSmsNoContent) Error() string {
	return fmt.Sprintf("[POST /people/notifications/sms][%d] postPeopleNotificationsSmsNoContent ", 204)
}

func (o *PostPeopleNotificationsSmsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostPeopleNotificationsSmsBadRequest creates a PostPeopleNotificationsSmsBadRequest with default headers values
func NewPostPeopleNotificationsSmsBadRequest() *PostPeopleNotificationsSmsBadRequest {
	return &PostPeopleNotificationsSmsBadRequest{}
}

/*PostPeopleNotificationsSmsBadRequest handles this case with default header values.

Bad request
*/
type PostPeopleNotificationsSmsBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PostPeopleNotificationsSmsBadRequest) Error() string {
	return fmt.Sprintf("[POST /people/notifications/sms][%d] postPeopleNotificationsSmsBadRequest  %+v", 400, o.Payload)
}

func (o *PostPeopleNotificationsSmsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostPeopleNotificationsSmsUnprocessableEntity creates a PostPeopleNotificationsSmsUnprocessableEntity with default headers values
func NewPostPeopleNotificationsSmsUnprocessableEntity() *PostPeopleNotificationsSmsUnprocessableEntity {
	return &PostPeopleNotificationsSmsUnprocessableEntity{}
}

/*PostPeopleNotificationsSmsUnprocessableEntity handles this case with default header values.

Centre or Person identitifer does not exist
*/
type PostPeopleNotificationsSmsUnprocessableEntity struct {
	Payload *models_secure.Notifications422Response
}

func (o *PostPeopleNotificationsSmsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /people/notifications/sms][%d] postPeopleNotificationsSmsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostPeopleNotificationsSmsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Notifications422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
