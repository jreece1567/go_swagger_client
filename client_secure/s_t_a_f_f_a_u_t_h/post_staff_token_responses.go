package s_t_a_f_f_a_u_t_h

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PostStaffTokenReader is a Reader for the PostStaffToken structure.
type PostStaffTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostStaffTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostStaffTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostStaffTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostStaffTokenOK creates a PostStaffTokenOK with default headers values
func NewPostStaffTokenOK() *PostStaffTokenOK {
	return &PostStaffTokenOK{}
}

/*PostStaffTokenOK handles this case with default header values.

Success
*/
type PostStaffTokenOK struct {
	Payload *models_secure.Token
}

func (o *PostStaffTokenOK) Error() string {
	return fmt.Sprintf("[POST /staff/token][%d] postStaffTokenOK  %+v", 200, o.Payload)
}

func (o *PostStaffTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Token)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStaffTokenUnauthorized creates a PostStaffTokenUnauthorized with default headers values
func NewPostStaffTokenUnauthorized() *PostStaffTokenUnauthorized {
	return &PostStaffTokenUnauthorized{}
}

/*PostStaffTokenUnauthorized handles this case with default header values.

Unauthorized.
*/
type PostStaffTokenUnauthorized struct {
	Payload *models_secure.AuthorizationErrorResponse
}

func (o *PostStaffTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /staff/token][%d] postStaffTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *PostStaffTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.AuthorizationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
