package p_a_y_m_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// NewPostPaymentsTransactionsPurchaseParams creates a new PostPaymentsTransactionsPurchaseParams object
// with the default values initialized.
func NewPostPaymentsTransactionsPurchaseParams() *PostPaymentsTransactionsPurchaseParams {
	var ()
	return &PostPaymentsTransactionsPurchaseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPaymentsTransactionsPurchaseParamsWithTimeout creates a new PostPaymentsTransactionsPurchaseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPaymentsTransactionsPurchaseParamsWithTimeout(timeout time.Duration) *PostPaymentsTransactionsPurchaseParams {
	var ()
	return &PostPaymentsTransactionsPurchaseParams{

		timeout: timeout,
	}
}

/*PostPaymentsTransactionsPurchaseParams contains all the parameters to send to the API endpoint
for the post payments transactions purchase operation typically these are written to a http.Request
*/
type PostPaymentsTransactionsPurchaseParams struct {

	/*TransactionData
	  Data to create a purchase transaction.

	*/
	TransactionData *models_secure.TransactionAuthorizeOrPurchaseBody

	timeout time.Duration
}

// WithTransactionData adds the transactionData to the post payments transactions purchase params
func (o *PostPaymentsTransactionsPurchaseParams) WithTransactionData(TransactionData *models_secure.TransactionAuthorizeOrPurchaseBody) *PostPaymentsTransactionsPurchaseParams {
	o.TransactionData = TransactionData
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostPaymentsTransactionsPurchaseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.TransactionData == nil {
		o.TransactionData = new(models_secure.TransactionAuthorizeOrPurchaseBody)
	}

	if err := r.SetBodyParam(o.TransactionData); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
