package p_a_y_m_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// NewPostPaymentsTransactionsAuthorizeParams creates a new PostPaymentsTransactionsAuthorizeParams object
// with the default values initialized.
func NewPostPaymentsTransactionsAuthorizeParams() *PostPaymentsTransactionsAuthorizeParams {
	var ()
	return &PostPaymentsTransactionsAuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostPaymentsTransactionsAuthorizeParamsWithTimeout creates a new PostPaymentsTransactionsAuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostPaymentsTransactionsAuthorizeParamsWithTimeout(timeout time.Duration) *PostPaymentsTransactionsAuthorizeParams {
	var ()
	return &PostPaymentsTransactionsAuthorizeParams{

		timeout: timeout,
	}
}

/*PostPaymentsTransactionsAuthorizeParams contains all the parameters to send to the API endpoint
for the post payments transactions authorize operation typically these are written to a http.Request
*/
type PostPaymentsTransactionsAuthorizeParams struct {

	/*TransactionData
	  Data to authorize a transaction.

	*/
	TransactionData *models_secure.TransactionAuthorizeOrPurchaseBody

	timeout time.Duration
}

// WithTransactionData adds the transactionData to the post payments transactions authorize params
func (o *PostPaymentsTransactionsAuthorizeParams) WithTransactionData(TransactionData *models_secure.TransactionAuthorizeOrPurchaseBody) *PostPaymentsTransactionsAuthorizeParams {
	o.TransactionData = TransactionData
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostPaymentsTransactionsAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.TransactionData == nil {
		o.TransactionData = new(models_secure.TransactionAuthorizeOrPurchaseBody)
	}

	if err := r.SetBodyParam(o.TransactionData); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
