package p_a_y_m_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPaymentsTransactionsTransactionIDParams creates a new GetPaymentsTransactionsTransactionIDParams object
// with the default values initialized.
func NewGetPaymentsTransactionsTransactionIDParams() *GetPaymentsTransactionsTransactionIDParams {
	var ()
	return &GetPaymentsTransactionsTransactionIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPaymentsTransactionsTransactionIDParamsWithTimeout creates a new GetPaymentsTransactionsTransactionIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPaymentsTransactionsTransactionIDParamsWithTimeout(timeout time.Duration) *GetPaymentsTransactionsTransactionIDParams {
	var ()
	return &GetPaymentsTransactionsTransactionIDParams{

		timeout: timeout,
	}
}

/*GetPaymentsTransactionsTransactionIDParams contains all the parameters to send to the API endpoint
for the get payments transactions transaction ID operation typically these are written to a http.Request
*/
type GetPaymentsTransactionsTransactionIDParams struct {

	/*TransactionID
	  Transaction identifier.

	*/
	TransactionID string

	timeout time.Duration
}

// WithTransactionID adds the transactionId to the get payments transactions transaction ID params
func (o *GetPaymentsTransactionsTransactionIDParams) WithTransactionID(TransactionID string) *GetPaymentsTransactionsTransactionIDParams {
	o.TransactionID = TransactionID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetPaymentsTransactionsTransactionIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param transaction_id
	if err := r.SetPathParam("transaction_id", o.TransactionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
