package p_a_r_k_i_n_g

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParkingSessionsSummaryParams creates a new GetParkingSessionsSummaryParams object
// with the default values initialized.
func NewGetParkingSessionsSummaryParams() *GetParkingSessionsSummaryParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(5)
	)
	return &GetParkingSessionsSummaryParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParkingSessionsSummaryParamsWithTimeout creates a new GetParkingSessionsSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParkingSessionsSummaryParamsWithTimeout(timeout time.Duration) *GetParkingSessionsSummaryParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(5)
	)
	return &GetParkingSessionsSummaryParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetParkingSessionsSummaryParams contains all the parameters to send to the API endpoint
for the get parking sessions summary operation typically these are written to a http.Request
*/
type GetParkingSessionsSummaryParams struct {

	/*AccessDevice
	  Access device identifier.

	*/
	AccessDevice string
	/*CentreID
	  Centre identifier.

	*/
	CentreID string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*PersonID
	  Person identifier.

	*/
	PersonID string

	timeout time.Duration
}

// WithAccessDevice adds the accessDevice to the get parking sessions summary params
func (o *GetParkingSessionsSummaryParams) WithAccessDevice(AccessDevice string) *GetParkingSessionsSummaryParams {
	o.AccessDevice = AccessDevice
	return o
}

// WithCentreID adds the centreId to the get parking sessions summary params
func (o *GetParkingSessionsSummaryParams) WithCentreID(CentreID string) *GetParkingSessionsSummaryParams {
	o.CentreID = CentreID
	return o
}

// WithPage adds the page to the get parking sessions summary params
func (o *GetParkingSessionsSummaryParams) WithPage(Page *int64) *GetParkingSessionsSummaryParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get parking sessions summary params
func (o *GetParkingSessionsSummaryParams) WithPerPage(PerPage *int64) *GetParkingSessionsSummaryParams {
	o.PerPage = PerPage
	return o
}

// WithPersonID adds the personId to the get parking sessions summary params
func (o *GetParkingSessionsSummaryParams) WithPersonID(PersonID string) *GetParkingSessionsSummaryParams {
	o.PersonID = PersonID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetParkingSessionsSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param access_device
	qrAccessDevice := o.AccessDevice
	qAccessDevice := qrAccessDevice
	if qAccessDevice != "" {
		if err := r.SetQueryParam("access_device", qAccessDevice); err != nil {
			return err
		}
	}

	// query param centre_id
	qrCentreID := o.CentreID
	qCentreID := qrCentreID
	if qCentreID != "" {
		if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	// query param person_id
	qrPersonID := o.PersonID
	qPersonID := qrPersonID
	if qPersonID != "" {
		if err := r.SetQueryParam("person_id", qPersonID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
