package p_a_r_k_i_n_g

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// NewPatchParkingGaragesGarageIDParams creates a new PatchParkingGaragesGarageIDParams object
// with the default values initialized.
func NewPatchParkingGaragesGarageIDParams() *PatchParkingGaragesGarageIDParams {
	var ()
	return &PatchParkingGaragesGarageIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchParkingGaragesGarageIDParamsWithTimeout creates a new PatchParkingGaragesGarageIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchParkingGaragesGarageIDParamsWithTimeout(timeout time.Duration) *PatchParkingGaragesGarageIDParams {
	var ()
	return &PatchParkingGaragesGarageIDParams{

		timeout: timeout,
	}
}

/*PatchParkingGaragesGarageIDParams contains all the parameters to send to the API endpoint
for the patch parking garages garage ID operation typically these are written to a http.Request
*/
type PatchParkingGaragesGarageIDParams struct {

	/*GarageData
	  Data to update a parking garage.

	*/
	GarageData *models_secure.GaragesUpdateBody
	/*GarageID*/
	GarageID string

	timeout time.Duration
}

// WithGarageData adds the garageData to the patch parking garages garage ID params
func (o *PatchParkingGaragesGarageIDParams) WithGarageData(GarageData *models_secure.GaragesUpdateBody) *PatchParkingGaragesGarageIDParams {
	o.GarageData = GarageData
	return o
}

// WithGarageID adds the garageId to the patch parking garages garage ID params
func (o *PatchParkingGaragesGarageIDParams) WithGarageID(GarageID string) *PatchParkingGaragesGarageIDParams {
	o.GarageID = GarageID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PatchParkingGaragesGarageIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.GarageData == nil {
		o.GarageData = new(models_secure.GaragesUpdateBody)
	}

	if err := r.SetBodyParam(o.GarageData); err != nil {
		return err
	}

	// path param garage_id
	if err := r.SetPathParam("garage_id", o.GarageID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
