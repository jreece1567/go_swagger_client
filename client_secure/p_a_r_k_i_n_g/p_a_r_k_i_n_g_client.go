package p_a_r_k_i_n_g

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new p a r k i n g API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p a r k i n g API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteParkingOperatorsCentreID deletes a car park business operator

Request deletion of a Car Park Business Operator.
*/
func (a *Client) DeleteParkingOperatorsCentreID(params *DeleteParkingOperatorsCentreIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteParkingOperatorsCentreIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParkingOperatorsCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteParkingOperatorsCentreID",
		Method:             "DELETE",
		PathPattern:        "/parking/operators/{centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteParkingOperatorsCentreIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteParkingOperatorsCentreIDNoContent), nil
}

/*
GetParkingGarages retrieves information for garages

Retrieve detailed information for parking garages.
*/
func (a *Client) GetParkingGarages(params *GetParkingGaragesParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingGaragesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingGaragesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingGarages",
		Method:             "GET",
		PathPattern:        "/parking/garages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingGaragesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingGaragesOK), nil
}

/*
GetParkingGaragesCentreIDSummary retrieves information about parking garages in a specific centre

Retrieve a summary of details for all parking locations in a specific centre.
*/
func (a *Client) GetParkingGaragesCentreIDSummary(params *GetParkingGaragesCentreIDSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingGaragesCentreIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingGaragesCentreIDSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingGaragesCentreIDSummary",
		Method:             "GET",
		PathPattern:        "/parking/garages/{centre_id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingGaragesCentreIDSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingGaragesCentreIDSummaryOK), nil
}

/*
GetParkingGaragesGarageID retrieves a garage

Retrieve details about a garage.
*/
func (a *Client) GetParkingGaragesGarageID(params *GetParkingGaragesGarageIDParams) (*GetParkingGaragesGarageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingGaragesGarageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingGaragesGarageID",
		Method:             "GET",
		PathPattern:        "/parking/garages/{garage_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingGaragesGarageIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingGaragesGarageIDOK), nil
}

/*
GetParkingOperators lists all car park business operators

Request an array of Car Park Business Operators.
*/
func (a *Client) GetParkingOperators(params *GetParkingOperatorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingOperatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingOperatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingOperators",
		Method:             "GET",
		PathPattern:        "/parking/operators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingOperatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingOperatorsOK), nil
}

/*
GetParkingOperatorsCentreID retrieves information for a car park business operator

Retrieve all the details for a Car Park Business Operator with the given centre_id.
*/
func (a *Client) GetParkingOperatorsCentreID(params *GetParkingOperatorsCentreIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingOperatorsCentreIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingOperatorsCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingOperatorsCentreID",
		Method:             "GET",
		PathPattern:        "/parking/operators/{centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingOperatorsCentreIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingOperatorsCentreIDOK), nil
}

/*
GetParkingSessions retrieves list of parking sessions

Retrieve all the parking session details for a user with the given person_id.
*/
func (a *Client) GetParkingSessions(params *GetParkingSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingSessions",
		Method:             "GET",
		PathPattern:        "/parking/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingSessionsOK), nil
}

/*
GetParkingSessionsInvoice retrieves invoice information for a user

Retrieve all the information necessary to generate a tax invoice for a user.
*/
func (a *Client) GetParkingSessionsInvoice(params *GetParkingSessionsInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingSessionsInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingSessionsInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingSessionsInvoice",
		Method:             "GET",
		PathPattern:        "/parking/sessions/invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingSessionsInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingSessionsInvoiceOK), nil
}

/*
GetParkingSessionsOpen retrieves information of open parking sessions

Retrieve the most recent open parking activity session details for a user with the given person_id. Open sessions have an entry date but no corresponding exit date.
*/
func (a *Client) GetParkingSessionsOpen(params *GetParkingSessionsOpenParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingSessionsOpenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingSessionsOpenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingSessionsOpen",
		Method:             "GET",
		PathPattern:        "/parking/sessions/open",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingSessionsOpenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingSessionsOpenOK), nil
}

/*
GetParkingSessionsParkingSessionID retrieves information for a single parking session

Request to retrieve information for a single parking session.
*/
func (a *Client) GetParkingSessionsParkingSessionID(params *GetParkingSessionsParkingSessionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingSessionsParkingSessionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingSessionsParkingSessionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingSessionsParkingSessionID",
		Method:             "GET",
		PathPattern:        "/parking/sessions/{parking_session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingSessionsParkingSessionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingSessionsParkingSessionIDOK), nil
}

/*
GetParkingSessionsSummary retrieves a summary for each month of received access device and person id on a given center

Retrieve a summary for each month of received access device and person id on a given center.
*/
func (a *Client) GetParkingSessionsSummary(params *GetParkingSessionsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetParkingSessionsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParkingSessionsSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParkingSessionsSummary",
		Method:             "GET",
		PathPattern:        "/parking/sessions/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParkingSessionsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParkingSessionsSummaryOK), nil
}

/*
PatchParkingGaragesGarageID updates a garage

Request update of parking garage details from JSON data in the request body.
*/
func (a *Client) PatchParkingGaragesGarageID(params *PatchParkingGaragesGarageIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchParkingGaragesGarageIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchParkingGaragesGarageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchParkingGaragesGarageID",
		Method:             "PATCH",
		PathPattern:        "/parking/garages/{garage_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchParkingGaragesGarageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchParkingGaragesGarageIDNoContent), nil
}

/*
PatchParkingOperatorsCentreID updates a car park business operator

Request update of a Car Park Business Operator from JSON data in the request body.
*/
func (a *Client) PatchParkingOperatorsCentreID(params *PatchParkingOperatorsCentreIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchParkingOperatorsCentreIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchParkingOperatorsCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchParkingOperatorsCentreID",
		Method:             "PATCH",
		PathPattern:        "/parking/operators/{centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchParkingOperatorsCentreIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchParkingOperatorsCentreIDNoContent), nil
}

/*
PostParkingActivities creates a parking activity

Request creation of a parking activity from JSON data in the request body.
*/
func (a *Client) PostParkingActivities(params *PostParkingActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingActivitiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingActivities",
		Method:             "POST",
		PathPattern:        "/parking/activities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingActivitiesCreated), nil
}

/*
PostParkingGarages creates a garage

Request creation of a parking garage from JSON data in the request body.
*/
func (a *Client) PostParkingGarages(params *PostParkingGaragesParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingGaragesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingGaragesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingGarages",
		Method:             "POST",
		PathPattern:        "/parking/garages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingGaragesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingGaragesCreated), nil
}

/*
PostParkingIntegrationsSwarcoCentreIDGarages updates a swarco garage

Request update of Swarco parking garage details from JSON data in the request body.
*/
func (a *Client) PostParkingIntegrationsSwarcoCentreIDGarages(params *PostParkingIntegrationsSwarcoCentreIDGaragesParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingIntegrationsSwarcoCentreIDGaragesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingIntegrationsSwarcoCentreIDGaragesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingIntegrationsSwarcoCentreIDGarages",
		Method:             "POST",
		PathPattern:        "/parking/integrations/swarco/{centre_id}/garages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingIntegrationsSwarcoCentreIDGaragesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingIntegrationsSwarcoCentreIDGaragesNoContent), nil
}

/*
PostParkingOperators creates a car park business operator

Request creation of a Car Park Business Operator from JSON data in the request body.
*/
func (a *Client) PostParkingOperators(params *PostParkingOperatorsParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingOperatorsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingOperatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingOperators",
		Method:             "POST",
		PathPattern:        "/parking/operators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingOperatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingOperatorsCreated), nil
}

/*
PostParkingSessionsParkingSessionIDCharge reprocesses the charge of a parking session

Reprocess the charge of a parking session
*/
func (a *Client) PostParkingSessionsParkingSessionIDCharge(params *PostParkingSessionsParkingSessionIDChargeParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingSessionsParkingSessionIDChargeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingSessionsParkingSessionIDChargeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingSessionsParkingSessionIDCharge",
		Method:             "POST",
		PathPattern:        "/parking/sessions/{parking_session_id}/charge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingSessionsParkingSessionIDChargeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingSessionsParkingSessionIDChargeOK), nil
}

/*
PostParkingSessionsParkingSessionIDRefund refunds a parking session charge

Refund a parking session charge.
*/
func (a *Client) PostParkingSessionsParkingSessionIDRefund(params *PostParkingSessionsParkingSessionIDRefundParams, authInfo runtime.ClientAuthInfoWriter) (*PostParkingSessionsParkingSessionIDRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParkingSessionsParkingSessionIDRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParkingSessionsParkingSessionIDRefund",
		Method:             "POST",
		PathPattern:        "/parking/sessions/{parking_session_id}/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParkingSessionsParkingSessionIDRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParkingSessionsParkingSessionIDRefundOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
