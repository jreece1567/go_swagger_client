package p_a_r_k_i_n_g

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParkingSessionsOpenParams creates a new GetParkingSessionsOpenParams object
// with the default values initialized.
func NewGetParkingSessionsOpenParams() *GetParkingSessionsOpenParams {
	var (
		centreIdDefault string = string("sanfrancisco")
	)
	return &GetParkingSessionsOpenParams{
		CentreID: &centreIdDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParkingSessionsOpenParamsWithTimeout creates a new GetParkingSessionsOpenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParkingSessionsOpenParamsWithTimeout(timeout time.Duration) *GetParkingSessionsOpenParams {
	var (
		centreIdDefault string = string("sanfrancisco")
	)
	return &GetParkingSessionsOpenParams{
		CentreID: &centreIdDefault,

		timeout: timeout,
	}
}

/*GetParkingSessionsOpenParams contains all the parameters to send to the API endpoint
for the get parking sessions open operation typically these are written to a http.Request
*/
type GetParkingSessionsOpenParams struct {

	/*AccessDevice
	  Access device identifier. Return open parking sessions with the given access_device.

	*/
	AccessDevice *string
	/*CentreID
	  Centre identifier. Request the open parking sessions with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*PersonID
	  Person identifier. Request the open parking sessions for a user with the given person_id.

	*/
	PersonID string

	timeout time.Duration
}

// WithAccessDevice adds the accessDevice to the get parking sessions open params
func (o *GetParkingSessionsOpenParams) WithAccessDevice(AccessDevice *string) *GetParkingSessionsOpenParams {
	o.AccessDevice = AccessDevice
	return o
}

// WithCentreID adds the centreId to the get parking sessions open params
func (o *GetParkingSessionsOpenParams) WithCentreID(CentreID *string) *GetParkingSessionsOpenParams {
	o.CentreID = CentreID
	return o
}

// WithPersonID adds the personId to the get parking sessions open params
func (o *GetParkingSessionsOpenParams) WithPersonID(PersonID string) *GetParkingSessionsOpenParams {
	o.PersonID = PersonID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetParkingSessionsOpenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.AccessDevice != nil {

		// query param access_device
		var qrAccessDevice string
		if o.AccessDevice != nil {
			qrAccessDevice = *o.AccessDevice
		}
		qAccessDevice := qrAccessDevice
		if qAccessDevice != "" {
			if err := r.SetQueryParam("access_device", qAccessDevice); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	// query param person_id
	qrPersonID := o.PersonID
	qPersonID := qrPersonID
	if qPersonID != "" {
		if err := r.SetQueryParam("person_id", qPersonID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
