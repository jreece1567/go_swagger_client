package p_a_r_k_i_n_g

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParkingSessionsInvoiceParams creates a new GetParkingSessionsInvoiceParams object
// with the default values initialized.
func NewGetParkingSessionsInvoiceParams() *GetParkingSessionsInvoiceParams {
	var ()
	return &GetParkingSessionsInvoiceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParkingSessionsInvoiceParamsWithTimeout creates a new GetParkingSessionsInvoiceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParkingSessionsInvoiceParamsWithTimeout(timeout time.Duration) *GetParkingSessionsInvoiceParams {
	var ()
	return &GetParkingSessionsInvoiceParams{

		timeout: timeout,
	}
}

/*GetParkingSessionsInvoiceParams contains all the parameters to send to the API endpoint
for the get parking sessions invoice operation typically these are written to a http.Request
*/
type GetParkingSessionsInvoiceParams struct {

	/*AccessDevice
	  Access device identifier. Request the parking invoice details for a vehicle with the given access_device identifier.

	*/
	AccessDevice *string
	/*CentreID
	  Centre identifier. Request the parking invoice details with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID string
	/*EndDate
	  Request the parking invoice details on or before a specified date.

	*/
	EndDate strfmt.Date
	/*PersonID
	  Person identifier. Request the parking invoice details for a user with the given person_id.

	*/
	PersonID string
	/*StartDate
	  Request the parking invoice details on or after a specified date.

	*/
	StartDate strfmt.Date

	timeout time.Duration
}

// WithAccessDevice adds the accessDevice to the get parking sessions invoice params
func (o *GetParkingSessionsInvoiceParams) WithAccessDevice(AccessDevice *string) *GetParkingSessionsInvoiceParams {
	o.AccessDevice = AccessDevice
	return o
}

// WithCentreID adds the centreId to the get parking sessions invoice params
func (o *GetParkingSessionsInvoiceParams) WithCentreID(CentreID string) *GetParkingSessionsInvoiceParams {
	o.CentreID = CentreID
	return o
}

// WithEndDate adds the endDate to the get parking sessions invoice params
func (o *GetParkingSessionsInvoiceParams) WithEndDate(EndDate strfmt.Date) *GetParkingSessionsInvoiceParams {
	o.EndDate = EndDate
	return o
}

// WithPersonID adds the personId to the get parking sessions invoice params
func (o *GetParkingSessionsInvoiceParams) WithPersonID(PersonID string) *GetParkingSessionsInvoiceParams {
	o.PersonID = PersonID
	return o
}

// WithStartDate adds the startDate to the get parking sessions invoice params
func (o *GetParkingSessionsInvoiceParams) WithStartDate(StartDate strfmt.Date) *GetParkingSessionsInvoiceParams {
	o.StartDate = StartDate
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetParkingSessionsInvoiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.AccessDevice != nil {

		// query param access_device
		var qrAccessDevice string
		if o.AccessDevice != nil {
			qrAccessDevice = *o.AccessDevice
		}
		qAccessDevice := qrAccessDevice
		if qAccessDevice != "" {
			if err := r.SetQueryParam("access_device", qAccessDevice); err != nil {
				return err
			}
		}

	}

	// query param centre_id
	qrCentreID := o.CentreID
	qCentreID := qrCentreID
	if qCentreID != "" {
		if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
			return err
		}
	}

	// query param end_date
	qrEndDate := o.EndDate
	qEndDate := qrEndDate.String()
	if qEndDate != "" {
		if err := r.SetQueryParam("end_date", qEndDate); err != nil {
			return err
		}
	}

	// query param person_id
	qrPersonID := o.PersonID
	qPersonID := qrPersonID
	if qPersonID != "" {
		if err := r.SetQueryParam("person_id", qPersonID); err != nil {
			return err
		}
	}

	// query param start_date
	qrStartDate := o.StartDate
	qStartDate := qrStartDate.String()
	if qStartDate != "" {
		if err := r.SetQueryParam("start_date", qStartDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
