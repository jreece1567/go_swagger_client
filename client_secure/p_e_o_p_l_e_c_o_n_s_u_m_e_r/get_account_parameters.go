package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountParams creates a new GetAccountParams object
// with the default values initialized.
func NewGetAccountParams() *GetAccountParams {
	var ()
	return &GetAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountParamsWithTimeout creates a new GetAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountParamsWithTimeout(timeout time.Duration) *GetAccountParams {
	var ()
	return &GetAccountParams{

		timeout: timeout,
	}
}

/*GetAccountParams contains all the parameters to send to the API endpoint
for the get account operation typically these are written to a http.Request
*/
type GetAccountParams struct {

	/*Authorization
	  Access token

	*/
	Authorization *string
	/*Country
	  Country code of the account.

	*/
	Country *string
	/*Email
	  Email address of the account

	*/
	Email *string
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*PersonID
	  Identifier of the account

	*/
	PersonID *string

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get account params
func (o *GetAccountParams) WithAuthorization(Authorization *string) *GetAccountParams {
	o.Authorization = Authorization
	return o
}

// WithCountry adds the country to the get account params
func (o *GetAccountParams) WithCountry(Country *string) *GetAccountParams {
	o.Country = Country
	return o
}

// WithEmail adds the email to the get account params
func (o *GetAccountParams) WithEmail(Email *string) *GetAccountParams {
	o.Email = Email
	return o
}

// WithFields adds the fields to the get account params
func (o *GetAccountParams) WithFields(Fields []string) *GetAccountParams {
	o.Fields = Fields
	return o
}

// WithPersonID adds the personId to the get account params
func (o *GetAccountParams) WithPersonID(PersonID *string) *GetAccountParams {
	o.PersonID = PersonID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.PersonID != nil {

		// query param person_id
		var qrPersonID string
		if o.PersonID != nil {
			qrPersonID = *o.PersonID
		}
		qPersonID := qrPersonID
		if qPersonID != "" {
			if err := r.SetQueryParam("person_id", qPersonID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
