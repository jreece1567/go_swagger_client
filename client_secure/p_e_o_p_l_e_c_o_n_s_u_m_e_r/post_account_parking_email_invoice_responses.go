package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PostAccountParkingEmailInvoiceReader is a Reader for the PostAccountParkingEmailInvoice structure.
type PostAccountParkingEmailInvoiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostAccountParkingEmailInvoiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPostAccountParkingEmailInvoiceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostAccountParkingEmailInvoiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostAccountParkingEmailInvoiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostAccountParkingEmailInvoiceNoContent creates a PostAccountParkingEmailInvoiceNoContent with default headers values
func NewPostAccountParkingEmailInvoiceNoContent() *PostAccountParkingEmailInvoiceNoContent {
	return &PostAccountParkingEmailInvoiceNoContent{}
}

/*PostAccountParkingEmailInvoiceNoContent handles this case with default header values.

Successfully send parking invoice email.
*/
type PostAccountParkingEmailInvoiceNoContent struct {
}

func (o *PostAccountParkingEmailInvoiceNoContent) Error() string {
	return fmt.Sprintf("[POST /account/parking/email_invoice][%d] postAccountParkingEmailInvoiceNoContent ", 204)
}

func (o *PostAccountParkingEmailInvoiceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostAccountParkingEmailInvoiceBadRequest creates a PostAccountParkingEmailInvoiceBadRequest with default headers values
func NewPostAccountParkingEmailInvoiceBadRequest() *PostAccountParkingEmailInvoiceBadRequest {
	return &PostAccountParkingEmailInvoiceBadRequest{}
}

/*PostAccountParkingEmailInvoiceBadRequest handles this case with default header values.

Bad request
*/
type PostAccountParkingEmailInvoiceBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PostAccountParkingEmailInvoiceBadRequest) Error() string {
	return fmt.Sprintf("[POST /account/parking/email_invoice][%d] postAccountParkingEmailInvoiceBadRequest  %+v", 400, o.Payload)
}

func (o *PostAccountParkingEmailInvoiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAccountParkingEmailInvoiceUnauthorized creates a PostAccountParkingEmailInvoiceUnauthorized with default headers values
func NewPostAccountParkingEmailInvoiceUnauthorized() *PostAccountParkingEmailInvoiceUnauthorized {
	return &PostAccountParkingEmailInvoiceUnauthorized{}
}

/*PostAccountParkingEmailInvoiceUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PostAccountParkingEmailInvoiceUnauthorized struct {
	Payload *models_secure.UnauthorizedResponse
}

func (o *PostAccountParkingEmailInvoiceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /account/parking/email_invoice][%d] postAccountParkingEmailInvoiceUnauthorized  %+v", 401, o.Payload)
}

func (o *PostAccountParkingEmailInvoiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.UnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
