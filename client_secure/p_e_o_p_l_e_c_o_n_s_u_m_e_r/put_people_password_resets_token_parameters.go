package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// NewPutPeoplePasswordResetsTokenParams creates a new PutPeoplePasswordResetsTokenParams object
// with the default values initialized.
func NewPutPeoplePasswordResetsTokenParams() *PutPeoplePasswordResetsTokenParams {
	var ()
	return &PutPeoplePasswordResetsTokenParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutPeoplePasswordResetsTokenParamsWithTimeout creates a new PutPeoplePasswordResetsTokenParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutPeoplePasswordResetsTokenParamsWithTimeout(timeout time.Duration) *PutPeoplePasswordResetsTokenParams {
	var ()
	return &PutPeoplePasswordResetsTokenParams{

		timeout: timeout,
	}
}

/*PutPeoplePasswordResetsTokenParams contains all the parameters to send to the API endpoint
for the put people password resets token operation typically these are written to a http.Request
*/
type PutPeoplePasswordResetsTokenParams struct {

	/*Body*/
	Body *models_secure.UpdatePasswordResetBody
	/*Token
	  Password reset token.

	*/
	Token string

	timeout time.Duration
}

// WithBody adds the body to the put people password resets token params
func (o *PutPeoplePasswordResetsTokenParams) WithBody(Body *models_secure.UpdatePasswordResetBody) *PutPeoplePasswordResetsTokenParams {
	o.Body = Body
	return o
}

// WithToken adds the token to the put people password resets token params
func (o *PutPeoplePasswordResetsTokenParams) WithToken(Token string) *PutPeoplePasswordResetsTokenParams {
	o.Token = Token
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PutPeoplePasswordResetsTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Body == nil {
		o.Body = new(models_secure.UpdatePasswordResetBody)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param token
	if err := r.SetPathParam("token", o.Token); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
