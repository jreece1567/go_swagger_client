package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountParkingHistoryParams creates a new GetAccountParkingHistoryParams object
// with the default values initialized.
func NewGetAccountParkingHistoryParams() *GetAccountParkingHistoryParams {
	var (
		centreIdDefault string = string("london")
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(25)
	)
	return &GetAccountParkingHistoryParams{
		CentreID: &centreIdDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountParkingHistoryParamsWithTimeout creates a new GetAccountParkingHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountParkingHistoryParamsWithTimeout(timeout time.Duration) *GetAccountParkingHistoryParams {
	var (
		centreIdDefault string = string("london")
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(25)
	)
	return &GetAccountParkingHistoryParams{
		CentreID: &centreIdDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: timeout,
	}
}

/*GetAccountParkingHistoryParams contains all the parameters to send to the API endpoint
for the get account parking history operation typically these are written to a http.Request
*/
type GetAccountParkingHistoryParams struct {

	/*Authorization
	  Access token.

	*/
	Authorization string
	/*CentreID
	  Centre identifier. Return parking sessions of the given center.

	*/
	CentreID *string
	/*EndDate
	  Return parking history on or before a specified date.

	*/
	EndDate *strfmt.Date
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*LicensePlate
	  Vehicle identifier. Return parking sessions with the given license_plate.

	*/
	LicensePlate *string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*StartDate
	  Return parking history on or after a specified date.

	*/
	StartDate *strfmt.Date

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithAuthorization(Authorization string) *GetAccountParkingHistoryParams {
	o.Authorization = Authorization
	return o
}

// WithCentreID adds the centreId to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithCentreID(CentreID *string) *GetAccountParkingHistoryParams {
	o.CentreID = CentreID
	return o
}

// WithEndDate adds the endDate to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithEndDate(EndDate *strfmt.Date) *GetAccountParkingHistoryParams {
	o.EndDate = EndDate
	return o
}

// WithFields adds the fields to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithFields(Fields []string) *GetAccountParkingHistoryParams {
	o.Fields = Fields
	return o
}

// WithLicensePlate adds the licensePlate to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithLicensePlate(LicensePlate *string) *GetAccountParkingHistoryParams {
	o.LicensePlate = LicensePlate
	return o
}

// WithPage adds the page to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithPage(Page *int64) *GetAccountParkingHistoryParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithPerPage(PerPage *int64) *GetAccountParkingHistoryParams {
	o.PerPage = PerPage
	return o
}

// WithStartDate adds the startDate to the get account parking history params
func (o *GetAccountParkingHistoryParams) WithStartDate(StartDate *strfmt.Date) *GetAccountParkingHistoryParams {
	o.StartDate = StartDate
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountParkingHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.Date
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {
			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.LicensePlate != nil {

		// query param license_plate
		var qrLicensePlate string
		if o.LicensePlate != nil {
			qrLicensePlate = *o.LicensePlate
		}
		qLicensePlate := qrLicensePlate
		if qLicensePlate != "" {
			if err := r.SetQueryParam("license_plate", qLicensePlate); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
