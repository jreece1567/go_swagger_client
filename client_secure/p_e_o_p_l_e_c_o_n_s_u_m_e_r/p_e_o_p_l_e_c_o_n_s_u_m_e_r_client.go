package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new p e o p l e c o n s u m e r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p e o p l e c o n s u m e r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAccount deletes an account

Request deletion of an account.
*/
func (a *Client) DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccount",
		Method:             "DELETE",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountNoContent), nil
}

/*
DeleteAccountAppsAppIDDevicesDeviceToken deletes a device

Request delete of a device
*/
func (a *Client) DeleteAccountAppsAppIDDevicesDeviceToken(params *DeleteAccountAppsAppIDDevicesDeviceTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountAppsAppIDDevicesDeviceTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountAppsAppIDDevicesDeviceTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountAppsAppIDDevicesDeviceToken",
		Method:             "DELETE",
		PathPattern:        "/account/apps/{app_id}/devices/{device_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountAppsAppIDDevicesDeviceTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountAppsAppIDDevicesDeviceTokenNoContent), nil
}

/*
DeleteAccountCreditCardsPaymentMethodToken softs delete a credit card

Request deletion of a credit card.
*/
func (a *Client) DeleteAccountCreditCardsPaymentMethodToken(params *DeleteAccountCreditCardsPaymentMethodTokenParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountCreditCardsPaymentMethodTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountCreditCardsPaymentMethodTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountCreditCardsPaymentMethodToken",
		Method:             "DELETE",
		PathPattern:        "/account/credit_cards/{payment_method_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountCreditCardsPaymentMethodTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountCreditCardsPaymentMethodTokenNoContent), nil
}

/*
DeleteAccountVehiclesLicensePlate deletes a vehicle

Request deletion of a vehicle.
*/
func (a *Client) DeleteAccountVehiclesLicensePlate(params *DeleteAccountVehiclesLicensePlateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccountVehiclesLicensePlateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountVehiclesLicensePlateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountVehiclesLicensePlate",
		Method:             "DELETE",
		PathPattern:        "/account/vehicles/{license_plate}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountVehiclesLicensePlateReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountVehiclesLicensePlateNoContent), nil
}

/*
GetAccount retrieves a person account details

There are 3 possible ways to specify which account data should be returned. 1) Providing an access token, that will return all data related to the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will return the account details that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will return the account associated with that identifier (only works with partial accounts).
*/
func (a *Client) GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccount",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountOK), nil
}

/*
GetAccountCreditCards lists user credit cards

Request an array of credit cards.
*/
func (a *Client) GetAccountCreditCards(params *GetAccountCreditCardsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountCreditCardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountCreditCardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountCreditCards",
		Method:             "GET",
		PathPattern:        "/account/credit_cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountCreditCardsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountCreditCardsOK), nil
}

/*
GetAccountInterests retrieves account interests

Retrieve account interests. Requires authentication. Retrieving interest list for partial accounts is not supported.
*/
func (a *Client) GetAccountInterests(params *GetAccountInterestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountInterestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountInterestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountInterests",
		Method:             "GET",
		PathPattern:        "/account/interests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountInterestsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountInterestsOK), nil
}

/*
GetAccountNewsletters gets newsletter subscriptions for the account

Request to get the newsletter subscriptions for the account. Full accounts require a newsletter-access-token to access, partial accounts do not.
*/
func (a *Client) GetAccountNewsletters(params *GetAccountNewslettersParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountNewslettersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountNewslettersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountNewsletters",
		Method:             "GET",
		PathPattern:        "/account/newsletters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountNewslettersReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountNewslettersOK), nil
}

/*
GetAccountParkingHistory lists parking sessions history from a user

Request an array of parking sessions.
*/
func (a *Client) GetAccountParkingHistory(params *GetAccountParkingHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountParkingHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParkingHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountParkingHistory",
		Method:             "GET",
		PathPattern:        "/account/parking/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountParkingHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountParkingHistoryOK), nil
}

/*
GetAccountParkingSessionsSummary lists all parking sessions summary for a license plate

Request an array of parking sessions summary for a license plate.
*/
func (a *Client) GetAccountParkingSessionsSummary(params *GetAccountParkingSessionsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountParkingSessionsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParkingSessionsSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountParkingSessionsSummary",
		Method:             "GET",
		PathPattern:        "/account/parking/sessions/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountParkingSessionsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountParkingSessionsSummaryOK), nil
}

/*
GetAccountStatus retrieves account status

Return the status of account, which can be: ["full", "partial", "none", "deleted", "locked"].
*/
func (a *Client) GetAccountStatus(params *GetAccountStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountStatus",
		Method:             "GET",
		PathPattern:        "/account/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountStatusOK), nil
}

/*
GetAccountVehicles lists user vehicles

Request an array of vehicles.
*/
func (a *Client) GetAccountVehicles(params *GetAccountVehiclesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccountVehiclesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountVehiclesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountVehicles",
		Method:             "GET",
		PathPattern:        "/account/vehicles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountVehiclesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountVehiclesOK), nil
}

/*
PatchAccount updates a person account

There are 3 possible ways to specify which account should be updated. 1) Providing an access token, that will return update the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will update the account that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will update the account associated with that identifier (only works with partial accounts).
*/
func (a *Client) PatchAccount(params *PatchAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccount",
		Method:             "PATCH",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountNoContent), nil
}

/*
PatchAccountCreditCardsPaymentMethodToken updates a user credit card

Request update of a credit card from JSON data in the request body.
*/
func (a *Client) PatchAccountCreditCardsPaymentMethodToken(params *PatchAccountCreditCardsPaymentMethodTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountCreditCardsPaymentMethodTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountCreditCardsPaymentMethodTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountCreditCardsPaymentMethodToken",
		Method:             "PATCH",
		PathPattern:        "/account/credit_cards/{payment_method_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountCreditCardsPaymentMethodTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountCreditCardsPaymentMethodTokenNoContent), nil
}

/*
PatchAccountNewslettersSubscribe updates newsletter details for the account

Request update of newsletter subscriptions and email_marketing_opt_in for account. A newsletter-access-token is required in the request body.
*/
func (a *Client) PatchAccountNewslettersSubscribe(params *PatchAccountNewslettersSubscribeParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountNewslettersSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountNewslettersSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountNewslettersSubscribe",
		Method:             "PATCH",
		PathPattern:        "/account/newsletters/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountNewslettersSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountNewslettersSubscribeOK), nil
}

/*
PatchAccountPassword changes account password

Change account password
*/
func (a *Client) PatchAccountPassword(params *PatchAccountPasswordParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountPassword",
		Method:             "PATCH",
		PathPattern:        "/account/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountPasswordNoContent), nil
}

/*
PatchAccountVehiclesLicensePlate updates a vehicle

Request update of a vehicle from JSON data in request body.
*/
func (a *Client) PatchAccountVehiclesLicensePlate(params *PatchAccountVehiclesLicensePlateParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccountVehiclesLicensePlateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccountVehiclesLicensePlateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountVehiclesLicensePlate",
		Method:             "PATCH",
		PathPattern:        "/account/vehicles/{license_plate}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccountVehiclesLicensePlateReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountVehiclesLicensePlateNoContent), nil
}

/*
PostAccount creates a person account

Create a person account.
*/
func (a *Client) PostAccount(params *PostAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccount",
		Method:             "POST",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountCreated), nil
}

/*
PostAccountCreditCards adds a credit card to a user account

Request adding a credit card to a user account from JSON data in the request body.
*/
func (a *Client) PostAccountCreditCards(params *PostAccountCreditCardsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountCreditCardsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountCreditCardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountCreditCards",
		Method:             "POST",
		PathPattern:        "/account/credit_cards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountCreditCardsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountCreditCardsCreated), nil
}

/*
PostAccountInterests adds new interests to account

Add new interests to account.
*/
func (a *Client) PostAccountInterests(params *PostAccountInterestsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountInterestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountInterestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountInterests",
		Method:             "POST",
		PathPattern:        "/account/interests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountInterestsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountInterestsOK), nil
}

/*
PostAccountKids adds new kids to account

Add new kids to account.
*/
func (a *Client) PostAccountKids(params *PostAccountKidsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountKidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountKidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountKids",
		Method:             "POST",
		PathPattern:        "/account/kids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountKidsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountKidsOK), nil
}

/*
PostAccountNewslettersSubscribe subscribes to newsletters

Request creation of newsletter subscriptions for account.
*/
func (a *Client) PostAccountNewslettersSubscribe(params *PostAccountNewslettersSubscribeParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountNewslettersSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountNewslettersSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountNewslettersSubscribe",
		Method:             "POST",
		PathPattern:        "/account/newsletters/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountNewslettersSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountNewslettersSubscribeOK), nil
}

/*
PostAccountParkingEmailInvoice sends parking invoice email

Request to send parking invoice email.
*/
func (a *Client) PostAccountParkingEmailInvoice(params *PostAccountParkingEmailInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountParkingEmailInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountParkingEmailInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountParkingEmailInvoice",
		Method:             "POST",
		PathPattern:        "/account/parking/email_invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountParkingEmailInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountParkingEmailInvoiceNoContent), nil
}

/*
PostAccountParkingSignup signups a user to parking service

Request to signup a user account to parking service.
*/
func (a *Client) PostAccountParkingSignup(params *PostAccountParkingSignupParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountParkingSignupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountParkingSignupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountParkingSignup",
		Method:             "POST",
		PathPattern:        "/account/parking/signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountParkingSignupReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountParkingSignupOK), nil
}

/*
PostAccountUpgrade upgrades a partial account to a full account

Upgrade a partial account to a full account. Needs either a person_id, or an email and country to identify the account to be upgraded.
*/
func (a *Client) PostAccountUpgrade(params *PostAccountUpgradeParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountUpgradeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountUpgrade",
		Method:             "POST",
		PathPattern:        "/account/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountUpgradeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountUpgradeNoContent), nil
}

/*
PostAccountVehicles adds a vehicle to a user account

Request adding a vehicle to a user account from JSON data in the request body.
*/
func (a *Client) PostAccountVehicles(params *PostAccountVehiclesParams, authInfo runtime.ClientAuthInfoWriter) (*PostAccountVehiclesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountVehiclesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountVehicles",
		Method:             "POST",
		PathPattern:        "/account/vehicles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountVehiclesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountVehiclesCreated), nil
}

/*
PostPeoplePasswordResets initiates an account password reset

Initiate an account password reset
*/
func (a *Client) PostPeoplePasswordResets(params *PostPeoplePasswordResetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostPeoplePasswordResetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPeoplePasswordResetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPeoplePasswordResets",
		Method:             "POST",
		PathPattern:        "/people/password_resets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostPeoplePasswordResetsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPeoplePasswordResetsOK), nil
}

/*
PutAccountAppsAppID upserts app

Request upsert of a app from JSON data in request body.
*/
func (a *Client) PutAccountAppsAppID(params *PutAccountAppsAppIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountAppsAppIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountAppsAppIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccountAppsAppID",
		Method:             "PUT",
		PathPattern:        "/account/apps/{app_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountAppsAppIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAccountAppsAppIDNoContent), nil
}

/*
PutAccountAppsAppIDDevicesDeviceToken upserts device

Request upsert of a device from JSON data in request body.
*/
func (a *Client) PutAccountAppsAppIDDevicesDeviceToken(params *PutAccountAppsAppIDDevicesDeviceTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountAppsAppIDDevicesDeviceTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountAppsAppIDDevicesDeviceTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccountAppsAppIDDevicesDeviceToken",
		Method:             "PUT",
		PathPattern:        "/account/apps/{app_id}/devices/{device_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountAppsAppIDDevicesDeviceTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAccountAppsAppIDDevicesDeviceTokenNoContent), nil
}

/*
PutAccountInterests replaces account interests with new interests

Replace account interests. Requires authentication. Replacing interest list for partial accounts is not supported.
*/
func (a *Client) PutAccountInterests(params *PutAccountInterestsParams, authInfo runtime.ClientAuthInfoWriter) (*PutAccountInterestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAccountInterestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAccountInterests",
		Method:             "PUT",
		PathPattern:        "/account/interests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAccountInterestsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAccountInterestsOK), nil
}

/*
PutPeoplePasswordResetsToken resets account password

Reset account password
*/
func (a *Client) PutPeoplePasswordResetsToken(params *PutPeoplePasswordResetsTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PutPeoplePasswordResetsTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPeoplePasswordResetsTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPeoplePasswordResetsToken",
		Method:             "PUT",
		PathPattern:        "/people/password_resets/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutPeoplePasswordResetsTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPeoplePasswordResetsTokenNoContent), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
