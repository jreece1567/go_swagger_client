package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountStatusParams creates a new GetAccountStatusParams object
// with the default values initialized.
func NewGetAccountStatusParams() *GetAccountStatusParams {
	var ()
	return &GetAccountStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountStatusParamsWithTimeout creates a new GetAccountStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountStatusParamsWithTimeout(timeout time.Duration) *GetAccountStatusParams {
	var ()
	return &GetAccountStatusParams{

		timeout: timeout,
	}
}

/*GetAccountStatusParams contains all the parameters to send to the API endpoint
for the get account status operation typically these are written to a http.Request
*/
type GetAccountStatusParams struct {

	/*Country
	  Country code of the account.

	*/
	Country string
	/*Email
	  Email address of the account

	*/
	Email string

	timeout time.Duration
}

// WithCountry adds the country to the get account status params
func (o *GetAccountStatusParams) WithCountry(Country string) *GetAccountStatusParams {
	o.Country = Country
	return o
}

// WithEmail adds the email to the get account status params
func (o *GetAccountStatusParams) WithEmail(Email string) *GetAccountStatusParams {
	o.Email = Email
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param country
	qrCountry := o.Country
	qCountry := qrCountry
	if qCountry != "" {
		if err := r.SetQueryParam("country", qCountry); err != nil {
			return err
		}
	}

	// query param email
	qrEmail := o.Email
	qEmail := qrEmail
	if qEmail != "" {
		if err := r.SetQueryParam("email", qEmail); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
