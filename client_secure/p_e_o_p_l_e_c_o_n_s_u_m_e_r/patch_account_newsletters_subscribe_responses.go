package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PatchAccountNewslettersSubscribeReader is a Reader for the PatchAccountNewslettersSubscribe structure.
type PatchAccountNewslettersSubscribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchAccountNewslettersSubscribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchAccountNewslettersSubscribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchAccountNewslettersSubscribeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAccountNewslettersSubscribeOK creates a PatchAccountNewslettersSubscribeOK with default headers values
func NewPatchAccountNewslettersSubscribeOK() *PatchAccountNewslettersSubscribeOK {
	return &PatchAccountNewslettersSubscribeOK{}
}

/*PatchAccountNewslettersSubscribeOK handles this case with default header values.

Successfully updated newsletter details for account.
*/
type PatchAccountNewslettersSubscribeOK struct {
	Payload *models_secure.NewslettersSubscribe200Response
}

func (o *PatchAccountNewslettersSubscribeOK) Error() string {
	return fmt.Sprintf("[PATCH /account/newsletters/subscribe][%d] patchAccountNewslettersSubscribeOK  %+v", 200, o.Payload)
}

func (o *PatchAccountNewslettersSubscribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.NewslettersSubscribe200Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAccountNewslettersSubscribeBadRequest creates a PatchAccountNewslettersSubscribeBadRequest with default headers values
func NewPatchAccountNewslettersSubscribeBadRequest() *PatchAccountNewslettersSubscribeBadRequest {
	return &PatchAccountNewslettersSubscribeBadRequest{}
}

/*PatchAccountNewslettersSubscribeBadRequest handles this case with default header values.

Bad request
*/
type PatchAccountNewslettersSubscribeBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PatchAccountNewslettersSubscribeBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /account/newsletters/subscribe][%d] patchAccountNewslettersSubscribeBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAccountNewslettersSubscribeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
