package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountParkingSessionsSummaryParams creates a new GetAccountParkingSessionsSummaryParams object
// with the default values initialized.
func NewGetAccountParkingSessionsSummaryParams() *GetAccountParkingSessionsSummaryParams {
	var (
		centreIdDefault string = string("london")
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(5)
	)
	return &GetAccountParkingSessionsSummaryParams{
		CentreID: centreIdDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountParkingSessionsSummaryParamsWithTimeout creates a new GetAccountParkingSessionsSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountParkingSessionsSummaryParamsWithTimeout(timeout time.Duration) *GetAccountParkingSessionsSummaryParams {
	var (
		centreIdDefault string = string("london")
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(5)
	)
	return &GetAccountParkingSessionsSummaryParams{
		CentreID: centreIdDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: timeout,
	}
}

/*GetAccountParkingSessionsSummaryParams contains all the parameters to send to the API endpoint
for the get account parking sessions summary operation typically these are written to a http.Request
*/
type GetAccountParkingSessionsSummaryParams struct {

	/*Authorization
	  Access token.

	*/
	Authorization string
	/*CentreID
	  Centre identifier. Return parking sessions summary of the given center.

	*/
	CentreID string
	/*LicensePlate
	  Vehicle identifier. Return parking sessions summary with the given license_plate.

	*/
	LicensePlate string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get account parking sessions summary params
func (o *GetAccountParkingSessionsSummaryParams) WithAuthorization(Authorization string) *GetAccountParkingSessionsSummaryParams {
	o.Authorization = Authorization
	return o
}

// WithCentreID adds the centreId to the get account parking sessions summary params
func (o *GetAccountParkingSessionsSummaryParams) WithCentreID(CentreID string) *GetAccountParkingSessionsSummaryParams {
	o.CentreID = CentreID
	return o
}

// WithLicensePlate adds the licensePlate to the get account parking sessions summary params
func (o *GetAccountParkingSessionsSummaryParams) WithLicensePlate(LicensePlate string) *GetAccountParkingSessionsSummaryParams {
	o.LicensePlate = LicensePlate
	return o
}

// WithPage adds the page to the get account parking sessions summary params
func (o *GetAccountParkingSessionsSummaryParams) WithPage(Page *int64) *GetAccountParkingSessionsSummaryParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get account parking sessions summary params
func (o *GetAccountParkingSessionsSummaryParams) WithPerPage(PerPage *int64) *GetAccountParkingSessionsSummaryParams {
	o.PerPage = PerPage
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountParkingSessionsSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param centre_id
	qrCentreID := o.CentreID
	qCentreID := qrCentreID
	if qCentreID != "" {
		if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
			return err
		}
	}

	// query param license_plate
	qrLicensePlate := o.LicensePlate
	qLicensePlate := qrLicensePlate
	if qLicensePlate != "" {
		if err := r.SetQueryParam("license_plate", qLicensePlate); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
