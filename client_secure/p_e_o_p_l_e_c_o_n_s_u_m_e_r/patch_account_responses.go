package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PatchAccountReader is a Reader for the PatchAccount structure.
type PatchAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchAccountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPatchAccountUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAccountNoContent creates a PatchAccountNoContent with default headers values
func NewPatchAccountNoContent() *PatchAccountNoContent {
	return &PatchAccountNoContent{}
}

/*PatchAccountNoContent handles this case with default header values.

Updated with success
*/
type PatchAccountNoContent struct {
}

func (o *PatchAccountNoContent) Error() string {
	return fmt.Sprintf("[PATCH /account][%d] patchAccountNoContent ", 204)
}

func (o *PatchAccountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAccountBadRequest creates a PatchAccountBadRequest with default headers values
func NewPatchAccountBadRequest() *PatchAccountBadRequest {
	return &PatchAccountBadRequest{}
}

/*PatchAccountBadRequest handles this case with default header values.

Bad request
*/
type PatchAccountBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PatchAccountBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /account][%d] patchAccountBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAccountUnauthorized creates a PatchAccountUnauthorized with default headers values
func NewPatchAccountUnauthorized() *PatchAccountUnauthorized {
	return &PatchAccountUnauthorized{}
}

/*PatchAccountUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchAccountUnauthorized struct {
	Payload *models_secure.UnauthorizedResponse
}

func (o *PatchAccountUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /account][%d] patchAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.UnauthorizedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAccountNotFound creates a PatchAccountNotFound with default headers values
func NewPatchAccountNotFound() *PatchAccountNotFound {
	return &PatchAccountNotFound{}
}

/*PatchAccountNotFound handles this case with default header values.

Account with the provided email/country or person_id not found
*/
type PatchAccountNotFound struct {
	Payload *models_secure.Http404Response
}

func (o *PatchAccountNotFound) Error() string {
	return fmt.Sprintf("[PATCH /account][%d] patchAccountNotFound  %+v", 404, o.Payload)
}

func (o *PatchAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAccountUnprocessableEntity creates a PatchAccountUnprocessableEntity with default headers values
func NewPatchAccountUnprocessableEntity() *PatchAccountUnprocessableEntity {
	return &PatchAccountUnprocessableEntity{}
}

/*PatchAccountUnprocessableEntity handles this case with default header values.

Unprocessable entity
*/
type PatchAccountUnprocessableEntity struct {
	Payload *models_secure.Person422Response
}

func (o *PatchAccountUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /account][%d] patchAccountUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchAccountUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
