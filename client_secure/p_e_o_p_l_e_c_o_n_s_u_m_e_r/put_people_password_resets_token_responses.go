package p_e_o_p_l_e_c_o_n_s_u_m_e_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_secure"
)

// PutPeoplePasswordResetsTokenReader is a Reader for the PutPeoplePasswordResetsToken structure.
type PutPeoplePasswordResetsTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PutPeoplePasswordResetsTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutPeoplePasswordResetsTokenNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutPeoplePasswordResetsTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPutPeoplePasswordResetsTokenUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutPeoplePasswordResetsTokenNoContent creates a PutPeoplePasswordResetsTokenNoContent with default headers values
func NewPutPeoplePasswordResetsTokenNoContent() *PutPeoplePasswordResetsTokenNoContent {
	return &PutPeoplePasswordResetsTokenNoContent{}
}

/*PutPeoplePasswordResetsTokenNoContent handles this case with default header values.

Successfully reset account password.
*/
type PutPeoplePasswordResetsTokenNoContent struct {
}

func (o *PutPeoplePasswordResetsTokenNoContent) Error() string {
	return fmt.Sprintf("[PUT /people/password_resets/{token}][%d] putPeoplePasswordResetsTokenNoContent ", 204)
}

func (o *PutPeoplePasswordResetsTokenNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutPeoplePasswordResetsTokenBadRequest creates a PutPeoplePasswordResetsTokenBadRequest with default headers values
func NewPutPeoplePasswordResetsTokenBadRequest() *PutPeoplePasswordResetsTokenBadRequest {
	return &PutPeoplePasswordResetsTokenBadRequest{}
}

/*PutPeoplePasswordResetsTokenBadRequest handles this case with default header values.

Bad request
*/
type PutPeoplePasswordResetsTokenBadRequest struct {
	Payload *models_secure.Person400Response
}

func (o *PutPeoplePasswordResetsTokenBadRequest) Error() string {
	return fmt.Sprintf("[PUT /people/password_resets/{token}][%d] putPeoplePasswordResetsTokenBadRequest  %+v", 400, o.Payload)
}

func (o *PutPeoplePasswordResetsTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.Person400Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPeoplePasswordResetsTokenUnprocessableEntity creates a PutPeoplePasswordResetsTokenUnprocessableEntity with default headers values
func NewPutPeoplePasswordResetsTokenUnprocessableEntity() *PutPeoplePasswordResetsTokenUnprocessableEntity {
	return &PutPeoplePasswordResetsTokenUnprocessableEntity{}
}

/*PutPeoplePasswordResetsTokenUnprocessableEntity handles this case with default header values.

Current or new password is invalid.
*/
type PutPeoplePasswordResetsTokenUnprocessableEntity struct {
	Payload *models_secure.ResetPassword422Response
}

func (o *PutPeoplePasswordResetsTokenUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /people/password_resets/{token}][%d] putPeoplePasswordResetsTokenUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PutPeoplePasswordResetsTokenUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_secure.ResetPassword422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
