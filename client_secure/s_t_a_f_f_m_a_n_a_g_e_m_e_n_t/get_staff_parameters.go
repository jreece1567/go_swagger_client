package s_t_a_f_f_m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStaffParams creates a new GetStaffParams object
// with the default values initialized.
func NewGetStaffParams() *GetStaffParams {
	var ()
	return &GetStaffParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStaffParamsWithTimeout creates a new GetStaffParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStaffParamsWithTimeout(timeout time.Duration) *GetStaffParams {
	var ()
	return &GetStaffParams{

		timeout: timeout,
	}
}

/*GetStaffParams contains all the parameters to send to the API endpoint
for the get staff operation typically these are written to a http.Request
*/
type GetStaffParams struct {

	/*Authorization
	  Staff Access token.

	*/
	Authorization string
	/*Q
	  Search string

	*/
	Q *string
	/*Role
	  Limits the result to staff with a specific role

	*/
	Role *string

	timeout time.Duration
}

// WithAuthorization adds the authorization to the get staff params
func (o *GetStaffParams) WithAuthorization(Authorization string) *GetStaffParams {
	o.Authorization = Authorization
	return o
}

// WithQ adds the q to the get staff params
func (o *GetStaffParams) WithQ(Q *string) *GetStaffParams {
	o.Q = Q
	return o
}

// WithRole adds the role to the get staff params
func (o *GetStaffParams) WithRole(Role *string) *GetStaffParams {
	o.Role = Role
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetStaffParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
