package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingInvoiceBody parking invoice body

swagger:model parkingInvoiceBody
*/
type ParkingInvoiceBody struct {

	/* Centre identifier.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Request the invoice through given date.

	Required: true
	*/
	EndDate *strfmt.Date `json:"end_date"`

	/* Vehicle identifier.

	Required: true
	*/
	LicensePlate *string `json:"license_plate"`

	/* Request the invoice from the given date.

	Required: true
	*/
	StartDate *strfmt.Date `json:"start_date"`
}

// Validate validates this parking invoice body
func (m *ParkingInvoiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLicensePlate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingInvoiceBody) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInvoiceBody) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("end_date", "body", m.EndDate); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInvoiceBody) validateLicensePlate(formats strfmt.Registry) error {

	if err := validate.Required("license_plate", "body", m.LicensePlate); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInvoiceBody) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("start_date", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}
