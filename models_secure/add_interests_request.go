package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*AddInterestsRequest Data to add interest list to account

swagger:model addInterestsRequest
*/
type AddInterestsRequest struct {

	/* Country code of the account.

	Required: true
	Max Length: 2
	Min Length: 2
	*/
	Country *string `json:"country"`

	/* Email of the partial account.

	Required: true
	*/
	Email *string `json:"email"`

	/* Interest identitfiers. A list of unique identitfiers for the interests

	Required: true
	*/
	InterestIds []string `json:"interest_ids"`

	/* Source from which the interests are being updated

	Required: true
	*/
	InterestsUpdatedFrom *string `json:"interests_updated_from"`
}

// Validate validates this add interests request
func (m *AddInterestsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterestIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterestsUpdatedFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addInterestsRequestTypeCountryPropEnum []interface{}

// prop value enum
func (m *AddInterestsRequest) validateCountryEnum(path, location string, value string) error {
	if addInterestsRequestTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			addInterestsRequestTypeCountryPropEnum = append(addInterestsRequestTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, addInterestsRequestTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddInterestsRequest) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	if err := validate.MinLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", *m.Country); err != nil {
		return err
	}

	return nil
}

func (m *AddInterestsRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AddInterestsRequest) validateInterestIds(formats strfmt.Registry) error {

	if err := validate.Required("interest_ids", "body", m.InterestIds); err != nil {
		return err
	}

	for i := 0; i < len(m.InterestIds); i++ {

		if err := validate.Pattern("interest_ids"+"."+strconv.Itoa(i), "body", string(m.InterestIds[i]), `\A[1-9][0-9]*\Z`); err != nil {
			return err
		}

	}

	return nil
}

var addInterestsRequestTypeInterestsUpdatedFromPropEnum []interface{}

// prop value enum
func (m *AddInterestsRequest) validateInterestsUpdatedFromEnum(path, location string, value string) error {
	if addInterestsRequestTypeInterestsUpdatedFromPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["android","ios","mobile_web","web","concierge"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			addInterestsRequestTypeInterestsUpdatedFromPropEnum = append(addInterestsRequestTypeInterestsUpdatedFromPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, addInterestsRequestTypeInterestsUpdatedFromPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddInterestsRequest) validateInterestsUpdatedFrom(formats strfmt.Registry) error {

	if err := validate.Required("interests_updated_from", "body", m.InterestsUpdatedFrom); err != nil {
		return err
	}

	// value enum
	if err := m.validateInterestsUpdatedFromEnum("interests_updated_from", "body", *m.InterestsUpdatedFrom); err != nil {
		return err
	}

	return nil
}
