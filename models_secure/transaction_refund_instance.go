package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*TransactionRefundInstance Transaction refund.

swagger:model transactionRefundInstance
*/
type TransactionRefundInstance struct {

	/* Amount to be refunded, in cents. If this value is not provided, the entire transaction amount will be refunded.

	Required: true
	*/
	Amount *int64 `json:"amount"`

	/* Date-time the transaction was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Currency of the amount being charged. ISO-4217 format.

	Required: true
	*/
	CurrencyCode *string `json:"currency_code"`

	/* Description of product or service sold.

	Required: true
	*/
	Description *string `json:"description"`

	/* Customer email address.

	Required: true
	*/
	Email *string `json:"email"`

	/* gateway specific fields

	Required: true
	*/
	GatewaySpecificFields *GatewaySpecificFieldsForRefund `json:"gateway_specific_fields"`

	/* A unique string generated by Spreedly to identify a gateway. Similar to an id, it is used to reference and operate against a [gateway](/basics/gateway/#store-gateway-token).

	Required: true
	*/
	GatewayToken *string `json:"gateway_token"`

	/* The gateway's corresponding transaction id.

	Required: true
	*/
	GatewayTransactionID *string `json:"gateway_transaction_id"`

	/* Customer IPv4 address.

	Required: true
	*/
	IP *string `json:"ip"`

	/* Location of merchant.

	Required: true
	*/
	MerchantLocationDescriptor *string `json:"merchant_location_descriptor"`

	/* Name of merchant.

	Required: true
	*/
	MerchantNameDescriptor *string `json:"merchant_name_descriptor"`

	/* A brief description of the results of the transaction.

	Required: true
	*/
	Message *string `json:"message"`

	/* Value is true if transaction was made on test gateway

	Required: true
	*/
	OnTestGateway *bool `json:"on_test_gateway"`

	/* A merchant specified tracking number.

	Required: true
	*/
	OrderID *string `json:"order_id"`

	/* response

	Required: true
	*/
	Response *PaymentMethodVerificationResponseInstance `json:"response"`

	/* The status of the transaction.

	Required: true
	*/
	Status *string `json:"status"`

	/* Value is true if transaction was successful.

	Required: true
	*/
	Succeeded *bool `json:"succeeded"`

	/* Transaction identifier. A unique string generated by Spreedly to identify a transaction.

	Required: true
	*/
	TransactionID *string `json:"transaction_id"`

	/* The type of transaction, e.g., Authorization, Capture, Credit

	Required: true
	*/
	TransactionType *string `json:"transaction_type"`
}

// Validate validates this transaction refund instance
func (m *TransactionRefundInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewaySpecificFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMerchantLocationDescriptor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMerchantNameDescriptor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOnTestGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSucceeded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionRefundInstance) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("currency_code", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateGatewaySpecificFields(formats strfmt.Registry) error {

	if err := validate.Required("gateway_specific_fields", "body", m.GatewaySpecificFields); err != nil {
		return err
	}

	if m.GatewaySpecificFields != nil {

		if err := m.GatewaySpecificFields.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TransactionRefundInstance) validateGatewayToken(formats strfmt.Registry) error {

	if err := validate.Required("gateway_token", "body", m.GatewayToken); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateGatewayTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("gateway_transaction_id", "body", m.GatewayTransactionID); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateMerchantLocationDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("merchant_location_descriptor", "body", m.MerchantLocationDescriptor); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateMerchantNameDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("merchant_name_descriptor", "body", m.MerchantNameDescriptor); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateOnTestGateway(formats strfmt.Registry) error {

	if err := validate.Required("on_test_gateway", "body", m.OnTestGateway); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	if m.Response != nil {

		if err := m.Response.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var transactionRefundInstanceTypeStatusPropEnum []interface{}

// prop value enum
func (m *TransactionRefundInstance) validateStatusEnum(path, location string, value string) error {
	if transactionRefundInstanceTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["succeeded","failed","gateway_processing_failed","gateway_processing_result_unknown"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			transactionRefundInstanceTypeStatusPropEnum = append(transactionRefundInstanceTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, transactionRefundInstanceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionRefundInstance) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateSucceeded(formats strfmt.Registry) error {

	if err := validate.Required("succeeded", "body", m.Succeeded); err != nil {
		return err
	}

	return nil
}

func (m *TransactionRefundInstance) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

var transactionRefundInstanceTypeTransactionTypePropEnum []interface{}

// prop value enum
func (m *TransactionRefundInstance) validateTransactionTypeEnum(path, location string, value string) error {
	if transactionRefundInstanceTypeTransactionTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Authorization","Capture","Credit","Verification","Void","Purchase"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			transactionRefundInstanceTypeTransactionTypePropEnum = append(transactionRefundInstanceTypeTransactionTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, transactionRefundInstanceTypeTransactionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionRefundInstance) validateTransactionType(formats strfmt.Registry) error {

	if err := validate.Required("transaction_type", "body", m.TransactionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTransactionTypeEnum("transaction_type", "body", *m.TransactionType); err != nil {
		return err
	}

	return nil
}
