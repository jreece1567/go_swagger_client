package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PaymentMethodVerificationInstance Payment method verification details.

swagger:model paymentMethodVerificationInstance
*/
type PaymentMethodVerificationInstance struct {

	/* Date-time the payment verification was performed.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* The gateway's corresponding transaction id.

	Required: true
	*/
	GatewayTransactionID *string `json:"gateway_transaction_id"`

	/* Customer IPv4 address.

	Required: true
	*/
	IP *string `json:"ip"`

	/* Name of merchant.

	Required: true
	*/
	MerchantNameDescriptor *string `json:"merchant_name_descriptor"`

	/* A brief description of the results of the verification.

	Required: true
	*/
	Message *string `json:"message"`

	/* payment method

	Required: true
	*/
	PaymentMethod *PaymentMethodInstance `json:"payment_method"`

	/* response

	Required: true
	*/
	Response *PaymentMethodVerificationResponseInstance `json:"response"`

	/* The status of the verification.

	Required: true
	*/
	Status *string `json:"status"`

	/* Value is true if verification was successful.

	Required: true
	*/
	Succeeded *bool `json:"succeeded"`

	/* A unique string generated by the payment gateway to identify a transaction.

	Required: true
	*/
	TransactionID *string `json:"transaction_id"`
}

// Validate validates this payment method verification instance
func (m *PaymentMethodVerificationInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMerchantNameDescriptor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSucceeded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethodVerificationInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateGatewayTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("gateway_transaction_id", "body", m.GatewayTransactionID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateMerchantNameDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("merchant_name_descriptor", "body", m.MerchantNameDescriptor); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validatePaymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("payment_method", "body", m.PaymentMethod); err != nil {
		return err
	}

	if m.PaymentMethod != nil {

		if err := m.PaymentMethod.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	if m.Response != nil {

		if err := m.Response.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var paymentMethodVerificationInstanceTypeStatusPropEnum []interface{}

// prop value enum
func (m *PaymentMethodVerificationInstance) validateStatusEnum(path, location string, value string) error {
	if paymentMethodVerificationInstanceTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["succeeded","failed","gateway_processing_failed","gateway_processing_result_unknown"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			paymentMethodVerificationInstanceTypeStatusPropEnum = append(paymentMethodVerificationInstanceTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, paymentMethodVerificationInstanceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentMethodVerificationInstance) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateSucceeded(formats strfmt.Registry) error {

	if err := validate.Required("succeeded", "body", m.Succeeded); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationInstance) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}
