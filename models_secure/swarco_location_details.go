package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*SwarcoLocationDetails Data to create a swarco car park location.

swagger:model swarcoLocationDetails
*/
type SwarcoLocationDetails struct {

	/* Total number of parking spaces for the location.

	Required: true
	*/
	CAPACITY *int64 `json:"CAPACITY"`

	/* Total number of available parking spaces for the location.

	Required: true
	*/
	EMPTYPLACES *int64 `json:"EMPTY_PLACES"`

	/* Location identifier. Identifier to uniquely identify this particular location in the garage.

	Required: true
	*/
	LOCATION *string `json:"LOCATION"`

	/* Condition of the location

	Required: true
	*/
	STATUS *string `json:"STATUS"`
}

// Validate validates this swarco location details
func (m *SwarcoLocationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCAPACITY(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEMPTYPLACES(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLOCATION(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSTATUS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwarcoLocationDetails) validateCAPACITY(formats strfmt.Registry) error {

	if err := validate.Required("CAPACITY", "body", m.CAPACITY); err != nil {
		return err
	}

	return nil
}

func (m *SwarcoLocationDetails) validateEMPTYPLACES(formats strfmt.Registry) error {

	if err := validate.Required("EMPTY_PLACES", "body", m.EMPTYPLACES); err != nil {
		return err
	}

	return nil
}

func (m *SwarcoLocationDetails) validateLOCATION(formats strfmt.Registry) error {

	if err := validate.Required("LOCATION", "body", m.LOCATION); err != nil {
		return err
	}

	return nil
}

var swarcoLocationDetailsTypeSTATUSPropEnum []interface{}

// prop value enum
func (m *SwarcoLocationDetails) validateSTATUSEnum(path, location string, value string) error {
	if swarcoLocationDetailsTypeSTATUSPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["spaces","faulty","full","closed"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			swarcoLocationDetailsTypeSTATUSPropEnum = append(swarcoLocationDetailsTypeSTATUSPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, swarcoLocationDetailsTypeSTATUSPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SwarcoLocationDetails) validateSTATUS(formats strfmt.Registry) error {

	if err := validate.Required("STATUS", "body", m.STATUS); err != nil {
		return err
	}

	// value enum
	if err := m.validateSTATUSEnum("STATUS", "body", *m.STATUS); err != nil {
		return err
	}

	return nil
}
