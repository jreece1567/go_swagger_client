package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*GetEdnaInstance get edna instance

swagger:model getEdnaInstance
*/
type GetEdnaInstance struct {

	/* Value is true if the user has agreed to the account terms.
	 */
	AccountTerms bool `json:"account_terms,omitempty"`

	/* Address of the user.
	 */
	Address string `json:"address,omitempty"`

	/* Apps that are associated with the user.
	 */
	Apps []*EdnaAppsInstance `json:"apps,omitempty"`

	/* Birth day of the user.
	 */
	BirthDay int64 `json:"birth_day,omitempty"`

	/* Birth month of the user.
	 */
	BirthMonth int64 `json:"birth_month,omitempty"`

	/* Birth year of the user.
	 */
	BirthYear int64 `json:"birth_year,omitempty"`

	/* City of the user.
	 */
	City string `json:"city,omitempty"`

	/* User's corporate owner.
	 */
	CorporateOwner string `json:"corporate_owner,omitempty"`

	/* DateTime that the shopper was created
	 */
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	/* Number of seconds since epoch when user was created.
	 */
	CreatedAtTimestamp int64 `json:"created_at_timestamp,omitempty"`

	/* Source from which the user was created
	 */
	CreationSource string `json:"creation_source,omitempty"`

	/* Datetime in iso8601 when user was created.
	 */
	CreditCards []*CreditCardInstance `json:"credit_cards,omitempty"`

	/* Datetime in iso8601 when user was deleted.
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* List of user's devices
	 */
	Devices []*AccountsDeviceUpsertBody `json:"devices,omitempty"`

	/* Email address for the shopper
	 */
	Email string `json:"email,omitempty"`

	/* Value is true if user is subscribed to marketing
	 */
	EmailMarketingOptIn bool `json:"email_marketing_opt_in,omitempty"`

	/* First name for the shopper
	 */
	FirstName string `json:"first_name,omitempty"`

	/* User gender
	 */
	Gender string `json:"gender,omitempty"`

	/* List of user's interests
	 */
	Interests []*EdnaInterestsInstance `json:"interests,omitempty"`

	/* Value is true if user is active.
	 */
	IsActive bool `json:"is_active,omitempty"`

	/* Value is true if user is verified.
	 */
	IsVerified bool `json:"is_verified,omitempty"`

	/* List of birth dates of kids of the user.
	 */
	Kids []*KidsInstance `json:"kids,omitempty"`

	/* Datetime when the user last logged in
	 */
	LastLoginAt strfmt.DateTime `json:"last_login_at,omitempty"`

	/* Number of seconds since epoch when user last logged in.
	 */
	LastLoginAtTimestamp int64 `json:"last_login_at_timestamp,omitempty"`

	/* Location the user last logged in from.
	 */
	LastLoginLocation []*EdnaLastLoginLocationInstance `json:"last_login_location,omitempty"`

	/* Last name for the shopper
	 */
	LastName string `json:"last_name,omitempty"`

	/* Datetime in iso8601 when user was locked.
	 */
	LockedAt strfmt.DateTime `json:"locked_at,omitempty"`

	/* Number of incorrect log in attempts the user has made.
	 */
	LogInAttempts int64 `json:"log_in_attempts,omitempty"`

	/* Emails that the user can use to log in.
	 */
	LoginIds *EdnaLoginIdsInstance `json:"login_ids,omitempty"`

	/* User's messaging prefereces.
	 */
	MessagingPreferences *MessagingPreferenceInstance `json:"messaging_preferences,omitempty"`

	/* List of centre identifiers associated with the newsletter subscriptions.
	 */
	NewsletterCentreIds []string `json:"newsletter_centre_ids,omitempty"`

	/* List of countries to where each of the newsletter subscriptions belongs
	 */
	NewsletterCountries []string `json:"newsletter_countries,omitempty"`

	/* List of newsletter identifiers in response that the user is subscribed to
	 */
	NewsletterSubscriptions []string `json:"newsletter_subscriptions,omitempty"`

	/* Datetime in iso8601 when user last logged in.
	 */
	OldestDataUpdatedAt strfmt.DateTime `json:"oldest_data_updated_at,omitempty"`

	/* Number of seconds since epoch when user last logged in.
	 */
	OldestDataUpdatedAtTimestamp int64 `json:"oldest_data_updated_at_timestamp,omitempty"`

	/* Parking group the user belongs to.
	 */
	ParkingRuleGroupGUID string `json:"parking_rule_group_guid,omitempty"`

	/* Datetime in iso8601 when user signed up for parking.
	 */
	ParkingSignupAt strfmt.DateTime `json:"parking_signup_at,omitempty"`

	/* Value is true if the account is partial
	 */
	PartialAccount bool `json:"partial_account,omitempty"`

	/* Identifier of the account
	 */
	PersonID string `json:"person_id,omitempty"`

	/* User's mobile phone number following the E.164 standard
	 */
	PhoneNumber string `json:"phone_number,omitempty"`

	/* Identifier of the user primary country

	Max Length: 2
	Min Length: 2
	*/
	PrimaryCentreCountry string `json:"primary_centre_country,omitempty"`

	/* Identifier of the user's primary center
	 */
	PrimaryCentreID string `json:"primary_centre_id,omitempty"`

	/* Value is true if user is subscribed to sms marketing.
	 */
	SmsMarketingOptIn bool `json:"sms_marketing_opt_in,omitempty"`

	/* State of the user.
	 */
	State string `json:"state,omitempty"`

	/* User's timezone.
	 */
	Timezone string `json:"timezone,omitempty"`

	/* DateTime that the shopper last updated
	 */
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	/* Number of seconds since epoch when user was updated.
	 */
	UpdatedAtTimestamp int64 `json:"updated_at_timestamp,omitempty"`

	/* Datetime in iso8601 when the user was upgraded.
	 */
	UpgradedAt strfmt.DateTime `json:"upgraded_at,omitempty"`

	/* vehicles
	 */
	Vehicles []*AccountVehicleInstance `json:"vehicles,omitempty"`

	/* Datetime in iso8601 when user was verified.
	 */
	VerifiedAt strfmt.DateTime `json:"verified_at,omitempty"`

	/* Number of seconds since epoch when user was verified.
	 */
	VerifiedAtTimestamp int64 `json:"verified_at_timestamp,omitempty"`

	/* User identifier on wifi vendor database
	 */
	WifiID string `json:"wifi_id,omitempty"`

	/* Value is true if the user has agreed to the wifi terms.
	 */
	WifiTerms bool `json:"wifi_terms,omitempty"`

	/* Zip code of the user.

	Pattern: \A[A-Za-z0-9\s-]+\z
	*/
	Zip string `json:"zip,omitempty"`
}

// Validate validates this get edna instance
func (m *GetEdnaInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditCards(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterests(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastLoginLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLoginIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessagingPreferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterCentreIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterCountries(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimaryCentreCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVehicles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZip(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEdnaInstance) validateApps(formats strfmt.Registry) error {

	if swag.IsZero(m.Apps) { // not required
		return nil
	}

	for i := 0; i < len(m.Apps); i++ {

		if swag.IsZero(m.Apps[i]) { // not required
			continue
		}

		if m.Apps[i] != nil {

			if err := m.Apps[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateCreditCards(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditCards) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditCards); i++ {

		if swag.IsZero(m.CreditCards[i]) { // not required
			continue
		}

		if m.CreditCards[i] != nil {

			if err := m.CreditCards[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {

		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {

			if err := m.Devices[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateInterests(formats strfmt.Registry) error {

	if swag.IsZero(m.Interests) { // not required
		return nil
	}

	for i := 0; i < len(m.Interests); i++ {

		if swag.IsZero(m.Interests[i]) { // not required
			continue
		}

		if m.Interests[i] != nil {

			if err := m.Interests[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateKids(formats strfmt.Registry) error {

	if swag.IsZero(m.Kids) { // not required
		return nil
	}

	for i := 0; i < len(m.Kids); i++ {

		if swag.IsZero(m.Kids[i]) { // not required
			continue
		}

		if m.Kids[i] != nil {

			if err := m.Kids[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateLastLoginLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginLocation) { // not required
		return nil
	}

	for i := 0; i < len(m.LastLoginLocation); i++ {

		if swag.IsZero(m.LastLoginLocation[i]) { // not required
			continue
		}

		if m.LastLoginLocation[i] != nil {

			if err := m.LastLoginLocation[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateLoginIds(formats strfmt.Registry) error {

	if swag.IsZero(m.LoginIds) { // not required
		return nil
	}

	if m.LoginIds != nil {

		if err := m.LoginIds.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GetEdnaInstance) validateMessagingPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.MessagingPreferences) { // not required
		return nil
	}

	if m.MessagingPreferences != nil {

		if err := m.MessagingPreferences.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GetEdnaInstance) validateNewsletterCentreIds(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterCentreIds) { // not required
		return nil
	}

	return nil
}

func (m *GetEdnaInstance) validateNewsletterCountries(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterCountries) { // not required
		return nil
	}

	return nil
}

func (m *GetEdnaInstance) validateNewsletterSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterSubscriptions) { // not required
		return nil
	}

	return nil
}

var getEdnaInstanceTypePrimaryCentreCountryPropEnum []interface{}

// prop value enum
func (m *GetEdnaInstance) validatePrimaryCentreCountryEnum(path, location string, value string) error {
	if getEdnaInstanceTypePrimaryCentreCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			getEdnaInstanceTypePrimaryCentreCountryPropEnum = append(getEdnaInstanceTypePrimaryCentreCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, getEdnaInstanceTypePrimaryCentreCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetEdnaInstance) validatePrimaryCentreCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryCentreCountry) { // not required
		return nil
	}

	if err := validate.MinLength("primary_centre_country", "body", string(m.PrimaryCentreCountry), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("primary_centre_country", "body", string(m.PrimaryCentreCountry), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validatePrimaryCentreCountryEnum("primary_centre_country", "body", m.PrimaryCentreCountry); err != nil {
		return err
	}

	return nil
}

func (m *GetEdnaInstance) validateVehicles(formats strfmt.Registry) error {

	if swag.IsZero(m.Vehicles) { // not required
		return nil
	}

	for i := 0; i < len(m.Vehicles); i++ {

		if swag.IsZero(m.Vehicles[i]) { // not required
			continue
		}

		if m.Vehicles[i] != nil {

			if err := m.Vehicles[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetEdnaInstance) validateZip(formats strfmt.Registry) error {

	if swag.IsZero(m.Zip) { // not required
		return nil
	}

	if err := validate.Pattern("zip", "body", string(m.Zip), `\A[A-Za-z0-9\s-]+\z`); err != nil {
		return err
	}

	return nil
}
