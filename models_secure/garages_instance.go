package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*GaragesInstance Parking Garage

swagger:model garagesInstance
*/
type GaragesInstance struct {

	/* Total number of available parking spaces for the centre.

	Required: true
	*/
	Available *int64 `json:"available"`

	/* Total number of parking spaces for the centre.

	Required: true
	*/
	Capacity *int64 `json:"capacity"`

	/* Centre identifier. Identifier to retrieve the centre this garage is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Date-time the parking activity took place.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Garage identifier. Identifier to uniquely identify this parking garage.

	Required: true
	*/
	GarageID *int64 `json:"garage_id"`

	/* Locations that the garage has.

	Required: true
	*/
	Locations []*GarageLocation `json:"locations"`

	/* Name of the garage.

	Required: true
	*/
	Name *string `json:"name"`

	/* Date-time the parking activity was updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this garages instance
func (m *GaragesInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGarageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GaragesInstance) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateGarageID(formats strfmt.Registry) error {

	if err := validate.Required("garage_id", "body", m.GarageID); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateLocations(formats strfmt.Registry) error {

	if err := validate.Required("locations", "body", m.Locations); err != nil {
		return err
	}

	for i := 0; i < len(m.Locations); i++ {

		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {

			if err := m.Locations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GaragesInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GaragesInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
