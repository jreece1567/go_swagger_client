package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingActivityInvoiceInstance Parking Activity Invoice

swagger:model parkingActivityInvoiceInstance
*/
type ParkingActivityInvoiceInstance struct {

	/* The details for the parking operator of the centre associated with this invoice.

	Required: true
	*/
	ParkingOperator *ParkingOperatorInstance `json:"parking_operator"`

	/* Person identifier. UUID of the person account related to this parking invoice.

	Required: true
	*/
	PersonID *string `json:"person_id"`

	/* The list of parking activity sessions associated with this invoice.

	Required: true
	*/
	Sessions []*ParkingActivitySessionInstance `json:"sessions"`

	/* Sum of the transaction final amount in the sessions associated with this invoice.

	Required: true
	*/
	TransactionFinalAmountSum *int64 `json:"transaction_final_amount_sum"`

	/* Sum of the transaction pretax amount in the sessions associated with this invoice.

	Required: true
	*/
	TransactionPretaxAmountSum *int64 `json:"transaction_pretax_amount_sum"`

	/* Sum of the transaction tax amount in the sessions associated with this invoice.

	Required: true
	*/
	TransactionTaxAmountSum *int64 `json:"transaction_tax_amount_sum"`
}

// Validate validates this parking activity invoice instance
func (m *ParkingActivityInvoiceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParkingOperator(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSessions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionFinalAmountSum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionPretaxAmountSum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionTaxAmountSum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingActivityInvoiceInstance) validateParkingOperator(formats strfmt.Registry) error {

	if err := validate.Required("parking_operator", "body", m.ParkingOperator); err != nil {
		return err
	}

	if m.ParkingOperator != nil {

		if err := m.ParkingOperator.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ParkingActivityInvoiceInstance) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInvoiceInstance) validateSessions(formats strfmt.Registry) error {

	if err := validate.Required("sessions", "body", m.Sessions); err != nil {
		return err
	}

	for i := 0; i < len(m.Sessions); i++ {

		if swag.IsZero(m.Sessions[i]) { // not required
			continue
		}

		if m.Sessions[i] != nil {

			if err := m.Sessions[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ParkingActivityInvoiceInstance) validateTransactionFinalAmountSum(formats strfmt.Registry) error {

	if err := validate.Required("transaction_final_amount_sum", "body", m.TransactionFinalAmountSum); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInvoiceInstance) validateTransactionPretaxAmountSum(formats strfmt.Registry) error {

	if err := validate.Required("transaction_pretax_amount_sum", "body", m.TransactionPretaxAmountSum); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInvoiceInstance) validateTransactionTaxAmountSum(formats strfmt.Registry) error {

	if err := validate.Required("transaction_tax_amount_sum", "body", m.TransactionTaxAmountSum); err != nil {
		return err
	}

	return nil
}
