package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*UpdateAccount update account

swagger:model updateAccount
*/
type UpdateAccount struct {

	/* email
	 */
	Email string `json:"email,omitempty"`

	/* Value is true if user is subscribed to marketing
	 */
	EmailMarketingOptIn bool `json:"email_marketing_opt_in,omitempty"`

	/* first name

	Max Length: 50
	*/
	FirstName string `json:"first_name,omitempty"`

	/* User gender
	 */
	Gender string `json:"gender,omitempty"`

	/* last name

	Max Length: 50
	*/
	LastName string `json:"last_name,omitempty"`

	/* messaging preferences
	 */
	MessagingPreferences *MessagingPreferenceInstance `json:"messaging_preferences,omitempty"`

	/* List of newsletter identifiers that the user is subscribed to
	 */
	NewsletterSubscriptions []string `json:"newsletter_subscriptions,omitempty"`

	/* User's mobile phone number following the E.164 standard
	 */
	PhoneNumber string `json:"phone_number,omitempty"`

	/* Identifier of the user primary center
	 */
	PrimaryCentreID string `json:"primary_centre_id,omitempty"`

	/* Value is true if user is subscribed to sms marketing
	 */
	SmsMarketingOptIn bool `json:"sms_marketing_opt_in,omitempty"`

	/* User timezone
	 */
	Timezone string `json:"timezone,omitempty"`

	/* Custom data related to the user provided by wifi vendor
	 */
	WifiCustomData string `json:"wifi_custom_data,omitempty"`

	/* User identifier on wifi vendor database
	 */
	WifiID string `json:"wifi_id,omitempty"`
}

// Validate validates this update account
func (m *UpdateAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessagingPreferences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccount) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("first_name", "body", string(m.FirstName), 50); err != nil {
		return err
	}

	return nil
}

var updateAccountTypeGenderPropEnum []interface{}

// prop value enum
func (m *UpdateAccount) validateGenderEnum(path, location string, value string) error {
	if updateAccountTypeGenderPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["female","male"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			updateAccountTypeGenderPropEnum = append(updateAccountTypeGenderPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, updateAccountTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateAccount) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccount) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("last_name", "body", string(m.LastName), 50); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAccount) validateMessagingPreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.MessagingPreferences) { // not required
		return nil
	}

	if m.MessagingPreferences != nil {

		if err := m.MessagingPreferences.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *UpdateAccount) validateNewsletterSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterSubscriptions) { // not required
		return nil
	}

	return nil
}
