package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*UpgradeAccountBody Data to upgrade account

swagger:model upgradeAccountBody
*/
type UpgradeAccountBody struct {

	/* Country code of the account to be upgraded.

	Max Length: 2
	Min Length: 2
	*/
	Country string `json:"country,omitempty"`

	/* Email of the partial account to be upgraded.
	 */
	Email string `json:"email,omitempty"`

	/* First name of the user.

	Required: true
	Max Length: 50
	*/
	FirstName *string `json:"first_name"`

	/* Last name of the user.

	Max Length: 50
	*/
	LastName string `json:"last_name,omitempty"`

	/* New password for the account to be upgraded.

	Required: true
	Max Length: 30
	Min Length: 8
	*/
	Password *string `json:"password"`

	/* Person identifier. Identifier of the account to be upgraded.
	 */
	PersonID string `json:"person_id,omitempty"`
}

// Validate validates this upgrade account body
func (m *UpgradeAccountBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeAccountBodyTypeCountryPropEnum []interface{}

// prop value enum
func (m *UpgradeAccountBody) validateCountryEnum(path, location string, value string) error {
	if upgradeAccountBodyTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			upgradeAccountBodyTypeCountryPropEnum = append(upgradeAccountBodyTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, upgradeAccountBodyTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeAccountBody) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MinLength("country", "body", string(m.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", string(m.Country), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeAccountBody) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MaxLength("first_name", "body", string(*m.FirstName), 50); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeAccountBody) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("last_name", "body", string(m.LastName), 50); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeAccountBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 30); err != nil {
		return err
	}

	return nil
}
