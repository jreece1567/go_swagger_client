package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NewslettersManageBody Data to subscribe account to newsletters

swagger:model newslettersManageBody
*/
type NewslettersManageBody struct {

	/* Country code of the account (required if person_id is not present).

	Max Length: 2
	Min Length: 2
	*/
	Country string `json:"country,omitempty"`

	/* Email of the partial account (required if person_id is not present).
	 */
	Email string `json:"email,omitempty"`

	/* True if account is opted-in to marketing.
	 */
	EmailMarketingOptIn string `json:"email_marketing_opt_in,omitempty"`

	/* Newsletter access token. Token to authorize access to newsletter information.
	 */
	NewsletterAccessToken string `json:"newsletter_access_token,omitempty"`

	/* Replace the current newsletter subscriptions for the account with the list of newsletter identifiers.

	Required: true
	*/
	NewsletterSubscriptions []string `json:"newsletter_subscriptions"`

	/* Person identifier of the account
	 */
	PersonID string `json:"person_id,omitempty"`
}

// Validate validates this newsletters manage body
func (m *NewslettersManageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var newslettersManageBodyTypeCountryPropEnum []interface{}

// prop value enum
func (m *NewslettersManageBody) validateCountryEnum(path, location string, value string) error {
	if newslettersManageBodyTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			newslettersManageBodyTypeCountryPropEnum = append(newslettersManageBodyTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, newslettersManageBodyTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewslettersManageBody) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MinLength("country", "body", string(m.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", string(m.Country), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *NewslettersManageBody) validateNewsletterSubscriptions(formats strfmt.Registry) error {

	if err := validate.Required("newsletter_subscriptions", "body", m.NewsletterSubscriptions); err != nil {
		return err
	}

	return nil
}
