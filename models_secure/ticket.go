package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Ticket ticket

swagger:model ticket
*/
type Ticket struct {

	/* browser
	 */
	Browser string `json:"browser,omitempty"`

	/* Centre identifierier

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* description of ticket

	Required: true
	*/
	Description *string `json:"description"`

	/* device platform
	 */
	Platform string `json:"platform,omitempty"`

	/* Product related to the ticket

	Required: true
	*/
	Product *string `json:"product"`
}

// Validate validates this ticket
func (m *Ticket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ticket) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *Ticket) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Ticket) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	return nil
}
