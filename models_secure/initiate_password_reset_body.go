package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*InitiatePasswordResetBody Password reset parameters

swagger:model initiatePasswordResetBody
*/
type InitiatePasswordResetBody struct {

	/* Country code of the account.

	Required: true
	Max Length: 2
	Min Length: 2
	*/
	Country *string `json:"country"`

	/* Email address of the account

	Required: true
	*/
	Email *string `json:"email"`
}

// Validate validates this initiate password reset body
func (m *InitiatePasswordResetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var initiatePasswordResetBodyTypeCountryPropEnum []interface{}

// prop value enum
func (m *InitiatePasswordResetBody) validateCountryEnum(path, location string, value string) error {
	if initiatePasswordResetBodyTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			initiatePasswordResetBodyTypeCountryPropEnum = append(initiatePasswordResetBodyTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, initiatePasswordResetBodyTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InitiatePasswordResetBody) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	if err := validate.MinLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", *m.Country); err != nil {
		return err
	}

	return nil
}

func (m *InitiatePasswordResetBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}
