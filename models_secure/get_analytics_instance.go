package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*GetAnalyticsInstance get analytics instance

swagger:model getAnalyticsInstance
*/
type GetAnalyticsInstance struct {

	/* Active credit cards of the user.
	 */
	ActiveCreditCards []string `json:"active_credit_cards,omitempty"`

	/* Number of active vehicles of the user.
	 */
	ActiveVehiclesCount int64 `json:"active_vehicles_count,omitempty"`

	/* Address of the user.
	 */
	Address string `json:"address,omitempty"`

	/* Birth day of the user.
	 */
	BirthDay int64 `json:"birth_day,omitempty"`

	/* Birth month of the user.
	 */
	BirthMonth int64 `json:"birth_month,omitempty"`

	/* Birth year of the user.
	 */
	BirthYear int64 `json:"birth_year,omitempty"`

	/* City of the user.
	 */
	City string `json:"city,omitempty"`

	/* DateTime that the shopper was created
	 */
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	/* Source from which the user was created
	 */
	CreationSource string `json:"creation_source,omitempty"`

	/* Email address for the shopper
	 */
	Email string `json:"email,omitempty"`

	/* Value is true if user is subscribed to marketing
	 */
	EmailMarketingOptIn bool `json:"email_marketing_opt_in,omitempty"`

	/* First name for the shopper
	 */
	FirstName string `json:"first_name,omitempty"`

	/* User gender
	 */
	Gender string `json:"gender,omitempty"`

	/* List of birth dates of kids of the user.
	 */
	Kids []string `json:"kids,omitempty"`

	/* Datetime when the user last logged in
	 */
	LastLoginAt strfmt.DateTime `json:"last_login_at,omitempty"`

	/* Last name for the shopper
	 */
	LastName string `json:"last_name,omitempty"`

	/* List of countries to where each of the newsletter subscriptions belongs
	 */
	NewsletterCountries []string `json:"newsletter_countries,omitempty"`

	/* List of newsletter identifiers in response that the user is subscribed to
	 */
	NewsletterSubscriptions []string `json:"newsletter_subscriptions,omitempty"`

	/* Parking identifier
	 */
	ParkingID string `json:"parking_id,omitempty"`

	/* Value is true if the account is partial
	 */
	PartialAccount bool `json:"partial_account,omitempty"`

	/* Identifier of the account
	 */
	PersonID string `json:"person_id,omitempty"`

	/* User's mobile phone number following the E.164 standard
	 */
	PhoneNumber string `json:"phone_number,omitempty"`

	/* Identifier of the user primary country

	Max Length: 2
	Min Length: 2
	*/
	PrimaryCentreCountry string `json:"primary_centre_country,omitempty"`

	/* Identifier of the user's primary center
	 */
	PrimaryCentreID string `json:"primary_centre_id,omitempty"`

	/* Value is true if user is subscribed to sms marketing.
	 */
	SmsMarketingOptIn bool `json:"sms_marketing_opt_in,omitempty"`

	/* State of the user.
	 */
	State string `json:"state,omitempty"`

	/* DateTime that the shopper last updated
	 */
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	/* Custom data related to the user provided by wifi vendor
	 */
	WifiCustomData string `json:"wifi_custom_data,omitempty"`

	/* User identifier on wifi vendor database
	 */
	WifiID string `json:"wifi_id,omitempty"`

	/* Zip code of the user.

	Pattern: \A[A-Za-z0-9\s-]+\z
	*/
	Zip string `json:"zip,omitempty"`
}

// Validate validates this get analytics instance
func (m *GetAnalyticsInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveCreditCards(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterCountries(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimaryCentreCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZip(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAnalyticsInstance) validateActiveCreditCards(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveCreditCards) { // not required
		return nil
	}

	return nil
}

func (m *GetAnalyticsInstance) validateKids(formats strfmt.Registry) error {

	if swag.IsZero(m.Kids) { // not required
		return nil
	}

	return nil
}

func (m *GetAnalyticsInstance) validateNewsletterCountries(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterCountries) { // not required
		return nil
	}

	return nil
}

func (m *GetAnalyticsInstance) validateNewsletterSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterSubscriptions) { // not required
		return nil
	}

	return nil
}

var getAnalyticsInstanceTypePrimaryCentreCountryPropEnum []interface{}

// prop value enum
func (m *GetAnalyticsInstance) validatePrimaryCentreCountryEnum(path, location string, value string) error {
	if getAnalyticsInstanceTypePrimaryCentreCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			getAnalyticsInstanceTypePrimaryCentreCountryPropEnum = append(getAnalyticsInstanceTypePrimaryCentreCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, getAnalyticsInstanceTypePrimaryCentreCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetAnalyticsInstance) validatePrimaryCentreCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryCentreCountry) { // not required
		return nil
	}

	if err := validate.MinLength("primary_centre_country", "body", string(m.PrimaryCentreCountry), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("primary_centre_country", "body", string(m.PrimaryCentreCountry), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validatePrimaryCentreCountryEnum("primary_centre_country", "body", m.PrimaryCentreCountry); err != nil {
		return err
	}

	return nil
}

func (m *GetAnalyticsInstance) validateZip(formats strfmt.Registry) error {

	if swag.IsZero(m.Zip) { // not required
		return nil
	}

	if err := validate.Pattern("zip", "body", string(m.Zip), `\A[A-Za-z0-9\s-]+\z`); err != nil {
		return err
	}

	return nil
}
