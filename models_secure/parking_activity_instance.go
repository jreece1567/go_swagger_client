package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingActivityInstance Parking Activity

swagger:model parkingActivityInstance
*/
type ParkingActivityInstance struct {

	/* Device used to access the carpark.

	Required: true
	*/
	AccessDevice *string `json:"access_device"`

	/* Date-time the parking activity took place.

	Required: true
	*/
	ActivityAt *strfmt.DateTime `json:"activity_at"`

	/* Type of parking activity.

	Required: true
	*/
	ActivityType *string `json:"activity_type"`

	/* Centre identifier. Identifier to retrieve the centre this parking activity is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Currency code for the transaction.

	Required: true
	*/
	Currency *string `json:"currency"`

	/* Parking activity identifier.

	Required: true
	*/
	ParkingActivityID *int64 `json:"parking_activity_id"`

	/* Person identifier. UUID of the person account related to this parking activity.

	Required: true
	*/
	PersonID *string `json:"person_id"`

	/* Transaction discount amount.

	Required: true
	*/
	TransactionDiscountAmount *int64 `json:"transaction_discount_amount"`

	/* Transaction final amount.

	Required: true
	*/
	TransactionFinalAmount *int64 `json:"transaction_final_amount"`

	/* Transaction identifier.

	Required: true
	*/
	TransactionID *string `json:"transaction_id"`

	/* Transaction original amount.

	Required: true
	*/
	TransactionOriginalAmount *int64 `json:"transaction_original_amount"`

	/* Transaction surcharge amount.

	Required: true
	*/
	TransactionSurchargeAmount *int64 `json:"transaction_surcharge_amount"`

	/* Transaction tax amount.

	Required: true
	*/
	TransactionTaxAmount *int64 `json:"transaction_tax_amount"`

	/* The vendors transaction identifier.

	Required: true
	*/
	VendorTransactionID *string `json:"vendor_transaction_id"`
}

// Validate validates this parking activity instance
func (m *ParkingActivityInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessDevice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateActivityAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateActivityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingActivityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionDiscountAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionFinalAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionOriginalAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionSurchargeAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionTaxAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVendorTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingActivityInstance) validateAccessDevice(formats strfmt.Registry) error {

	if err := validate.Required("access_device", "body", m.AccessDevice); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateActivityAt(formats strfmt.Registry) error {

	if err := validate.Required("activity_at", "body", m.ActivityAt); err != nil {
		return err
	}

	return nil
}

var parkingActivityInstanceTypeActivityTypePropEnum []interface{}

// prop value enum
func (m *ParkingActivityInstance) validateActivityTypeEnum(path, location string, value string) error {
	if parkingActivityInstanceTypeActivityTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["registration","parking_entry","parking_exit","sms","parking_exit_offline","parking_entry_fail","parking_exit_fail"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingActivityInstanceTypeActivityTypePropEnum = append(parkingActivityInstanceTypeActivityTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingActivityInstanceTypeActivityTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingActivityInstance) validateActivityType(formats strfmt.Registry) error {

	if err := validate.Required("activity_type", "body", m.ActivityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActivityTypeEnum("activity_type", "body", *m.ActivityType); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

var parkingActivityInstanceTypeCurrencyPropEnum []interface{}

// prop value enum
func (m *ParkingActivityInstance) validateCurrencyEnum(path, location string, value string) error {
	if parkingActivityInstanceTypeCurrencyPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["GBP","USD","AUD","NZD"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingActivityInstanceTypeCurrencyPropEnum = append(parkingActivityInstanceTypeCurrencyPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingActivityInstanceTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingActivityInstance) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateParkingActivityID(formats strfmt.Registry) error {

	if err := validate.Required("parking_activity_id", "body", m.ParkingActivityID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionDiscountAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_discount_amount", "body", m.TransactionDiscountAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionFinalAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_final_amount", "body", m.TransactionFinalAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionOriginalAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_original_amount", "body", m.TransactionOriginalAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionSurchargeAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_surcharge_amount", "body", m.TransactionSurchargeAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateTransactionTaxAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_tax_amount", "body", m.TransactionTaxAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityInstance) validateVendorTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("vendor_transaction_id", "body", m.VendorTransactionID); err != nil {
		return err
	}

	return nil
}
