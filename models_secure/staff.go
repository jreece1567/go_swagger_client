package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Staff Staff

swagger:model staff
*/
type Staff struct {

	/* Confirmation token string
	 */
	ConfirmationToken string `json:"confirmation_token,omitempty"`

	/* DateTime that the staff was confirmed
	 */
	ConfirmedAt string `json:"confirmed_at,omitempty"`

	/* Country
	 */
	Country string `json:"country,omitempty"`

	/* DateTime that the staff was created
	 */
	CreatedAt string `json:"created_at,omitempty"`

	/* DateTime that the staff was disabled
	 */
	DisabledAt string `json:"disabled_at,omitempty"`

	/* Email address

	Required: true
	*/
	Email *string `json:"email"`

	/* First Name

	Required: true
	*/
	FirstName *string `json:"first_name"`

	/* Internal staff identifier

	Required: true
	*/
	ID *int64 `json:"id"`

	/* Last Name

	Required: true
	*/
	LastName *string `json:"last_name"`

	/* Metadata snapshot from the User Metadata Service
	 */
	Metadata Metadata `json:"metadata,omitempty"`

	/* Okta staff identifier

	Required: true
	*/
	OktaID *string `json:"okta_id"`

	/* Roles
	 */
	Roles []*StaffRole `json:"roles,omitempty"`

	/* DateTime that the staff last updated
	 */
	UpdatedAt string `json:"updated_at,omitempty"`

	/* Westfield staff UUID

	Required: true
	*/
	UUID *string `json:"uuid"`
}

// Validate validates this staff
func (m *Staff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOktaID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Staff) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Staff) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *Staff) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Staff) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *Staff) validateOktaID(formats strfmt.Registry) error {

	if err := validate.Required("okta_id", "body", m.OktaID); err != nil {
		return err
	}

	return nil
}

func (m *Staff) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {

		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {

			if err := m.Roles[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Staff) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}
