package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*MerchantUpdateBody Data to update a merchant.

swagger:model merchantUpdateBody
*/
type MerchantUpdateBody struct {

	/* Value is true if transactions for this merchant are charged on behalf of a connected Stripe account through the platform. Value is false if transactions for this merchant are charged directly on the connected Stripe account.
	 */
	ChargeViaPlatform bool `json:"charge_via_platform,omitempty"`

	/* Unique code used to process transactions on this merchant.
	 */
	Code string `json:"code,omitempty"`

	/* List of features the merchant has. If 'food' is present, the merchant is capable of food purchases.
	 */
	Features []string `json:"features,omitempty"`

	/* Identifier of the gateway that the merchant is related.
	 */
	GatewayID int64 `json:"gateway_id,omitempty"`

	/* Custom location description that may end up on bank statement.
	 */
	LocationDescriptor string `json:"location_descriptor,omitempty"`

	/* Name of the merchant.
	 */
	Name string `json:"name,omitempty"`

	/* Custom name description that may end up on bank statement.
	 */
	NameDescriptor string `json:"name_descriptor,omitempty"`
}

// Validate validates this merchant update body
func (m *MerchantUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var merchantUpdateBodyFeaturesItemsEnum []interface{}

func (m *MerchantUpdateBody) validateFeaturesItemsEnum(path, location string, value string) error {
	if merchantUpdateBodyFeaturesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["food"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			merchantUpdateBodyFeaturesItemsEnum = append(merchantUpdateBodyFeaturesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, merchantUpdateBodyFeaturesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *MerchantUpdateBody) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {

		// value enum
		if err := m.validateFeaturesItemsEnum("features"+"."+strconv.Itoa(i), "body", m.Features[i]); err != nil {
			return err
		}

	}

	return nil
}
