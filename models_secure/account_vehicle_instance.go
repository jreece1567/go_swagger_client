package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*AccountVehicleInstance Vehicle

swagger:model accountVehicleInstance
*/
type AccountVehicleInstance struct {

	/* Date-time the vehicle was added.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Date-time the vehicle was deleted.
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Date-time the vehicle was last used for parking.
	 */
	LastParkingSessionAt strfmt.DateTime `json:"last_parking_session_at,omitempty"`

	/* Vehicle license plate.

	Required: true
	Max Length: 8
	Min Length: 4
	Pattern: \A[A-Z0-9]+\z
	*/
	LicensePlate *string `json:"license_plate"`

	/* Vehicle name.

	Required: true
	Max Length: 25
	*/
	Name *string `json:"name"`
}

// Validate validates this account vehicle instance
func (m *AccountVehicleInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLicensePlate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountVehicleInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AccountVehicleInstance) validateLicensePlate(formats strfmt.Registry) error {

	if err := validate.Required("license_plate", "body", m.LicensePlate); err != nil {
		return err
	}

	if err := validate.MinLength("license_plate", "body", string(*m.LicensePlate), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("license_plate", "body", string(*m.LicensePlate), 8); err != nil {
		return err
	}

	if err := validate.Pattern("license_plate", "body", string(*m.LicensePlate), `\A[A-Z0-9]+\z`); err != nil {
		return err
	}

	return nil
}

func (m *AccountVehicleInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 25); err != nil {
		return err
	}

	return nil
}
