package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*OrderCouponInstance Food order coupon

swagger:model orderCouponInstance
*/
type OrderCouponInstance struct {

	/* The coupon code.

	Required: true
	*/
	Code *string `json:"code"`

	/* The discount amount applied to the order.

	Required: true
	*/
	Discount *string `json:"discount"`

	/* The flat amount off that the coupon provides, if the coupon is a flat discount.

	Required: true
	*/
	Flat *string `json:"flat"`

	/* The ID of the coupon.

	Required: true
	*/
	FoodOrderCouponID *string `json:"food_order_coupon_id"`

	/* The Name of the coupon.

	Required: true
	*/
	Name *string `json:"name"`

	/* The percent-off that the coupon provides, if the coupon is a percentage discount

	Required: true
	*/
	Percent *float64 `json:"percent"`
}

// Validate validates this order coupon instance
func (m *OrderCouponInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlat(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFoodOrderCouponID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePercent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderCouponInstance) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *OrderCouponInstance) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	return nil
}

func (m *OrderCouponInstance) validateFlat(formats strfmt.Registry) error {

	if err := validate.Required("flat", "body", m.Flat); err != nil {
		return err
	}

	return nil
}

func (m *OrderCouponInstance) validateFoodOrderCouponID(formats strfmt.Registry) error {

	if err := validate.Required("food_order_coupon_id", "body", m.FoodOrderCouponID); err != nil {
		return err
	}

	return nil
}

func (m *OrderCouponInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OrderCouponInstance) validatePercent(formats strfmt.Registry) error {

	if err := validate.Required("percent", "body", m.Percent); err != nil {
		return err
	}

	return nil
}
