package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*TransactionRefundBody Data to refund a transaction.

swagger:model transactionRefundBody
*/
type TransactionRefundBody struct {

	/* Amount to be refunded, in cents. If this value is not provided, the entire transaction amount will be refunded.
	 */
	Amount int64 `json:"amount,omitempty"`

	/* Description of product or service sold.
	 */
	Description string `json:"description,omitempty"`

	/* Customer email address.
	 */
	Email string `json:"email,omitempty"`

	/* gateway specific fields
	 */
	GatewaySpecificFields *GatewaySpecificFieldsForRefund `json:"gateway_specific_fields,omitempty"`

	/* Customer IPv4 address.
	 */
	IP string `json:"ip,omitempty"`

	/* Code of the merchant used for refund.

	Required: true
	*/
	MerchantCode *string `json:"merchant_code"`

	/* Custom location description that may end up on bank statement, depending on the gateway.
	 */
	MerchantLocationDescriptor string `json:"merchant_location_descriptor,omitempty"`

	/* Custom name description that may end up on bank statement, depending on the gateway.
	 */
	MerchantNameDescriptor string `json:"merchant_name_descriptor,omitempty"`

	/* A merchant specified tracking number.
	 */
	OrderID string `json:"order_id,omitempty"`
}

// Validate validates this transaction refund body
func (m *TransactionRefundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewaySpecificFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMerchantCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionRefundBody) validateGatewaySpecificFields(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewaySpecificFields) { // not required
		return nil
	}

	if m.GatewaySpecificFields != nil {

		if err := m.GatewaySpecificFields.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TransactionRefundBody) validateMerchantCode(formats strfmt.Registry) error {

	if err := validate.Required("merchant_code", "body", m.MerchantCode); err != nil {
		return err
	}

	return nil
}
