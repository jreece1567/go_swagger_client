package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingSessionSummaryInstance Parking session summary information.

swagger:model parkingSessionSummaryInstance
*/
type ParkingSessionSummaryInstance struct {

	/* Currency code of the session.

	Required: true
	*/
	Currency *string `json:"currency"`

	/* month of summary.

	Required: true
	*/
	Month *int64 `json:"month"`

	/* total cost of sessions of the month.

	Required: true
	*/
	TotalCost *int64 `json:"total_cost"`

	/* count of sessions of the month.

	Required: true
	*/
	TotalSessions *int64 `json:"total_sessions"`

	/* year of summary.

	Required: true
	*/
	Year *int64 `json:"year"`
}

// Validate validates this parking session summary instance
func (m *ParkingSessionSummaryInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotalCost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotalSessions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var parkingSessionSummaryInstanceTypeCurrencyPropEnum []interface{}

// prop value enum
func (m *ParkingSessionSummaryInstance) validateCurrencyEnum(path, location string, value string) error {
	if parkingSessionSummaryInstanceTypeCurrencyPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["GBP","USD","AUD","NZD"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingSessionSummaryInstanceTypeCurrencyPropEnum = append(parkingSessionSummaryInstanceTypeCurrencyPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingSessionSummaryInstanceTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingSessionSummaryInstance) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionSummaryInstance) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionSummaryInstance) validateTotalCost(formats strfmt.Registry) error {

	if err := validate.Required("total_cost", "body", m.TotalCost); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionSummaryInstance) validateTotalSessions(formats strfmt.Registry) error {

	if err := validate.Required("total_sessions", "body", m.TotalSessions); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionSummaryInstance) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}
