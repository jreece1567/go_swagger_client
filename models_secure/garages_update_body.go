package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*GaragesUpdateBody Data to create a car park.

swagger:model garagesUpdateBody
*/
type GaragesUpdateBody struct {

	/* List of carpark spaces available

	Required: true
	*/
	Locations []*GarageLocation `json:"locations"`

	/* Name of the garage.

	Required: true
	*/
	Name *string `json:"name"`
}

// Validate validates this garages update body
func (m *GaragesUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GaragesUpdateBody) validateLocations(formats strfmt.Registry) error {

	if err := validate.Required("locations", "body", m.Locations); err != nil {
		return err
	}

	for i := 0; i < len(m.Locations); i++ {

		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {

			if err := m.Locations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GaragesUpdateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
