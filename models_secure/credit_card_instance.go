package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CreditCardInstance Credit Card Token

swagger:model creditCardInstance
*/
type CreditCardInstance struct {

	/* Credit card type.

	Required: true
	*/
	CardType *string `json:"card_type"`

	/* Date-time the credit card was added.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Date-time the credit card was deleted.
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Credit card holder's first name.

	Required: true
	*/
	FirstName *string `json:"first_name"`

	/* First six numbers of credit card.

	Required: true
	*/
	FirstSixDigits *string `json:"first_six_digits"`

	/* Last four numbers of credit card.

	Required: true
	*/
	LastFourDigits *string `json:"last_four_digits"`

	/* Credit card holder's last name.

	Required: true
	*/
	LastName *string `json:"last_name"`

	/* Value is true if the credit card is the last one used for food.

	Required: true
	*/
	LastUsedForFood *bool `json:"last_used_for_food"`

	/* Credit card expiration month.

	Required: true
	*/
	Month *int64 `json:"month"`

	/* Value is true if the credit card is the one used for parking.

	Required: true
	*/
	ParkingCard *bool `json:"parking_card"`

	/* Credit card identifier. Token identifier for credit card.

	Required: true
	*/
	PaymentMethodToken *string `json:"payment_method_token"`

	/* Credit card holder's postal code.

	Required: true
	*/
	PostalCode *string `json:"postal_code"`

	/* Credit card expiration year.

	Required: true
	*/
	Year *int64 `json:"year"`
}

// Validate validates this credit card instance
func (m *CreditCardInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstSixDigits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastFourDigits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUsedForFood(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingCard(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethodToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditCardInstance) validateCardType(formats strfmt.Registry) error {

	if err := validate.Required("card_type", "body", m.CardType); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateFirstSixDigits(formats strfmt.Registry) error {

	if err := validate.Required("first_six_digits", "body", m.FirstSixDigits); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateLastFourDigits(formats strfmt.Registry) error {

	if err := validate.Required("last_four_digits", "body", m.LastFourDigits); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateLastUsedForFood(formats strfmt.Registry) error {

	if err := validate.Required("last_used_for_food", "body", m.LastUsedForFood); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateParkingCard(formats strfmt.Registry) error {

	if err := validate.Required("parking_card", "body", m.ParkingCard); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validatePaymentMethodToken(formats strfmt.Registry) error {

	if err := validate.Required("payment_method_token", "body", m.PaymentMethodToken); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postal_code", "body", m.PostalCode); err != nil {
		return err
	}

	return nil
}

func (m *CreditCardInstance) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}
