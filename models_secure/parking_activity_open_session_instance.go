package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingActivityOpenSessionInstance Parking Activity Open Session

swagger:model parkingActivityOpenSessionInstance
*/
type ParkingActivityOpenSessionInstance struct {

	/* Device used to access the carpark for the parking session.

	Required: true
	*/
	AccessDevice *string `json:"access_device"`

	/* The id of the centre where the parking session originated.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Entry date-time for the parking session.

	Required: true
	*/
	EntryAt *strfmt.DateTime `json:"entry_at"`
}

// Validate validates this parking activity open session instance
func (m *ParkingActivityOpenSessionInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessDevice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingActivityOpenSessionInstance) validateAccessDevice(formats strfmt.Registry) error {

	if err := validate.Required("access_device", "body", m.AccessDevice); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityOpenSessionInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivityOpenSessionInstance) validateEntryAt(formats strfmt.Registry) error {

	if err := validate.Required("entry_at", "body", m.EntryAt); err != nil {
		return err
	}

	return nil
}
