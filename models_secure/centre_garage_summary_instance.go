package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CentreGarageSummaryInstance Parking garage summary information.

swagger:model centreGarageSummaryInstance
*/
type CentreGarageSummaryInstance struct {

	/* Total number of available carpark spots for the centre.

	Required: true
	*/
	Available *int64 `json:"available"`

	/* Total number of carparks spots for the centre.

	Required: true
	*/
	Capacity *int64 `json:"capacity"`

	/* Centre identifier. Identifier to retrieve the centre this garage is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Total number of occupied carpark spots for the centre.

	Required: true
	*/
	Occupied *int64 `json:"occupied"`

	/* Total number of reserved carpark spots for the centre.

	Required: true
	*/
	Reserved *int64 `json:"reserved"`

	/* Value is true if the last updated date for the parking garage details is older than 15 minutes.

	Required: true
	*/
	Stale *bool `json:"stale"`

	/* Date-time the parking garage details were updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this centre garage summary instance
func (m *CentreGarageSummaryInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCapacity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOccupied(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStale(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CentreGarageSummaryInstance) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateOccupied(formats strfmt.Registry) error {

	if err := validate.Required("occupied", "body", m.Occupied); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateReserved(formats strfmt.Registry) error {

	if err := validate.Required("reserved", "body", m.Reserved); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateStale(formats strfmt.Registry) error {

	if err := validate.Required("stale", "body", m.Stale); err != nil {
		return err
	}

	return nil
}

func (m *CentreGarageSummaryInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
