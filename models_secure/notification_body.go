package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NotificationBody Notification body

swagger:model notificationBody
*/
type NotificationBody struct {

	/* Centre identifier. Identifier of the centre where the message originated.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Custom data to be used on the message
	 */
	Data interface{} `json:"data,omitempty"`

	/* Message identifier for the message that will be sent

	Required: true
	*/
	MessageID *string `json:"message_id"`

	/* Identifier of the account that will receive the message

	Required: true
	*/
	PersonID *string `json:"person_id"`
}

// Validate validates this notification body
func (m *NotificationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationBody) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *NotificationBody) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("message_id", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *NotificationBody) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}
