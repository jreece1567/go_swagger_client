package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NotificationWithCategoryBody Notification body

swagger:model notificationWithCategoryBody
*/
type NotificationWithCategoryBody struct {

	/* category of message

	Required: true
	*/
	Category *string `json:"category"`

	/* Centre identifier. Identifier of the centre where the message originated.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Message identifier for the message that will be sent

	Required: true
	*/
	MessageID *string `json:"message_id"`

	/* Identifier of the account that will receive the message

	Required: true
	*/
	PersonID *string `json:"person_id"`
}

// Validate validates this notification with category body
func (m *NotificationWithCategoryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationWithCategoryBodyTypeCategoryPropEnum []interface{}

// prop value enum
func (m *NotificationWithCategoryBody) validateCategoryEnum(path, location string, value string) error {
	if notificationWithCategoryBodyTypeCategoryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["food","parking"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			notificationWithCategoryBodyTypeCategoryPropEnum = append(notificationWithCategoryBodyTypeCategoryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, notificationWithCategoryBodyTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NotificationWithCategoryBody) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *NotificationWithCategoryBody) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *NotificationWithCategoryBody) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("message_id", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *NotificationWithCategoryBody) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}
