package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingActivitySessionInstance Parking Session

swagger:model parkingActivitySessionInstance
*/
type ParkingActivitySessionInstance struct {

	/* Device used to access the carpark for the parking session.

	Required: true
	*/
	AccessDevice *string `json:"access_device"`

	/* The id of the centre where the parking session originated.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Currency code for the transaction used in the parking session.
	 */
	Currency string `json:"currency,omitempty"`

	/* Entry date-time for the parking session.

	Required: true
	*/
	EntryAt *strfmt.DateTime `json:"entry_at"`

	/* Exit date-time for the parking session.

	Required: true
	*/
	ExitAt *strfmt.DateTime `json:"exit_at"`

	/* String representing the total amount of time for the parking session.
	 */
	FormattedTotalTime string `json:"formatted_total_time,omitempty"`

	/* Parking session identifier

	Required: true
	*/
	ParkingSessionID *int64 `json:"parking_session_id"`

	/* A unique string to identify the last payment method token used to charge the session.
	 */
	PaymentMethodToken string `json:"payment_method_token,omitempty"`

	/* The payment status of this session

	Required: true
	*/
	PaymentStatus *string `json:"payment_status"`

	/* Person identifier. Person that this session belongs to.

	Required: true
	*/
	PersonID *string `json:"person_id"`

	/* The total amount refunded in cents.
	 */
	RefundedAmount int64 `json:"refunded_amount,omitempty"`

	/* List of refunds related to the session.
	 */
	Refunds []*ParkingSessionTransactionInstance `json:"refunds,omitempty"`

	/* The total amount of time (in seconds) for the parking session.
	 */
	TotalTime int64 `json:"total_time,omitempty"`

	/* The transactions final amount in cents.
	 */
	TransactionFinalAmount int64 `json:"transaction_final_amount,omitempty"`

	/* The transaction id of the last processed payment transaction related to the session.
	 */
	TransactionID string `json:"transaction_id,omitempty"`

	/* transaction_original_amount + transaction_surcharge_amount - transaction_discount_amount
	 */
	TransactionPretaxAmount int64 `json:"transaction_pretax_amount,omitempty"`

	/* The transactions tax amount in cents.
	 */
	TransactionTaxAmount int64 `json:"transaction_tax_amount,omitempty"`
}

// Validate validates this parking activity session instance
func (m *ParkingActivitySessionInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessDevice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExitAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingSessionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefunds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingActivitySessionInstance) validateAccessDevice(formats strfmt.Registry) error {

	if err := validate.Required("access_device", "body", m.AccessDevice); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

var parkingActivitySessionInstanceTypeCurrencyPropEnum []interface{}

// prop value enum
func (m *ParkingActivitySessionInstance) validateCurrencyEnum(path, location string, value string) error {
	if parkingActivitySessionInstanceTypeCurrencyPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["GBP","USD","AUD","NZD"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingActivitySessionInstanceTypeCurrencyPropEnum = append(parkingActivitySessionInstanceTypeCurrencyPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingActivitySessionInstanceTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingActivitySessionInstance) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validateEntryAt(formats strfmt.Registry) error {

	if err := validate.Required("entry_at", "body", m.EntryAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validateExitAt(formats strfmt.Registry) error {

	if err := validate.Required("exit_at", "body", m.ExitAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validateParkingSessionID(formats strfmt.Registry) error {

	if err := validate.Required("parking_session_id", "body", m.ParkingSessionID); err != nil {
		return err
	}

	return nil
}

var parkingActivitySessionInstanceTypePaymentStatusPropEnum []interface{}

// prop value enum
func (m *ParkingActivitySessionInstance) validatePaymentStatusEnum(path, location string, value string) error {
	if parkingActivitySessionInstanceTypePaymentStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["succeeded","failed","pending","refunded","partial_refunded"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingActivitySessionInstanceTypePaymentStatusPropEnum = append(parkingActivitySessionInstanceTypePaymentStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingActivitySessionInstanceTypePaymentStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingActivitySessionInstance) validatePaymentStatus(formats strfmt.Registry) error {

	if err := validate.Required("payment_status", "body", m.PaymentStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentStatusEnum("payment_status", "body", *m.PaymentStatus); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingActivitySessionInstance) validateRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {

		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {

			if err := m.Refunds[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
