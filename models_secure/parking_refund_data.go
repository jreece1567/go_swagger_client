package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingRefundData Parking session refund data.

swagger:model parkingRefundData
*/
type ParkingRefundData struct {

	/* Amount in cents used to process the transaction.
	 */
	Amount int64 `json:"amount,omitempty"`

	/* Transaction creation date.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* String representing the amount used to process the transaction.
	 */
	FormattedAmount string `json:"formatted_amount,omitempty"`

	/* Reason provided when the transaction was processed.
	 */
	Reason string `json:"reason,omitempty"`

	/* Identifier of the staff user that requested the refund.
	 */
	RequesterID string `json:"requester_id,omitempty"`

	/* Payments transaction identifier.

	Required: true
	*/
	TransactionID *string `json:"transaction_id"`

	/* The type of this transaction.

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this parking refund data
func (m *ParkingRefundData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingRefundData) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingRefundData) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

var parkingRefundDataTypeTypePropEnum []interface{}

// prop value enum
func (m *ParkingRefundData) validateTypeEnum(path, location string, value string) error {
	if parkingRefundDataTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["refund","partial_refund"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingRefundDataTypeTypePropEnum = append(parkingRefundDataTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingRefundDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingRefundData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
