package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*NewslettersSubscribeInstance Account details regarding newsletter subscription.

swagger:model newslettersSubscribeInstance
*/
type NewslettersSubscribeInstance struct {

	/* Email address for the account.
	 */
	Email string `json:"email,omitempty"`

	/* True if account is opted in to marketing.
	 */
	EmailMarketingOptIn bool `json:"email_marketing_opt_in,omitempty"`

	/* First name for the account
	 */
	FirstName string `json:"first_name,omitempty"`

	/* List of centre identifiers associated with the newsletter subscriptions.
	 */
	NewsletterCentreIds []string `json:"newsletter_centre_ids,omitempty"`

	/* List of newsletter identifiers that the account is subscribed to.
	 */
	NewsletterSubscriptions []string `json:"newsletter_subscriptions,omitempty"`

	/* Primary centre identifier. Identifier of the primary centre of the account.
	 */
	PrimaryCentreID string `json:"primary_centre_id,omitempty"`
}

// Validate validates this newsletters subscribe instance
func (m *NewslettersSubscribeInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewsletterCentreIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewsletterSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewslettersSubscribeInstance) validateNewsletterCentreIds(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterCentreIds) { // not required
		return nil
	}

	return nil
}

func (m *NewslettersSubscribeInstance) validateNewsletterSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.NewsletterSubscriptions) { // not required
		return nil
	}

	return nil
}
