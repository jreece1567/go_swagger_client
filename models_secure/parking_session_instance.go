package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingSessionInstance Parking session

swagger:model parkingSessionInstance
*/
type ParkingSessionInstance struct {

	/* Centre identifier. Identifier of the centre where the parking session originated.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* credit card

	Required: true
	*/
	CreditCard *CreditCardInstance `json:"credit_card"`

	/* Currency code for the transaction.

	Required: true
	*/
	Currency *string `json:"currency"`

	/* Entry date-time for the parking session.

	Required: true
	*/
	EntryAt *strfmt.DateTime `json:"entry_at"`

	/* Exit date-time for the parking session.

	Required: true
	*/
	ExitAt *strfmt.DateTime `json:"exit_at"`

	/* String representing the total amount of time for the parking session.

	Required: true
	*/
	FormattedTotalTime *string `json:"formatted_total_time"`

	/* String representing the total amount for the parking session.

	Required: true
	*/
	FormattedTransactionFinalAmount *string `json:"formatted_transaction_final_amount"`

	/* Parking session identifier.

	Required: true
	*/
	ParkingSessionID *int64 `json:"parking_session_id"`

	/* The payment status of this session

	Required: true
	*/
	PaymentStatus *string `json:"payment_status"`

	/* List of refunds made related to the session.
	 */
	Refunds []*ParkingRefundData `json:"refunds,omitempty"`

	/* Total amount of time (in seconds) for the parking session.

	Required: true
	*/
	TotalTime *int64 `json:"total_time"`

	/* Transaction's final amount in cents.

	Required: true
	*/
	TransactionFinalAmount *int64 `json:"transaction_final_amount"`

	/* vehicle

	Required: true
	*/
	Vehicle *AccountVehicleInstance `json:"vehicle"`
}

// Validate validates this parking session instance
func (m *ParkingSessionInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditCard(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExitAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFormattedTotalTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFormattedTransactionFinalAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingSessionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefunds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionFinalAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVehicle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingSessionInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateCreditCard(formats strfmt.Registry) error {

	if err := validate.Required("credit_card", "body", m.CreditCard); err != nil {
		return err
	}

	if m.CreditCard != nil {

		if err := m.CreditCard.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ParkingSessionInstance) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateEntryAt(formats strfmt.Registry) error {

	if err := validate.Required("entry_at", "body", m.EntryAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateExitAt(formats strfmt.Registry) error {

	if err := validate.Required("exit_at", "body", m.ExitAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateFormattedTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("formatted_total_time", "body", m.FormattedTotalTime); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateFormattedTransactionFinalAmount(formats strfmt.Registry) error {

	if err := validate.Required("formatted_transaction_final_amount", "body", m.FormattedTransactionFinalAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateParkingSessionID(formats strfmt.Registry) error {

	if err := validate.Required("parking_session_id", "body", m.ParkingSessionID); err != nil {
		return err
	}

	return nil
}

var parkingSessionInstanceTypePaymentStatusPropEnum []interface{}

// prop value enum
func (m *ParkingSessionInstance) validatePaymentStatusEnum(path, location string, value string) error {
	if parkingSessionInstanceTypePaymentStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["succeeded","failed","pending","refunded","partial_refunded"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			parkingSessionInstanceTypePaymentStatusPropEnum = append(parkingSessionInstanceTypePaymentStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, parkingSessionInstanceTypePaymentStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParkingSessionInstance) validatePaymentStatus(formats strfmt.Registry) error {

	if err := validate.Required("payment_status", "body", m.PaymentStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentStatusEnum("payment_status", "body", *m.PaymentStatus); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateRefunds(formats strfmt.Registry) error {

	if swag.IsZero(m.Refunds) { // not required
		return nil
	}

	for i := 0; i < len(m.Refunds); i++ {

		if swag.IsZero(m.Refunds[i]) { // not required
			continue
		}

		if m.Refunds[i] != nil {

			if err := m.Refunds[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ParkingSessionInstance) validateTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("total_time", "body", m.TotalTime); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateTransactionFinalAmount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_final_amount", "body", m.TransactionFinalAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingSessionInstance) validateVehicle(formats strfmt.Registry) error {

	if err := validate.Required("vehicle", "body", m.Vehicle); err != nil {
		return err
	}

	if m.Vehicle != nil {

		if err := m.Vehicle.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
