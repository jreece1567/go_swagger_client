package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PaymentMethodVerificationResponseInstance Payment verification details.

swagger:model paymentMethodVerificationResponseInstance
*/
type PaymentMethodVerificationResponseInstance struct {

	/* Result code of an Address Verification System (AVS) check.

	Required: true
	*/
	AvsCode *string `json:"avs_code"`

	/* Brief description of an Address Verification System (AVS) check.

	Required: true
	*/
	AvsMessage *string `json:"avs_message"`

	/* Value is true if transaction state is cancelled.

	Required: true
	*/
	Cancelled *bool `json:"cancelled"`

	/* Date-time the payment method was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Result code of a Card Verification Value check.

	Required: true
	*/
	CvvCode *string `json:"cvv_code"`

	/* Brief description of a Card Verification Value check.

	Required: true
	*/
	CvvMessage *string `json:"cvv_message"`

	/* The gateway specific error code.

	Required: true
	*/
	ErrorCode *string `json:"error_code"`

	/* In the case of an error, this is the exception message.

	Required: true
	*/
	ErrorDetail *string `json:"error_detail"`

	/* Value is true when a payment is pending review by the fraud service of the gateway.

	Required: true
	*/
	FraudReview *bool `json:"fraud_review"`

	/* A brief description of the results of the transaction.

	Required: true
	*/
	Message *string `json:"message"`

	/* Value is true if transaction state is pending.

	Required: true
	*/
	Pending *bool `json:"pending"`

	/* Value is true if transaction was successful.

	Required: true
	*/
	Success *bool `json:"success"`

	/* Date-time the payment method was updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this payment method verification response instance
func (m *PaymentMethodVerificationResponseInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvsCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAvsMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCancelled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCvvCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCvvMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrorDetail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFraudReview(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateAvsCode(formats strfmt.Registry) error {

	if err := validate.Required("avs_code", "body", m.AvsCode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateAvsMessage(formats strfmt.Registry) error {

	if err := validate.Required("avs_message", "body", m.AvsMessage); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateCancelled(formats strfmt.Registry) error {

	if err := validate.Required("cancelled", "body", m.Cancelled); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateCvvCode(formats strfmt.Registry) error {

	if err := validate.Required("cvv_code", "body", m.CvvCode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateCvvMessage(formats strfmt.Registry) error {

	if err := validate.Required("cvv_message", "body", m.CvvMessage); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("error_code", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateErrorDetail(formats strfmt.Registry) error {

	if err := validate.Required("error_detail", "body", m.ErrorDetail); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateFraudReview(formats strfmt.Registry) error {

	if err := validate.Required("fraud_review", "body", m.FraudReview); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validatePending(formats strfmt.Registry) error {

	if err := validate.Required("pending", "body", m.Pending); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodVerificationResponseInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
