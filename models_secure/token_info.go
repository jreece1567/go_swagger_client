package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*TokenInfo Token Info

swagger:model tokenInfo
*/
type TokenInfo struct {

	/* application
	 */
	Application *Application `json:"application,omitempty"`

	/* DateTime that the token was created
	 */
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	/* DateTime that the token will expires Unix Timestamp format
	 */
	ExpiresAt strfmt.DateTime `json:"expires_at,omitempty"`

	/* Token TTL
	 */
	ExpiresInSeconds int64 `json:"expires_in_seconds,omitempty"`

	/* resource owner
	 */
	ResourceOwner interface{} `json:"resource_owner,omitempty"`

	/* OAuth Scopes
	 */
	Scopes []string `json:"scopes,omitempty"`

	/* SSO Session identifier
	 */
	SessionID string `json:"session_id,omitempty"`

	/* UUID for the account
	 */
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this token info
func (m *TokenInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenInfo) validateApplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {

		if err := m.Application.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TokenInfo) validateScopes(formats strfmt.Registry) error {

	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	return nil
}
