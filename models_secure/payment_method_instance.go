package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*PaymentMethodInstance Payment method details.

swagger:model paymentMethodInstance
*/
type PaymentMethodInstance struct {

	/* Identifier of the card's brand.

	Required: true
	*/
	CardType *string `json:"card_type"`

	/* Date-time the payment method was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Extra data values passed through the gateway.

	Required: true
	*/
	Data interface{} `json:"data"`

	/* A list of validation errors from the payment gateway.

	Required: true
	*/
	Errors []string `json:"errors"`

	/* If the payment method is a credit card, the fingerprint of the PAN.

	Required: true
	*/
	Fingerprint *string `json:"fingerprint"`

	/* Customer first name.

	Required: true
	*/
	FirstName *string `json:"first_name"`

	/* First six digits of a credit card.

	Required: true
	*/
	FirstSixDigits *string `json:"first_six_digits"`

	/* Last four digits of a credit card.

	Required: true
	*/
	LastFourDigits *string `json:"last_four_digits"`

	/* Customer last name.

	Required: true
	*/
	LastName *string `json:"last_name"`

	/* Expiration month.

	Required: true
	*/
	Month *int64 `json:"month"`

	/* The token identifying the payment method.

	Required: true
	*/
	PaymentMethodToken *string `json:"payment_method_token"`

	/* Type of payment method, e.g., credit_card, bank_account, apple_pay, paypal.

	Required: true
	*/
	PaymentMethodType *string `json:"payment_method_type"`

	/* Customer postal code.

	Required: true
	*/
	PostalCode *string `json:"postal_code"`

	/* Expiration year.

	Required: true
	*/
	Year *int64 `json:"year"`
}

// Validate validates this payment method instance
func (m *PaymentMethodInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFingerprint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstSixDigits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastFourDigits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethodToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentMethodType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethodInstance) validateCardType(formats strfmt.Registry) error {

	if err := validate.Required("card_type", "body", m.CardType); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateData(formats strfmt.Registry) error {

	return nil
}

func (m *PaymentMethodInstance) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateFirstSixDigits(formats strfmt.Registry) error {

	if err := validate.Required("first_six_digits", "body", m.FirstSixDigits); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateLastFourDigits(formats strfmt.Registry) error {

	if err := validate.Required("last_four_digits", "body", m.LastFourDigits); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validatePaymentMethodToken(formats strfmt.Registry) error {

	if err := validate.Required("payment_method_token", "body", m.PaymentMethodToken); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validatePaymentMethodType(formats strfmt.Registry) error {

	if err := validate.Required("payment_method_type", "body", m.PaymentMethodType); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postal_code", "body", m.PostalCode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodInstance) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}
