package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingOperatorCreateBody Data to create a Car Parking Business Operator.

swagger:model parkingOperatorCreateBody
*/
type ParkingOperatorCreateBody struct {

	/* Full address for the Car Parking Business Operator.

	Required: true
	*/
	Address *string `json:"address"`

	/* Identifier of the centre where the Car Parking Business Operator is located.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Code used to process payments for this operator.

	Required: true
	*/
	MerchantCode *string `json:"merchant_code"`

	/* Name of the Car Parking Business Operator

	Required: true
	*/
	Name *string `json:"name"`

	/* Bonus time in seconds given to users to avoid complaints about busy service.
	 */
	ParkingTimeBonus int64 `json:"parking_time_bonus,omitempty"`

	/* Phone number of the Car Parking Business Operator

	Required: true
	*/
	PhoneNumber *string `json:"phone_number"`

	/* Tax identifier of the Car Parking Business Operator

	Required: true
	*/
	TaxID *string `json:"tax_id"`
}

// Validate validates this parking operator create body
func (m *ParkingOperatorCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMerchantCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaxID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingOperatorCreateBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *ParkingOperatorCreateBody) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingOperatorCreateBody) validateMerchantCode(formats strfmt.Registry) error {

	if err := validate.Required("merchant_code", "body", m.MerchantCode); err != nil {
		return err
	}

	return nil
}

func (m *ParkingOperatorCreateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ParkingOperatorCreateBody) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phone_number", "body", m.PhoneNumber); err != nil {
		return err
	}

	return nil
}

func (m *ParkingOperatorCreateBody) validateTaxID(formats strfmt.Registry) error {

	if err := validate.Required("tax_id", "body", m.TaxID); err != nil {
		return err
	}

	return nil
}
