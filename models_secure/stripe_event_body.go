package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StripeEventBody Data to create a Stripe event.

swagger:model stripeEventBody
*/
type StripeEventBody struct {

	/* Number of seconds since epoch when the event was created.
	 */
	Created string `json:"created,omitempty"`

	/* JSON payload of data related to the event.

	Required: true
	*/
	Data interface{} `json:"data"`

	/* Unique identifier of the event.

	Required: true
	*/
	ID *string `json:"id"`

	/* Value is true if the Stripe event was created in the live system.
	 */
	LiveMode bool `json:"live_mode,omitempty"`

	/* Custom event type provided by Stripe.

	Required: true
	*/
	Type *string `json:"type"`

	/* Identifier which associates this event to a specific Stripe account.
	 */
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this stripe event body
func (m *StripeEventBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StripeEventBody) validateData(formats strfmt.Registry) error {

	return nil
}

func (m *StripeEventBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *StripeEventBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
