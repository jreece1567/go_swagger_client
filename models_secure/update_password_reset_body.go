package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*UpdatePasswordResetBody Data to reset an account password.

swagger:model updatePasswordResetBody
*/
type UpdatePasswordResetBody struct {

	/* Account password.

	Required: true
	Max Length: 30
	Min Length: 8
	*/
	Password *string `json:"password"`

	/* Person identifier. Used to identify the account.

	Required: true
	*/
	PersonID *string `json:"person_id"`
}

// Validate validates this update password reset body
func (m *UpdatePasswordResetBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePasswordResetBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 30); err != nil {
		return err
	}

	return nil
}

func (m *UpdatePasswordResetBody) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("person_id", "body", m.PersonID); err != nil {
		return err
	}

	return nil
}
