package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*AddKidsRequest Data to add kids to account

swagger:model addKidsRequest
*/
type AddKidsRequest struct {

	/* Country code of the account.

	Required: true
	Max Length: 2
	Min Length: 2
	*/
	Country *string `json:"country"`

	/* Email of the account.

	Required: true
	*/
	Email *string `json:"email"`

	/* Data for each kid record being added to account.

	Required: true
	*/
	Kids []*KidsRequestObject `json:"kids"`
}

// Validate validates this add kids request
func (m *AddKidsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKids(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addKidsRequestTypeCountryPropEnum []interface{}

// prop value enum
func (m *AddKidsRequest) validateCountryEnum(path, location string, value string) error {
	if addKidsRequestTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["US","UK","AU","NZ"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			addKidsRequestTypeCountryPropEnum = append(addKidsRequestTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, addKidsRequestTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddKidsRequest) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	if err := validate.MinLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", string(*m.Country), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", *m.Country); err != nil {
		return err
	}

	return nil
}

func (m *AddKidsRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AddKidsRequest) validateKids(formats strfmt.Registry) error {

	if err := validate.Required("kids", "body", m.Kids); err != nil {
		return err
	}

	for i := 0; i < len(m.Kids); i++ {

		if swag.IsZero(m.Kids[i]) { // not required
			continue
		}

		if m.Kids[i] != nil {

			if err := m.Kids[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
