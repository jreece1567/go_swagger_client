package models_secure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*TokenRequestBody Account-token request parameters.

swagger:model tokenRequestBody
*/
type TokenRequestBody struct {

	/* OAuth client identifier
	 */
	ClientID string `json:"client_id,omitempty"`

	/* OAuth client secret
	 */
	ClientSecret string `json:"client_secret,omitempty"`

	/* The code parameter returned by the /authorize step.
	 */
	Code string `json:"code,omitempty"`

	/* Grant Type

	Required: true
	*/
	GrantType *string `json:"grant_type"`

	/* Password
	 */
	Password string `json:"password,omitempty"`

	/* The redirect_uri specified when registering the app and in the /authorize call (must match exactly).
	 */
	RedirectURI string `json:"redirect_uri,omitempty"`

	/* OAuth Scope
	 */
	Scope string `json:"scope,omitempty"`

	/* Username
	 */
	Username string `json:"username,omitempty"`
}

// Validate validates this token request body
func (m *TokenRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGrantType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tokenRequestBodyTypeGrantTypePropEnum []interface{}

// prop value enum
func (m *TokenRequestBody) validateGrantTypeEnum(path, location string, value string) error {
	if tokenRequestBodyTypeGrantTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["client_credentials","password","authorization_code"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tokenRequestBodyTypeGrantTypePropEnum = append(tokenRequestBodyTypeGrantTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tokenRequestBodyTypeGrantTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TokenRequestBody) validateGrantType(formats strfmt.Registry) error {

	if err := validate.Required("grant_type", "body", m.GrantType); err != nil {
		return err
	}

	// value enum
	if err := m.validateGrantTypeEnum("grant_type", "body", *m.GrantType); err != nil {
		return err
	}

	return nil
}
