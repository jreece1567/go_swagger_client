{
  "swagger": "2.0",
  "info": {
    "version": "1",
    "title": "Westfield APIs",
    "description": "Summary of Westfield API endpoints."
  },
  "schemes": [
    "https"
  ],
  "basePath": "/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "api_key": {
      "description": "A Westfield API-key",
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    }
  },
  "paths": {
    "/staff": {
      "x-product": [
        "Staff"
      ],
      "get": {
        "summary": "Staff with access to Westfield APIs",
        "description": "Returns a list of staff limited to 100 enabled staff by default",
        "tags": [
          "STAFF MANAGEMENT"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string",
            "type": "string",
            "required": false
          },
          {
            "name": "role",
            "in": "query",
            "description": "Limits the result to staff with a specific role",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of staff",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/staff401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create new staff",
        "tags": [
          "STAFF MANAGEMENT"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "staff",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/staff"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Return successfully created staff.",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/staff401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "staff_access"
      ]
    },
    "/staff/{uuid}": {
      "x-product": [
        "Staff"
      ],
      "get": {
        "summary": "A specific staff",
        "description": "Returns a staff",
        "tags": [
          "STAFF MANAGEMENT"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "uuid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A staff members",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/staff401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "staff_access"
      ]
    },
    "/staff/token": {
      "x-product": [
        "Staff-Auth"
      ],
      "post": {
        "summary": "Create OAuth token.",
        "description": "If you send the grant type `client_credentials` you must also provide the `client_id` and `client_secret`. If you send the grant type `password` you must also provide the `username` and `password`; you may optionally provide `client_id` and `client_secret`. If you send the grant type as `authorization_code`, you must provide the `client_id` and `client_secret` along with the `code` and `redirect_uri`.",
        "tags": [
          "STAFF AUTH"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/tokenRequestBody"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/token"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/authorizationErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "staff_access"
      ]
    },
    "/staff/revoke": {
      "x-product": [
        "Staff-Auth"
      ],
      "post": {
        "summary": "Revoke an OAuth token",
        "tags": [
          "STAFF AUTH"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/tokenBody"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "staff_access"
      ]
    },
    "/staff/token/info": {
      "x-product": [
        "Staff-Auth"
      ],
      "get": {
        "summary": "Returns Information about an OAuth Access token.",
        "tags": [
          "STAFF AUTH"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns token information.",
            "schema": {
              "$ref": "#/definitions/tokenInfo"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/authorizationErrorResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "staff_access"
      ]
    },
    "/parking/garages/{centre_id}/summary": {
      "get": {
        "summary": "Retrieve information about parking garages in a specific centre.",
        "description": "Retrieve a summary of details for all parking locations in a specific centre.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the parking garage details with centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "sanfrancisco"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the parking garage summary details.",
            "schema": {
              "$ref": "#/definitions/centreGarageSummaryResponse"
            }
          },
          "404": {
            "description": "Parking garage not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/garages": {
      "post": {
        "summary": "Create a garage.",
        "description": "Request creation of a parking garage from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "garage_data",
            "in": "body",
            "description": "Data to create a parking garage.",
            "schema": {
              "$ref": "#/definitions/garagesCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the parking garage.",
            "schema": {
              "$ref": "#/definitions/garageResponse"
            }
          },
          "422": {
            "description": "Parking garage not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/garages422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "get": {
        "summary": "Retrieve information for garages.",
        "description": "Retrieve detailed information for parking garages.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the parking garage details with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "x-wf-example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the parking garage details.",
            "schema": {
              "$ref": "#/definitions/garagesResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/garages/{garage_id}": {
      "get": {
        "summary": "Retrieve a garage.",
        "description": "Retrieve details about a garage.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "garage_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved garage data",
            "schema": {
              "$ref": "#/definitions/garageResponse"
            }
          },
          "404": {
            "description": "Parking Garage not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a garage.",
        "description": "Request update of parking garage details from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "garage_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "garage_data",
            "in": "body",
            "description": "Data to update a parking garage.",
            "schema": {
              "$ref": "#/definitions/garagesUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the garage."
          },
          "404": {
            "description": "Parking Garage not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Garage not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/garages422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/integrations/swarco/{centre_id}/garages": {
      "post": {
        "consumes": [
          "application/json",
          "text/xml"
        ],
        "summary": "Update a Swarco garage.",
        "description": "Request update of Swarco parking garage details from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the parking garage details with centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "sanfrancisco"
          },
          {
            "name": "garage_data",
            "in": "body",
            "description": "Data to update a parking garage.",
            "schema": {
              "$ref": "#/definitions/swarcoGaragesUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the garage."
          },
          "404": {
            "description": "Parking Garage not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Garage not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/garageIntegration422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/activities": {
      "post": {
        "summary": "Create a parking activity.",
        "description": "Request creation of a parking activity from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "description": "Staff Access Application token",
            "required": true
          },
          {
            "name": "parking_activity_data",
            "in": "body",
            "description": "Data to create a parking activity.",
            "schema": {
              "$ref": "#/definitions/parkingActivityCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the parking activity.",
            "schema": {
              "$ref": "#/definitions/parkingActivityResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Parking activity not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/parkingActivity422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions": {
      "get": {
        "summary": "Retrieve list of parking sessions.",
        "description": "Retrieve all the parking session details for a user with the given person_id.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "person_id",
            "description": "Person identifier. Request all parking sessions for a user with the given person_id.",
            "required": true,
            "type": "string",
            "in": "query",
            "x-wf-example": "WF-ab837187d0a78fe746ec257eb248a361"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Return parking sessions with the given centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "access_device",
            "description": "Access device identifier. Return parking sessions with the given access_device.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "start_date",
            "description": "Return parking sessions on or after a specified date.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "end_date",
            "description": "Return parking sessions on or before a specified date.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "payment_status",
            "description": "status of payment",
            "type": "string",
            "enum": [
              "succeeded",
              "failed",
              "pending",
              "refunded",
              "partial_refunded"
            ],
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "x-wf-example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the parking activity sessions.",
            "schema": {
              "$ref": "#/definitions/parkingActivitySessionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/{parking_session_id}": {
      "get": {
        "summary": "Retrieve information for a single parking session.",
        "description": "Request to retrieve information for a single parking session.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "parking_session_id",
            "description": "Parking session identifier.",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-wf-example": 12
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a single parking session.",
            "schema": {
              "$ref": "#/definitions/parkingSessionResponse"
            }
          },
          "404": {
            "description": "Parking session not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/open": {
      "get": {
        "summary": "Retrieve information of open parking sessions.",
        "description": "Retrieve the most recent open parking activity session details for a user with the given person_id. Open sessions have an entry date but no corresponding exit date.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "person_id",
            "description": "Person identifier. Request the open parking sessions for a user with the given person_id.",
            "required": true,
            "type": "string",
            "in": "query",
            "x-wf-example": "WF-ab837187d0a78fe746ec257eb248a361"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the open parking sessions with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "access_device",
            "description": "Access device identifier. Return open parking sessions with the given access_device.",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the open parking activity sessions.",
            "schema": {
              "$ref": "#/definitions/parkingActivityOpenSessionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/{parking_session_id}/charge": {
      "post": {
        "summary": "Reprocess the charge of a parking session",
        "description": "Reprocess the charge of a parking session",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "parking_session_id",
            "description": "Parking session identifier.",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-wf-example": 12
          },
          {
            "name": "data",
            "in": "body",
            "description": "Data to reprocess the charge of a parking session.",
            "schema": {
              "$ref": "#/definitions/parkingSessionChargeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reprocessed the charge.",
            "schema": {
              "$ref": "#/definitions/parkingSessionTransactionResponse"
            }
          },
          "404": {
            "description": "Parking session not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Parking session not eligible for a charge.",
            "schema": {
              "$ref": "#/definitions/parkingSessionTransaction422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/{parking_session_id}/refund": {
      "post": {
        "summary": "Refund a parking session charge.",
        "description": "Refund a parking session charge.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "parking_session_id",
            "description": "Parking session identifier.",
            "in": "path",
            "required": true,
            "type": "integer",
            "x-wf-example": 12
          },
          {
            "name": "data",
            "in": "body",
            "description": "Data to process the refund of a parking session.",
            "schema": {
              "$ref": "#/definitions/parkingSessionRefundBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refunded the charge.",
            "schema": {
              "$ref": "#/definitions/parkingSessionTransactionResponse"
            }
          },
          "404": {
            "description": "Parking session not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Parking session not eligible for a refund.",
            "schema": {
              "$ref": "#/definitions/parkingSessionTransaction422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/summary": {
      "get": {
        "summary": "Retrieve a summary for each month of received access device and person id on a given center.",
        "description": "Retrieve a summary for each month of received access device and person id on a given center.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "access_device",
            "description": "Access device identifier.",
            "required": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier.",
            "required": true,
            "type": "string",
            "in": "query"
          },
          {
            "name": "person_id",
            "description": "Person identifier.",
            "required": true,
            "type": "string",
            "in": "query",
            "x-wf-example": "WF-ab837187d0a78fe746ec257eb248a361"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 5,
            "maximum": 12,
            "x-wf-example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the summary.",
            "schema": {
              "$ref": "#/definitions/parkingSessionSummaryResponse"
            }
          },
          "422": {
            "description": "Missing required parameters.",
            "schema": {
              "$ref": "#/definitions/parkingSessionSummary422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/operators": {
      "post": {
        "summary": "Create a Car Park Business Operator.",
        "description": "Request creation of a Car Park Business Operator from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "parking_operator_data",
            "in": "body",
            "description": "Data to create a Car Park Business Operator.",
            "schema": {
              "$ref": "#/definitions/parkingOperatorCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the Car Park Business Operator.",
            "schema": {
              "$ref": "#/definitions/parkingOperatorResponse"
            }
          },
          "422": {
            "description": "Car Park Business operator not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/parkingOperator422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "get": {
        "summary": "List all Car Park Business Operators.",
        "description": "Request an array of Car Park Business Operators.",
        "tags": [
          "PARKING"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of Car Park Business Operators.",
            "schema": {
              "$ref": "#/definitions/parkingOperatorListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/operators/{centre_id}": {
      "get": {
        "summary": "Retrieve information for a Car Park Business Operator.",
        "description": "Retrieve all the details for a Car Park Business Operator with the given centre_id.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the Car Park Business Operator with centre_id.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "sanfrancisco"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Car Park Business Operator details.",
            "schema": {
              "$ref": "#/definitions/parkingOperatorResponse"
            }
          },
          "404": {
            "description": "Car Park Business Operator not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a Car Park Business Operator.",
        "description": "Request update of a Car Park Business Operator from JSON data in the request body.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Update the Car Park Business Operator with centre_id.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "sanfrancisco"
          },
          {
            "name": "parking_operator_data",
            "in": "body",
            "description": "Data to update a Car Park Business Operator.",
            "schema": {
              "$ref": "#/definitions/parkingOperatorUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the Car Park Business Operator."
          },
          "404": {
            "description": "Car Park Business Operator not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Car Park Business Operator not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/parkingOperator422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a Car Park Business Operator.",
        "description": "Request deletion of a Car Park Business Operator.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier. Request to delete the Car Park Business Operator with centre_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the Car Park Business Operator."
          },
          "404": {
            "description": "Car Park Business Operator not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/parking/sessions/invoice": {
      "get": {
        "summary": "Retrieve invoice information for a user.",
        "description": "Retrieve all the information necessary to generate a tax invoice for a user.",
        "tags": [
          "PARKING"
        ],
        "parameters": [
          {
            "name": "access_device",
            "description": "Access device identifier. Request the parking invoice details for a vehicle with the given access_device identifier.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the parking invoice details with centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "person_id",
            "description": "Person identifier. Request the parking invoice details for a user with the given person_id.",
            "required": true,
            "type": "string",
            "in": "query",
            "x-wf-example": "WF-ab837187d0a78fe746ec257eb248a361"
          },
          {
            "name": "start_date",
            "description": "Request the parking invoice details on or after a specified date.",
            "required": true,
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "end_date",
            "description": "Request the parking invoice details on or before a specified date.",
            "required": true,
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the parking invoice information.",
            "schema": {
              "$ref": "#/definitions/parkingActivityInvoiceResponse"
            }
          },
          "422": {
            "description": "Parking invoice information not returned. Returns an array of error messages explaining the problems with the provided parameters.",
            "schema": {
              "$ref": "#/definitions/parkingInvoice422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Parking"
      ],
      "x-services": [
        "parking"
      ]
    },
    "/payments/gateways": {
      "get": {
        "summary": "List gateways.",
        "description": "Request an array of gateways.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "name,token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of gateways.",
            "schema": {
              "$ref": "#/definitions/gatewaysListResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a gateway.",
        "description": "Request creation of a gateway from JSON data in the request body.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "gateway_data",
            "in": "body",
            "description": "Data to create a gateway.",
            "schema": {
              "$ref": "#/definitions/gatewayCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the gateway.",
            "schema": {
              "$ref": "#/definitions/gatewayResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created gateway.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "422": {
            "description": "Gateway not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/gateway422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/gateways/{gateway_id}": {
      "get": {
        "summary": "Retrieve a gateway.",
        "description": "Request the details of a gateway.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "Gateway identifier.",
            "type": "integer",
            "required": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "token,name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual gateway.",
            "schema": {
              "$ref": "#/definitions/gatewayResponse"
            }
          },
          "404": {
            "description": "Gateway not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a gateway.",
        "description": "Request update of a gateway from JSON data in the request body.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "gateway_data",
            "in": "body",
            "description": "Data to update a gateway.",
            "schema": {
              "$ref": "#/definitions/gatewayUpdateBody"
            },
            "required": true
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "Gateway identifier.",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the gateway."
          },
          "404": {
            "description": "Gateway not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "422": {
            "description": "Gateway not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/gateway422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a gateway.",
        "description": "Request deletion of a gateway.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "Gateway identifier.",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the gateway."
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "404": {
            "description": "Gateway not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/merchants": {
      "get": {
        "summary": "List merchants.",
        "description": "Request an array of merchants.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "merchant_id,name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of merchants.",
            "schema": {
              "$ref": "#/definitions/merchantsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a merchant.",
        "description": "Request creation of a merchant from JSON data in the request body.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "merchant_data",
            "in": "body",
            "description": "Data to create a merchant.",
            "schema": {
              "$ref": "#/definitions/merchantCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the merchant.",
            "schema": {
              "$ref": "#/definitions/merchantResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created merchant.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "422": {
            "description": "Merchant not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/merchant422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/merchants/{merchant_id}": {
      "get": {
        "summary": "Retrieve a merchant.",
        "description": "Request the details of a merchant.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "merchant_id",
            "in": "path",
            "description": "Merchant identifier.",
            "type": "integer",
            "required": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "merchant_id,name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual merchant.",
            "schema": {
              "$ref": "#/definitions/merchantResponse"
            }
          },
          "404": {
            "description": "Merchant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a merchant.",
        "description": "Request update of a merchant from JSON data in the request body.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "merchant_data",
            "in": "body",
            "description": "Data to update a merchant.",
            "schema": {
              "$ref": "#/definitions/merchantUpdateBody"
            },
            "required": true
          },
          {
            "name": "merchant_id",
            "in": "path",
            "description": "Merchant identifier.",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the merchant."
          },
          "404": {
            "description": "Merchant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "422": {
            "description": "Merchant not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/merchant422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a merchant.",
        "description": "Request deletion of a merchant.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "merchant_id",
            "in": "path",
            "description": "Merchant identifier.",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the merchant."
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "404": {
            "description": "Merchant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/stripe_merchants/{stripe_account_id}": {
      "get": {
        "summary": "Retrieve a Stripe merchant.",
        "description": "Request the details of a Stripe merchant.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "stripe_account_id",
            "in": "path",
            "description": "Stripe Merchant identifier.",
            "type": "integer",
            "required": true,
            "x-wf-example": "acct_18SKdpZnTeQjLHt"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "merchant_id,name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual merchant.",
            "schema": {
              "$ref": "#/definitions/merchantResponse"
            }
          },
          "404": {
            "description": "Merchant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a Stripe Merchant.",
        "description": "Request update of a Stripe Merchant from JSON data in the request body.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "merchant_data",
            "in": "body",
            "description": "Data to update a merchant.",
            "schema": {
              "$ref": "#/definitions/merchantUpdateBody"
            },
            "required": true
          },
          {
            "name": "stripe_account_id",
            "in": "path",
            "description": "Stripe Merchant identifier.",
            "type": "integer",
            "required": true,
            "x-wf-example": "acct_18SKdpZnTeQjLHt"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the merchant."
          },
          "404": {
            "description": "Merchant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/payment401Response"
            }
          },
          "422": {
            "description": "Merchant not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/merchant422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/payment_methods/{payment_method_token}": {
      "get": {
        "summary": "Retrieve a payment method.",
        "description": "Request the details of a payment method.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Payment method token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual payment method.",
            "schema": {
              "$ref": "#/definitions/paymentMethodResponse"
            }
          },
          "404": {
            "description": "Payment method not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update payment method details.",
        "description": "Request an update of the details associated with a payment method.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Payment method token.",
            "type": "string",
            "required": true
          },
          {
            "name": "payment_method_data",
            "description": "Data to update the details associated with a payment method.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/paymentMethodUpdateBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the payment method details."
          },
          "404": {
            "description": "Payment method not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Update request not processed. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/payment422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Redact a payment method.",
        "description": "Request a redaction of a payment method. Redacting a payment method does not delete it. Its transaction history is maintained as your permanent record . However, all sensitive information (e.g. PAN, CVV) is removed immediately and permanently. A redacted payment method can no longer be used for transactions since the account information will have been disposed of.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Payment method token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully redacted the payment method."
          },
          "404": {
            "description": "Payment method not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/payment_methods/{payment_method_token}/verify": {
      "post": {
        "summary": "Verify and retain a payment method.",
        "description": "Request verification of a payment method checking if it is in good standing. This call will also retain the payment method",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Payment method token.",
            "type": "string",
            "required": true
          },
          {
            "name": "verify_data",
            "in": "body",
            "description": "Data to verify and retain a payment method.",
            "schema": {
              "$ref": "#/definitions/verifyPaymentMethodBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification request processed with success",
            "schema": {
              "$ref": "#/definitions/paymentMethodVerificationResponse"
            }
          },
          "422": {
            "description": "Verification request not processed. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/payment422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/purchase": {
      "post": {
        "summary": "Charge a payment method.",
        "description": "Request the purchase of a payment method from JSON data in the request body. This transaction is used to authorize and capture a payment amount.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_data",
            "in": "body",
            "description": "Data to create a purchase transaction.",
            "schema": {
              "$ref": "#/definitions/transactionAuthorizeOrPurchaseBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the purchase transaction.",
            "schema": {
              "$ref": "#/definitions/transactionResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created transaction.",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Transaction not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/transaction422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/authorize": {
      "post": {
        "summary": "Authorize a payment method.",
        "description": "Request the authorization of a payment method from JSON data in the request body. This transaction is used to authorize a payment amount, and such payment method can be subsequently captured or voided in order to complete the transaction.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_data",
            "in": "body",
            "description": "Data to authorize a transaction.",
            "schema": {
              "$ref": "#/definitions/transactionAuthorizeOrPurchaseBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the transaction.",
            "schema": {
              "$ref": "#/definitions/transactionResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created transaction.",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Transaction not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/transaction422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/{transaction_id}/capture": {
      "post": {
        "summary": "Capture a transaction.",
        "description": "Request the capture of funds previously reserved by an authorization.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_capture_data",
            "in": "body",
            "description": "Data to capture a transaction.",
            "schema": {
              "$ref": "#/definitions/transactionCaptureBody"
            }
          },
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Transaction identifier.",
            "type": "string",
            "required": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "transaction_id,ip"
          }
        ],
        "responses": {
          "200": {
            "description": "Capture request processed with success",
            "schema": {
              "$ref": "#/definitions/transactionCaptureResponse"
            }
          },
          "422": {
            "description": "Transaction not processed. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/payment422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/{transaction_id}/void": {
      "post": {
        "summary": "Void a transaction.",
        "description": "Request voiding (canceling) a transaction previously authorized.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Transaction identifier.",
            "type": "string",
            "required": true
          },
          {
            "name": "transaction_void_data",
            "in": "body",
            "description": "Data to void a transaction.",
            "schema": {
              "$ref": "#/definitions/transactionVoidBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Void request processed with success",
            "schema": {
              "$ref": "#/definitions/transactionVoidResponse"
            }
          },
          "422": {
            "description": "Transaction not processed. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/payment422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/{transaction_id}/refund": {
      "post": {
        "summary": "Refund a transaction.",
        "description": "Request the refund of a transaction. A refund is like a void, except it actually reverses a charge instead of just canceling a charge that hasn't yet been made.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Transaction identifier.",
            "type": "string",
            "required": true
          },
          {
            "name": "transaction_refund_data",
            "in": "body",
            "description": "Data to refund a transaction.",
            "schema": {
              "$ref": "#/definitions/transactionRefundBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund request processed with success",
            "schema": {
              "$ref": "#/definitions/transactionRefundResponse"
            }
          },
          "422": {
            "description": "Transaction was not refunded. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/transactionRefund422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/transactions/{transaction_id}": {
      "get": {
        "summary": "Retrieve a transaction.",
        "description": "Request the details of a single transaction.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "description": "Transaction identifier.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual transaction.",
            "schema": {
              "$ref": "#/definitions/transactionResponse"
            }
          },
          "404": {
            "description": "Transaction not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/payments/stripe_events": {
      "post": {
        "summary": "Create a new stripe event in response to a webhook.",
        "description": "Request the creation of a new stripe webhook event.",
        "tags": [
          "PAYMENTS"
        ],
        "parameters": [
          {
            "name": "stripe_event_data",
            "in": "body",
            "description": "Data to create a Stripe event.",
            "schema": {
              "$ref": "#/definitions/stripeEventBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully created the stripe event."
          },
          "422": {
            "description": "Stripe event not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/stripeEvent422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Payments"
      ],
      "x-services": [
        "payment"
      ]
    },
    "/account": {
      "delete": {
        "description": "Request deletion of an account.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the account."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Delete an account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "get": {
        "description": "There are 3 possible ways to specify which account data should be returned. 1) Providing an access token, that will return all data related to the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will return the account details that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will return the account associated with that identifier (only works with partial accounts).",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": false
          },
          {
            "name": "country",
            "in": "query",
            "type": "string",
            "description": "Country code of the account.",
            "minLength": 2,
            "maxLength": 2,
            "required": false,
            "enum": [
              "US",
              "UK",
              "AU",
              "NZ"
            ]
          },
          {
            "name": "email",
            "in": "query",
            "type": "string",
            "description": "Email address of the account",
            "required": false
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "email, first_name"
          },
          {
            "name": "person_id",
            "in": "query",
            "type": "string",
            "description": "Identifier of the account",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved with success",
            "schema": {
              "$ref": "#/definitions/accountResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account with the provided email/country or person_id not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Country parameter missing",
            "schema": {
              "$ref": "#/definitions/people422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve a person account details.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "patch": {
        "description": "There are 3 possible ways to specify which account should be updated. 1) Providing an access token, that will return update the account associated to the token (only works with full accounts). 2) Providing an email address and a country, this way it will update the account that holds that email for the provided country database (only works with partial accounts). 3) Providing a person_id, this way it will update the account associated with that identifier (only works with partial accounts).",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": false
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateAccount"
            }
          },
          {
            "name": "country",
            "in": "query",
            "type": "string",
            "description": "Country code of the account.",
            "minLength": 2,
            "maxLength": 2,
            "required": false,
            "enum": [
              "US",
              "UK",
              "AU",
              "NZ"
            ]
          },
          {
            "name": "email",
            "in": "query",
            "type": "string",
            "description": "Email address of the account",
            "required": false
          },
          {
            "name": "person_id",
            "in": "query",
            "type": "string",
            "description": "Identifier of the account",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Updated with success"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account with the provided email/country or person_id not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/person422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Update a person account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "post": {
        "description": "Create a person account.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created account object",
            "schema": {
              "$ref": "#/definitions/accountResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/person422Response"
            }
          },
          "423": {
            "description": "Resource is locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Create a person account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/apps/{app_id}": {
      "put": {
        "description": "Request upsert of a app from JSON data in request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Application identifier",
            "enum": [
              "westfield_us",
              "westfield_uk",
              "westfield_au",
              "westfield_nz",
              "dine_on_time"
            ]
          },
          {
            "name": "app_data",
            "in": "body",
            "required": true,
            "description": "Data to upsert an application.",
            "schema": {
              "$ref": "#/definitions/accountsAppUpsertBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully created or updated the app."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Required is missing. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/AppUpsert422Response"
            }
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Upsert app.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/apps/{app_id}/devices/{device_token}": {
      "delete": {
        "description": "Request delete of a device",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Application identifier",
            "enum": [
              "westfield_us",
              "westfield_uk",
              "westfield_au",
              "westfield_nz",
              "dine_on_time"
            ]
          },
          {
            "name": "device_token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Device token"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the device."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Device or app not found for a user.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "423": {
            "description": "Resource not deleted because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Delete a device.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "put": {
        "description": "Request upsert of a device from JSON data in request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "app_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Application identifier",
            "enum": [
              "westfield_us",
              "westfield_uk",
              "westfield_au",
              "westfield_nz",
              "dine_on_time"
            ]
          },
          {
            "name": "device_token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Token of device"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Data to upsert a device.",
            "schema": {
              "$ref": "#/definitions/accountsDeviceUpsertBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully created or updated the device."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/DeviceUpsert422Response"
            }
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Upsert device.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/credit_cards": {
      "get": {
        "description": "Request an array of credit cards.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "card_type, payment_method_token"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of user credit cards.",
            "schema": {
              "$ref": "#/definitions/creditCardsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List user credit cards.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "post": {
        "description": "Request adding a credit card to a user account from JSON data in the request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "credit_card_data",
            "in": "body",
            "description": "Data to add a credit card.",
            "schema": {
              "$ref": "#/definitions/creditCardCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added the credit card.",
            "schema": {
              "$ref": "#/definitions/creditCardResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Credit card not added. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/creditCard422Response"
            }
          },
          "423": {
            "description": "Resource not created because of a lock."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Add a credit card to a user account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/credit_cards/{payment_method_token}": {
      "delete": {
        "description": "Request deletion of a credit card.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Credit card identifier. Request to update the credit_card with payment_method_token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the credit card."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Credit card not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "423": {
            "description": "Resource not deleted because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Soft-delete a credit card.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "patch": {
        "description": "Request update of a credit card from JSON data in the request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "credit_card_data",
            "description": "Data to update a credit card.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/creditCardUpdateBody"
            }
          },
          {
            "name": "payment_method_token",
            "in": "path",
            "description": "Credit card identifier. Request to update the credit_card with payment_method_token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the credit card."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Credit card not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Credit card not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/creditCard422Response"
            }
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Update a user credit card.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/interests": {
      "get": {
        "description": "Retrieve account interests. Requires authentication. Retrieving interest list for partial accounts is not supported.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of interests of account.",
            "schema": {
              "$ref": "#/definitions/retrieveInterestsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve account interests.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "post": {
        "description": "Add new interests to account.",
        "parameters": [
          {
            "name": "add_interests_data",
            "in": "body",
            "description": "Data to add interests to account",
            "schema": {
              "$ref": "#/definitions/addInterestsRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the list of interests into account."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Email and country or authenticated person is missing"
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Add new interests to account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "put": {
        "description": "Replace account interests. Requires authentication. Replacing interest list for partial accounts is not supported.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "replace_interests_data",
            "in": "body",
            "description": "Data to replace account interests",
            "schema": {
              "$ref": "#/definitions/replaceInterestsRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced the list of interests of account."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Email and country or authenticated person is missing"
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Replace account interests with new interests.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/kids": {
      "post": {
        "description": "Add new kids to account.",
        "parameters": [
          {
            "name": "add_kids_data",
            "in": "body",
            "description": "Data to add kids to account",
            "schema": {
              "$ref": "#/definitions/addKidsRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added the list of kids into account."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Missing or invalid kid data.",
            "schema": {
              "$ref": "#/definitions/addKids422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Add new kids to account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/newsletters": {
      "get": {
        "description": "Request to get the newsletter subscriptions for the account. Full accounts require a newsletter-access-token to access, partial accounts do not.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of the account (required if person_id is not present).",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country code of the account (required if person_id is not present).",
            "required": false,
            "type": "string"
          },
          {
            "name": "newsletter_access_token",
            "in": "query",
            "description": "Newsletter access token. Token to authorize access to newsletter information",
            "required": false,
            "type": "string"
          },
          {
            "name": "person_id",
            "in": "query",
            "description": "Person Identifier",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved newsletter details.",
            "schema": {
              "$ref": "#/definitions/newslettersSubscribe200Response"
            }
          },
          "401": {
            "description": "The account is full and the given token is not associated with the account",
            "schema": {
              "$ref": "#/definitions/getNewsletters401Response"
            }
          },
          "404": {
            "description": "The account is not found",
            "schema": {
              "$ref": "#/definitions/getNewslettershttp404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Get newsletter subscriptions for the account",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/newsletters/subscribe": {
      "patch": {
        "description": "Request update of newsletter subscriptions and email_marketing_opt_in for account. A newsletter-access-token is required in the request body.",
        "parameters": [
          {
            "name": "newsletter_manage_data",
            "in": "body",
            "description": "Newsletter and account details.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newslettersManageBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated newsletter details for account.",
            "schema": {
              "$ref": "#/definitions/newslettersSubscribe200Response"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Update newsletter details for the account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "post": {
        "description": "Request creation of newsletter subscriptions for account.",
        "parameters": [
          {
            "name": "newsletter_subscribe_data",
            "in": "body",
            "description": "Data to create a newsletter subscription.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newslettersSubscribeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully subscribed account to newsletters.",
            "schema": {
              "$ref": "#/definitions/newslettersSubscribe200Response"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Subscribe to newsletters",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/parking/email_invoice": {
      "post": {
        "description": "Request to send parking invoice email.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "parking_invoice_data",
            "in": "body",
            "description": "Data to send parking invoice email.",
            "schema": {
              "$ref": "#/definitions/parkingInvoiceBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully send parking invoice email."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send parking invoice email.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/parking/history": {
      "get": {
        "description": "Request an array of parking sessions.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Return parking sessions of the given center.",
            "type": "string",
            "default": "london"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "start_date",
            "description": "Return parking history on or after a specified date.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "end_date",
            "description": "Return parking history on or before a specified date.",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "license_plate",
            "description": "Vehicle identifier. Return parking sessions with the given license_plate.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "centre_id,currency"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of parking sessions history.",
            "schema": {
              "$ref": "#/definitions/parkingHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List parking sessions history from a user.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/parking/sessions/summary": {
      "get": {
        "description": "Request an array of parking sessions summary for a license plate.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Return parking sessions summary of the given center.",
            "type": "string",
            "default": "london",
            "required": true
          },
          {
            "name": "license_plate",
            "description": "Vehicle identifier. Return parking sessions summary with the given license_plate.",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 5,
            "maximum": 12,
            "x-wf-example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of parking sessions summary.",
            "schema": {
              "$ref": "#/definitions/accountParkingSessionsSummaryResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List all parking sessions summary for a license plate.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/parking/signup": {
      "post": {
        "description": "Request to signup a user account to parking service.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully signed up a user to parking service."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Account already registered on parking service.",
            "schema": {
              "$ref": "#/definitions/parkingSignup422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Signup a user to parking service.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/password": {
      "patch": {
        "description": "Change account password",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/passwordChangeBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated account password."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Current or new password is invalid.",
            "schema": {
              "$ref": "#/definitions/updatePassword422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Change account password",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/status": {
      "get": {
        "description": "Return the status of account, which can be: [\"full\", \"partial\", \"none\", \"deleted\", \"locked\"].",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "type": "string",
            "description": "Country code of the account.",
            "minLength": 2,
            "maxLength": 2,
            "required": true,
            "enum": [
              "US",
              "UK",
              "AU",
              "NZ"
            ]
          },
          {
            "name": "email",
            "in": "query",
            "type": "string",
            "description": "Email address of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved with success",
            "schema": {
              "$ref": "#/definitions/accountStatusResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve account status",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/upgrade": {
      "post": {
        "description": "Upgrade a partial account to a full account. Needs either a person_id, or an email and country to identify the account to be upgraded.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Data to upgrade an account",
            "schema": {
              "$ref": "#/definitions/upgradeAccountBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Partial account was successfully upgraded to a full account."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Password and password confirmation do not match, or the account is not a partial account.",
            "schema": {
              "$ref": "#/definitions/upgrade422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Upgrade a partial account to a full account",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/vehicles": {
      "get": {
        "description": "Request an array of vehicles.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "created_at, license_plate, name"
          },
          {
            "name": "include_deleted",
            "in": "query",
            "description": "Value is true if deleted vehicles will be included in the response.",
            "type": "boolean",
            "default": false
          },
          {
            "name": "used_for_parking",
            "in": "query",
            "description": "if Value is true return vehicles already used for parking, if false return vehicles not used for parking, if the param is not passed return both. Apply the filter and respect any other passed filter",
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of user vehicles.",
            "schema": {
              "$ref": "#/definitions/accountVehiclesListResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List user vehicles.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "post": {
        "description": "Request adding a vehicle to a user account from JSON data in the request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "vehicle_data",
            "in": "body",
            "description": "Data to add a vehicle.",
            "schema": {
              "$ref": "#/definitions/accountVehicleCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added the vehicle.",
            "schema": {
              "$ref": "#/definitions/accountVehicleCreatedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Vehicle not added. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/accountVehicle422Response"
            }
          },
          "423": {
            "description": "Resource not created because of a lock."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Add a vehicle to a user account.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/account/vehicles/{license_plate}": {
      "delete": {
        "description": "Request deletion of a vehicle.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "license_plate",
            "in": "path",
            "description": "Vehicle identifier. Request to delete the vehicle with license_plate.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 8,
            "pattern": "\\A[A-Z0-9]+\\z"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the vehicle."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "423": {
            "description": "Resource not deleted because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Delete a vehicle.",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "patch": {
        "description": "Request update of a vehicle from JSON data in request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "license_plate",
            "in": "path",
            "description": "Vehicle identifier. Request to update the vehicle with license_plate.",
            "type": "string",
            "required": true,
            "minLength": 4,
            "maxLength": 8,
            "pattern": "\\A[A-Z0-9]+\\z"
          },
          {
            "name": "vehicle_data",
            "in": "body",
            "description": "Data to update a vehicle.",
            "schema": {
              "$ref": "#/definitions/accountVehicleUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the vehicle."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Vehicle not found for a user.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Vehicle not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/accountVehicle422Response"
            }
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Update a vehicle",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people": {
      "get": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "in": "query",
            "name": "query",
            "type": "string",
            "description": "search query",
            "required": true
          },
          {
            "in": "query",
            "name": "owner_id",
            "type": "string",
            "description": "Identifier of the database's owner corporation",
            "required": true,
            "enum": [
              "SG",
              "WF"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "email,first_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts retrieved with success",
            "schema": {
              "$ref": "#/definitions/conciergeAccountResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve accounts",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/analytics": {
      "get": {
        "description": "Get a list of accounts updated since 24 hours ago (or as given in the params) and their corresponding information ",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "owner_id",
            "description": "Owner identifier. Identifier of the database's owner corporation",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "SG",
              "WF"
            ]
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the acounts updated since a specific date and time. ISO-8601 format.",
            "in": "query",
            "required": false,
            "format": "date-time",
            "type": "string"
          },
          {
            "name": "next_page_id",
            "required": false,
            "in": "query",
            "description": "Next page identifier. Retrieves the page associated with this identifier. Takes precedence over updated_since.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of accounts.",
            "schema": {
              "$ref": "#/definitions/getAnalytics200Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Owner identifier is missing or invalid",
            "schema": {
              "$ref": "#/definitions/getAnalytics422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Get a list of accounts and their corresponding information",
        "tags": [
          "INTEGRATIONS"
        ]
      },
      "x-product": [

      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/integrations/edna/accounts": {
      "get": {
        "description": "Get a list of accounts updated since 24 hours ago (or as given in the params) and their corresponding information ",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "owner_id",
            "description": "Owner identifier. Identifier of the database's owner corporation",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "SG",
              "WF"
            ]
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the acounts updated since a specific date and time. ISO-8601 format.",
            "in": "query",
            "required": false,
            "format": "date-time",
            "type": "string"
          },
          {
            "name": "next_page_id",
            "required": false,
            "in": "query",
            "description": "Next page identifier. Retrieves the page associated with this identifier. Takes precedence over updated_since.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of accounts.",
            "schema": {
              "$ref": "#/definitions/getEdna200Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Owner identifier or both next_page_id and datetime are missing",
            "schema": {
              "$ref": "#/definitions/getEdna422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Get a list of accounts and their corresponding information",
        "tags": [
          "INTEGRATIONS"
        ]
      },
      "x-product": [

      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/notification": {
      "post": {
        "description": "Send notifications",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationWithCategoryBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Message published succesfully"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Centre, Person or category identitifer does not exist",
            "schema": {
              "$ref": "#/definitions/notifications422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send notifications",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/notifications/email": {
      "post": {
        "description": "Send a transactional email message",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Message published succesfully"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Centre or Person identitifer does not exist",
            "schema": {
              "$ref": "#/definitions/notifications422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send a transactional email message",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/notifications/push": {
      "post": {
        "description": "Send a push notification",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Message published succesfully"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Centre or Person identitifer does not exist",
            "schema": {
              "$ref": "#/definitions/notifications422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send a push notification",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/notifications/sms": {
      "post": {
        "description": "Send a transactional SMS message",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Message published succesfully"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Centre or Person identitifer does not exist",
            "schema": {
              "$ref": "#/definitions/notifications422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send a transactional SMS message",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/oauth/revoke": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/accountTokenRevokeBody"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Revoke an OAuth token",
        "tags": [
          "PEOPLE AUTH"
        ]
      },
      "x-product": [
        "People-Auth"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/oauth/token": {
      "post": {
        "description": "Generates a token that is needed to manage the user profile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/accountTokenRequestBody"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/accountToken"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "423": {
            "description": "Locked account",
            "schema": {
              "$ref": "#/definitions/lockedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Create OAuth token.",
        "tags": [
          "PEOPLE AUTH"
        ]
      },
      "x-product": [
        "People-Auth"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/oauth/token/info": {
      "get": {
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns token information.",
            "schema": {
              "$ref": "#/definitions/accountTokenInfo"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Returns Information about an OAuth Access token.",
        "tags": [
          "PEOPLE AUTH"
        ]
      },
      "x-product": [
        "People-Auth"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/parking": {
      "get": {
        "description": "Request an array of accounts registered on parking service.",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "required": true,
            "default": "US",
            "type": "string",
            "description": "Country code of the account.",
            "minLength": 2,
            "maxLength": 2,
            "enum": [
              "US",
              "UK",
              "AU",
              "NZ"
            ]
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "Updated since. Request the accounts updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 100,
            "x-wf-example": 25
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "email,first_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of account registered on parking service.",
            "schema": {
              "$ref": "#/definitions/parkingAccountsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List accounts registered on parking service.",
        "tags": [
          "INTEGRATIONS"
        ]
      },
      "x-product": [

      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/password_resets": {
      "post": {
        "description": "Initiate an account password reset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initiatePasswordResetBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reset password flow initiated with success"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "404": {
            "description": "Account with the provided email not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Country parameter missing",
            "schema": {
              "$ref": "#/definitions/resetPassword422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Initiate an account password reset",
        "tags": [
          "PEOPLE CONSUMER",
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "People",
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/password_resets/{token}": {
      "put": {
        "description": "Reset account password",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updatePasswordResetBody"
            }
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Password reset token.",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully reset account password."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "422": {
            "description": "Current or new password is invalid.",
            "schema": {
              "$ref": "#/definitions/resetPassword422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Reset account password",
        "tags": [
          "PEOPLE CONSUMER"
        ]
      },
      "x-product": [
        "People"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/tickets/feedback": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ticket"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ticket created"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/ticket422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Create a feedback ticket",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/tickets/support": {
      "post": {
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ticket"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ticket created"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/ticket422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Create a support ticket",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}": {
      "get": {
        "description": "Retrieve a person account details.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved with success",
            "schema": {
              "$ref": "#/definitions/accountResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve a person account details.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "patch": {
        "description": "Update a account.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/conciergeUpdateAccount"
            }
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Updated with success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/person422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Update a person account.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/credit_cards": {
      "get": {
        "description": "Retrieve an account credit cards.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of account credit cards.",
            "schema": {
              "$ref": "#/definitions/creditCardsListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve a person account credit cards.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/food/history": {
      "get": {
        "description": "Request an array of food ordering activities.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of food ordering activities history.",
            "schema": {
              "$ref": "#/definitions/foodHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List food ordering activities history from a user.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/food/orders/{food_order_id}": {
      "get": {
        "description": "Request to retrieve food order.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "food_order_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the order",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the order.",
            "schema": {
              "$ref": "#/definitions/foodOrderResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Order not found with the given id",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve food order by id.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/food/orders/{food_order_id}/receipt": {
      "post": {
        "description": "Request to send food order receipt email.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "food_order_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the order",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully sent parking invoice email."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send food order receipt email.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/interests": {
      "get": {
        "description": "Retrieve account interests for the given person_id. Requires staff authentication.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of interests of account.",
            "schema": {
              "$ref": "#/definitions/retrieveInterestsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve account interests.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "post": {
        "description": "Replace account interests for the given person_id. Requires staff authentication.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "replace_interests_data",
            "in": "body",
            "description": "Data to replace account interests",
            "schema": {
              "$ref": "#/definitions/replaceInterestsRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced the list of interests of account."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Email and country or authenticated person is missing"
          },
          "423": {
            "description": "Resource not updated because it's locked."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Replace account interests with new interests.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/kids": {
      "get": {
        "description": "Retrieve kids in account for the given person_id. Requires staff authentication.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of kids of account.",
            "schema": {
              "$ref": "#/definitions/peopleRetrieveKidsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve kids in account.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "put": {
        "description": "Replace kids in account for the given person_id. Requires staff authentication.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "replace_kids_data",
            "in": "body",
            "description": "Data to replace account kids",
            "schema": {
              "$ref": "#/definitions/replaceKidsRequest"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced the list of kids in account.",
            "schema": {
              "$ref": "#/definitions/peopleRetrieveKidsResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Account not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Invalid kids data, or maximum number of kids reached.",
            "schema": {
              "$ref": "#/definitions/addKids422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Replace kids in account.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/parking/history": {
      "get": {
        "description": "Request an array of parking sessions.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff Access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Return parking sessions of the given center.",
            "type": "string",
            "default": "london"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "start_date",
            "description": "Return parking history on or after a specified date.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "end_date",
            "description": "Return parking history on or before a specified date.",
            "type": "string",
            "format": "date",
            "in": "query"
          },
          {
            "name": "license_plate",
            "description": "Vehicle identifier. Return parking sessions with the given license_plate.",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of parking sessions history.",
            "schema": {
              "$ref": "#/definitions/parkingHistoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "List parking sessions history from a user.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/parking/invoice": {
      "post": {
        "description": "Request to send parking invoice email.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "invoice_body",
            "in": "body",
            "description": "Data to send parking invoice email.",
            "schema": {
              "$ref": "#/definitions/parkingInvoiceBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully sent parking invoice email."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send parking invoice email.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/parking/receipt": {
      "post": {
        "description": "Request to send parking receipt email.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "receipt_body",
            "in": "body",
            "description": "Data to send parking receipt email.",
            "schema": {
              "$ref": "#/definitions/parkingReceiptBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully sent parking invoice email."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Session identifier is invalid",
            "schema": {
              "$ref": "#/definitions/invalidSessionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Send parking receipt email.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/parking/refund": {
      "post": {
        "description": "Request to refund a parking session charge.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "description": "Data to refund the parking session.",
            "schema": {
              "$ref": "#/definitions/parkingRefundBody"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction processed with success. This doesn't mean that the refund was done.",
            "schema": {
              "$ref": "#/definitions/parkingRefundResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Parking session not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Parking session identifier is invalid",
            "schema": {
              "$ref": "#/definitions/invalidSessionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Refund a parking session.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/vehicles": {
      "get": {
        "description": "Retrieve all vehicles from a person.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff access token",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved with success",
            "schema": {
              "$ref": "#/definitions/accountVehiclesListResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Retrieve all vehicles from a person.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "post": {
        "description": "Request adding a vehicle to a user account from JSON data in the request body.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff access token",
            "type": "string",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "vehicle_data",
            "in": "body",
            "description": "Data to add a vehicle.",
            "schema": {
              "$ref": "#/definitions/accountVehicleCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added the vehicle.",
            "schema": {
              "$ref": "#/definitions/accountVehicleCreatedResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/person400Response"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "422": {
            "description": "Vehicle not added. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/accountVehicle422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Add a vehicle to a user account.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/people/{person_id}/vehicles/{license_plate}": {
      "delete": {
        "description": "Request deletion of a vehicle.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Staff access token.",
            "type": "string",
            "required": true
          },
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Identifier of the account",
            "required": true
          },
          {
            "name": "license_plate",
            "in": "path",
            "description": "Vehicle identifier. Request to delete the vehicle with license_plate.",
            "required": true,
            "type": "string",
            "minLength": 4,
            "maxLength": 8,
            "pattern": "\\A[A-Z0-9]+\\z"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the vehicle."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ],
        "summary": "Delete a vehicle.",
        "tags": [
          "PEOPLE MANAGEMENT"
        ]
      },
      "x-product": [
        "Staff"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "/favorites": {
      "get": {
        "summary": "Retrieve the favorite items.",
        "description": "Retrieve the favorite items.",
        "tags": [
          "WISHLISTS"
        ],
        "parameters": [
          {
            "name": "kinds",
            "in": "query",
            "description": "Filter which kind of items should be returned",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "product",
                "deal",
                "event",
                "retailer"
              ]
            },
            "required": false,
            "collectionFormat": "csv"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number that must be returned",
            "type": "integer",
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items that should be returned per page",
            "type": "integer",
            "required": false
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the wishlist of favorite products.",
            "schema": {
              "$ref": "#/definitions/favoritesResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Favorites"
      ],
      "x-services": [
        "wishlist"
      ]
    },
    "/favorites/items": {
      "post": {
        "summary": "Add an item to the favorites list.",
        "description": "Add an item to the favorites list.",
        "tags": [
          "WISHLISTS"
        ],
        "parameters": [
          {
            "name": "wishlist_item_data",
            "in": "body",
            "description": "Data to create a wishlist item.",
            "schema": {
              "$ref": "#/definitions/wishlistItemCreateBody"
            },
            "required": true
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Wishlist item already created.",
            "schema": {
              "$ref": "#/definitions/wishlistItemResponse"
            }
          },
          "201": {
            "description": "Successfully created the wishlist item.",
            "schema": {
              "$ref": "#/definitions/wishlistItemResponse"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Wishlist item not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/wishlistItem422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Favorites"
      ],
      "x-services": [
        "wishlist"
      ]
    },
    "/favorites/items/{kind}/{resource_id}": {
      "delete": {
        "summary": "Delete an item from the favorites list.",
        "description": "Delete an item from the favorites list.",
        "tags": [
          "WISHLISTS"
        ],
        "parameters": [
          {
            "name": "kind",
            "in": "path",
            "type": "string",
            "description": "Wishlist item's external resource kind.",
            "required": true,
            "enum": [
              "product",
              "deal",
              "event",
              "retailer"
            ]
          },
          {
            "name": "resource_id",
            "in": "path",
            "type": "string",
            "description": "Wishlist item's external resource identifier.",
            "required": true
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the wishlist item.",
            "schema": {
              "$ref": "#/definitions/wishlistItemResponse"
            }
          },
          "404": {
            "description": "Resource not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Favorites"
      ],
      "x-services": [
        "wishlist"
      ]
    },
    "/favorites/items/bulk": {
      "post": {
        "summary": "Add an array of items to be created.",
        "description": "Add an array of items to be created.",
        "tags": [
          "WISHLISTS"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/wishlistItemListCreateBody"
            },
            "required": true
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Access token",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Items enqueued to be created."
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/unauthorizedResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Favorites"
      ],
      "x-services": [
        "wishlist"
      ]
    },
    "/favorites/{person_id}": {
      "delete": {
        "summary": "Delete all data for a specific user.",
        "description": "Delete all data for a specific user.",
        "tags": [
          "WISHLISTS"
        ],
        "parameters": [
          {
            "name": "person_id",
            "in": "path",
            "type": "string",
            "description": "Person identifier.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted all data from a user."
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Favorites"
      ],
      "x-services": [
        "wishlist"
      ]
    }
  },
  "definitions": {
    "metaResponse": {
      "type": "object",
      "description": "Response metadata.",
      "required": [
        "api_version",
        "deprecation_information"
      ],
      "additionalProperties": false,
      "properties": {
        "api_version": {
          "description": "API version. Version number for the API.",
          "type": "string",
          "example": "1"
        },
        "deprecation_information": {
          "description": "End-of-life information about the deprecation of the endpoint. If this has content you must act on it.",
          "$ref": "#/definitions/deprecationInformation"
        },
        "page": {
          "description": "Current page number.",
          "type": "integer",
          "example": 1
        },
        "page_count": {
          "description": "Total number of pages.",
          "type": "integer",
          "example": 10
        },
        "per_page": {
          "description": "Number of results per page.",
          "type": "integer",
          "example": 25
        },
        "total": {
          "description": "Total number of results for all pages.",
          "type": "integer",
          "example": 100
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "deprecationInformation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "deprecated_at": {
          "description": "Date-time this endpoint is deprecated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "goes_away_at": {
          "description": "Date-time this endpoint is retired and unavailable.",
          "type": "string",
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "more_info": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http404Error": {
      "type": "object",
      "description": "List of resources not found.",
      "required": [
        "resource"
      ],
      "additionalProperties": false,
      "properties": {
        "resource": {
          "description": "List of resources not found.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http404Response": {
      "type": "object",
      "description": "Not Found.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of resources not found.",
          "$ref": "#/definitions/http404Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "emptyObject": {
      "type": "object",
      "additionalProperties": false,
      "description": "Empty object.",
      "x-services": [
        "shared"
      ]
    },
    "centreLink": {
      "type": "object",
      "description": "Link and identifier for a centre.",
      "required": [
        "centre_id",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this deal is related to. Lowercase code name for a specific centre."
        },
        "href": {
          "type": "string",
          "description": "Link to retrieve a centre.",
          "example": "https://api.westfield.io/centres/sydney"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "genericLink": {
      "type": "object",
      "description": "Link to a resource (image, service, etc.).",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Link to a resource.",
          "example": "https://api.westfield.io/centres/sanfrancisco"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "validationError": {
      "description": "List of errors with this attribute.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-services": [
        "shared"
      ]
    },
    "baseValidationErrorDetails": {
      "type": "object",
      "description": "An error that does not apply to an attribute.",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description. Describes an error that does not apply to an attribute.",
          "type": "string"
        },
        "params": {
          "description": "Supplied parameters.",
          "type": "object"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "retailerLinks": {
      "type": "object",
      "description": "Links associated with a retailer.",
      "required": [
        "logo",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "logo": {
          "description": "Link to retailer logo.",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Link to retailer.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "location": {
      "type": "object",
      "description": "Location identifiers and metadata.",
      "required": [
        "level_description",
        "level_id",
        "level_name",
        "location_id",
        "name",
        "primary"
      ],
      "additionalProperties": false,
      "properties": {
        "level_description": {
          "type": "string",
          "description": "Level description."
        },
        "level_id": {
          "type": "string",
          "description": "Level identifier."
        },
        "level_name": {
          "type": "string",
          "description": "Level name.",
          "example": "Floor 1"
        },
        "location_id": {
          "type": "string",
          "description": "Location identifier."
        },
        "name": {
          "type": "string",
          "description": "Location name."
        },
        "primary": {
          "type": "boolean",
          "description": "Primary location. Location is the primary (true) or not primary (false)."
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "authorizationErrorResponse": {
      "type": "object",
      "required": [
        "error",
        "error_description"
      ],
      "additionalProperties": false,
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "tokenRequestBody": {
      "description": "Account-token request parameters.",
      "required": [
        "grant_type"
      ],
      "properties": {
        "grant_type": {
          "type": "string",
          "enum": [
            "client_credentials",
            "password",
            "authorization_code"
          ],
          "description": "Grant Type"
        },
        "client_id": {
          "type": "string",
          "description": "OAuth client identifier"
        },
        "client_secret": {
          "type": "string",
          "description": "OAuth client secret"
        },
        "username": {
          "type": "string",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "description": "Password"
        },
        "redirect_uri": {
          "type": "string",
          "description": "The redirect_uri specified when registering the app and in the /authorize call (must match exactly)."
        },
        "code": {
          "type": "string",
          "description": "The code parameter returned by the /authorize step."
        },
        "scope": {
          "type": "string",
          "description": "OAuth Scope"
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "tokenBody": {
      "description": "Token parameter",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "description": "Access token"
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "token": {
      "required": [
        "access_token",
        "token_type",
        "expires_in"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Access token"
        },
        "refresh_token": {
          "type": "string",
          "description": "Refresh Token"
        },
        "token_type": {
          "type": "string",
          "description": "Token Type",
          "default": "bearer"
        },
        "expires_in": {
          "type": "integer",
          "description": "Token TTL",
          "default": 28800
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime that the token was created in Unix Timestamp format"
        },
        "scope": {
          "type": "string",
          "description": "OAuth scope"
        }
      },
      "description": "Token",
      "x-services": [
        "staff_access"
      ]
    },
    "tokenInfo": {
      "properties": {
        "scopes": {
          "type": "array",
          "description": "OAuth Scopes",
          "items": {
            "type": "string"
          }
        },
        "expires_in_seconds": {
          "type": "integer",
          "description": "Token TTL"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime that the token was created"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "DateTime that the token will expires Unix Timestamp format"
        },
        "session_id": {
          "type": "string",
          "description": "SSO Session identifier"
        },
        "uuid": {
          "type": "string",
          "description": "UUID for the account"
        },
        "application": {
          "$ref": "#/definitions/application"
        },
        "resource_owner": {
          "type": "object"
        }
      },
      "description": "Token Info",
      "x-services": [
        "staff_access"
      ]
    },
    "application": {
      "required": [
        "client_id",
        "name"
      ],
      "properties": {
        "client_id": {
          "type": "string",
          "description": "OAuth Client identifier."
        },
        "name": {
          "type": "string",
          "description": "Application name"
        }
      },
      "description": "Application",
      "x-services": [
        "staff_access"
      ]
    },
    "staff": {
      "required": [
        "id",
        "uuid",
        "okta_id",
        "first_name",
        "last_name",
        "email"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Internal staff identifier"
        },
        "uuid": {
          "type": "string",
          "description": "Westfield staff UUID"
        },
        "okta_id": {
          "type": "string",
          "description": "Okta staff identifier"
        },
        "first_name": {
          "type": "string",
          "description": "First Name"
        },
        "last_name": {
          "type": "string",
          "description": "Last Name"
        },
        "country": {
          "type": "string",
          "description": "Country"
        },
        "email": {
          "type": "string",
          "description": "Email address"
        },
        "confirmation_token": {
          "type": "string",
          "description": "Confirmation token string"
        },
        "confirmed_at": {
          "type": "string",
          "description": "DateTime that the staff was confirmed"
        },
        "updated_at": {
          "type": "string",
          "description": "DateTime that the staff last updated"
        },
        "created_at": {
          "type": "string",
          "description": "DateTime that the staff was created"
        },
        "roles": {
          "type": "array",
          "description": "Roles",
          "items": {
            "$ref": "#/definitions/staffRole"
          }
        },
        "metadata": {
          "description": "Metadata snapshot from the User Metadata Service",
          "$ref": "#/definitions/metadata"
        },
        "disabled_at": {
          "type": "string",
          "description": "DateTime that the staff was disabled"
        }
      },
      "description": "Staff",
      "x-services": [
        "staff_access"
      ]
    },
    "staffRole": {
      "required": [
        "type",
        "access_attributes"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "access_attributes": {
          "description": "Access Attributes",
          "$ref": "#/definitions/accessAttribute"
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "accessAttribute": {
      "properties": {
        "centres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Centres array. (Only for centre role)"
        },
        "retailer_id": {
          "type": "integer",
          "description": "Retailer identifier. (Only Retailer role)"
        }
      },
      "description": "Access Attributes",
      "x-services": [
        "staff_access"
      ]
    },
    "metadata": {
      "description": "One or more key value pairs describing a specific UUID.",
      "x-services": [
        "staff_access"
      ]
    },
    "staff401Response": {
      "type": "object",
      "description": "Unauthorized.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/staff401Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "staff401Error": {
      "type": "object",
      "description": "Unauthorized.",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x_api_secret": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "staff_access"
      ]
    },
    "http401Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "http401Response": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/http401Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityCreateBody": {
      "type": "object",
      "description": "Data to create a parking activity.",
      "required": [
        "access_device",
        "activity_at",
        "activity_type",
        "centre_id",
        "currency",
        "payment_method_token",
        "person_id",
        "transaction_discount_amount",
        "transaction_final_amount",
        "transaction_id",
        "transaction_original_amount",
        "transaction_surcharge_amount",
        "transaction_tax_amount",
        "vendor_transaction_id"
      ],
      "additionalProperties": false,
      "properties": {
        "access_device": {
          "description": "Device used to access the carpark.",
          "type": "string",
          "example": "BDV09X"
        },
        "activity_type": {
          "description": "Type of parking activity.",
          "type": "string",
          "x-wf-example": "registration",
          "enum": [
            "registration",
            "parking_entry",
            "parking_exit",
            "sms",
            "parking_exit_offline",
            "parking_entry_fail",
            "parking_exit_fail"
          ]
        },
        "activity_at": {
          "description": "Date-time the parking activity took place.",
          "type": "string",
          "format": "date-time"
        },
        "centre_id": {
          "description": "Centre identifier. Identifier to retrieve the centre this parking activity is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']",
          "type": "string"
        },
        "currency": {
          "description": "Currency code for the transaction.",
          "type": "string",
          "x-wf-example": "GBP",
          "enum": [
            "GBP",
            "USD",
            "AUD",
            "NZD"
          ]
        },
        "payment_method_token": {
          "description": "A unique string used to reference and operate against a payment method.",
          "type": "string"
        },
        "person_id": {
          "description": "Person identifier. UUID of the person account related to this parking activity.",
          "type": "string"
        },
        "transaction_discount_amount": {
          "description": "Transaction discount amount.",
          "type": "integer"
        },
        "transaction_final_amount": {
          "description": "Transaction final amount.",
          "type": "integer"
        },
        "transaction_id": {
          "description": "Transaction identifier.",
          "type": "string"
        },
        "transaction_original_amount": {
          "description": "Transaction original amount.",
          "type": "integer"
        },
        "transaction_surcharge_amount": {
          "description": "Transaction surcharge amount.",
          "type": "integer"
        },
        "transaction_tax_amount": {
          "description": "Transaction tax amount.",
          "type": "integer"
        },
        "vendor_transaction_id": {
          "description": "The vendors transaction identifier.",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityInstance": {
      "type": "object",
      "description": "Parking Activity",
      "additionalProperties": false,
      "required": [
        "access_device",
        "activity_at",
        "activity_type",
        "centre_id",
        "currency",
        "parking_activity_id",
        "person_id",
        "transaction_discount_amount",
        "transaction_final_amount",
        "transaction_id",
        "transaction_original_amount",
        "transaction_surcharge_amount",
        "transaction_tax_amount",
        "vendor_transaction_id"
      ],
      "properties": {
        "access_device": {
          "description": "Device used to access the carpark.",
          "type": "string",
          "example": "BDV09X"
        },
        "activity_at": {
          "description": "Date-time the parking activity took place.",
          "type": "string",
          "format": "date-time"
        },
        "activity_type": {
          "description": "Type of parking activity.",
          "type": "string",
          "x-wf-example": "registration",
          "enum": [
            "registration",
            "parking_entry",
            "parking_exit",
            "sms",
            "parking_exit_offline",
            "parking_entry_fail",
            "parking_exit_fail"
          ]
        },
        "centre_id": {
          "description": "Centre identifier. Identifier to retrieve the centre this parking activity is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']",
          "type": "string"
        },
        "currency": {
          "description": "Currency code for the transaction.",
          "type": "string",
          "x-wf-example": "GBP",
          "enum": [
            "GBP",
            "USD",
            "AUD",
            "NZD"
          ]
        },
        "parking_activity_id": {
          "description": "Parking activity identifier.",
          "type": "integer"
        },
        "person_id": {
          "description": "Person identifier. UUID of the person account related to this parking activity.",
          "type": "string"
        },
        "transaction_discount_amount": {
          "description": "Transaction discount amount.",
          "type": "integer"
        },
        "transaction_final_amount": {
          "description": "Transaction final amount.",
          "type": "integer"
        },
        "transaction_id": {
          "description": "Transaction identifier.",
          "type": "string"
        },
        "transaction_original_amount": {
          "description": "Transaction original amount.",
          "type": "integer"
        },
        "transaction_surcharge_amount": {
          "description": "Transaction surcharge amount.",
          "type": "integer"
        },
        "transaction_tax_amount": {
          "description": "Transaction tax amount.",
          "type": "integer"
        },
        "vendor_transaction_id": {
          "description": "The vendors transaction identifier.",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityResponse": {
      "type": "object",
      "description": "Individual parking activity response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parkingActivityInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivity422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingActivity422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionSummary422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingSessionSummary422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionSummary422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "access_device": {
          "$ref": "#/definitions/validationError"
        },
        "person_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivity422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "access_device": {
          "$ref": "#/definitions/validationError"
        },
        "activity_type": {
          "$ref": "#/definitions/validationError"
        },
        "activity_at": {
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "currency": {
          "$ref": "#/definitions/validationError"
        },
        "payment_method_token": {
          "$ref": "#/definitions/validationError"
        },
        "parking_operator": {
          "$ref": "#/definitions/validationError"
        },
        "person_id": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_discount_amount": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_final_amount": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_id": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_original_amount": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_surcharge_amoun": {
          "$ref": "#/definitions/validationError"
        },
        "transaction_tax_amount": {
          "$ref": "#/definitions/validationError"
        },
        "vendor_transaction_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityInvoiceInstance": {
      "type": "object",
      "description": "Parking Activity Invoice",
      "additionalProperties": false,
      "required": [
        "parking_operator",
        "person_id",
        "sessions",
        "transaction_final_amount_sum",
        "transaction_pretax_amount_sum",
        "transaction_tax_amount_sum"
      ],
      "properties": {
        "parking_operator": {
          "description": "The details for the parking operator of the centre associated with this invoice.",
          "$ref": "#/definitions/parkingOperatorInstance"
        },
        "person_id": {
          "description": "Person identifier. UUID of the person account related to this parking invoice.",
          "type": "string"
        },
        "sessions": {
          "description": "The list of parking activity sessions associated with this invoice.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingActivitySessionInstance"
          }
        },
        "transaction_final_amount_sum": {
          "description": "Sum of the transaction final amount in the sessions associated with this invoice.",
          "type": "integer"
        },
        "transaction_pretax_amount_sum": {
          "description": "Sum of the transaction pretax amount in the sessions associated with this invoice.",
          "type": "integer"
        },
        "transaction_tax_amount_sum": {
          "description": "Sum of the transaction tax amount in the sessions associated with this invoice.",
          "type": "integer"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityInvoiceResponse": {
      "type": "object",
      "description": "Parking activity invoice details.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The parking activity invoice details.",
          "$ref": "#/definitions/parkingActivityInvoiceInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingInvoice422ResponseError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "start_date": {
          "$ref": "#/definitions/validationError"
        },
        "end_date": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingInvoice422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingInvoice422ResponseError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivitySessionInstance": {
      "type": "object",
      "description": "Parking Session",
      "additionalProperties": false,
      "required": [
        "access_device",
        "centre_id",
        "entry_at",
        "exit_at",
        "parking_session_id",
        "payment_status",
        "person_id"
      ],
      "properties": {
        "access_device": {
          "description": "Device used to access the carpark for the parking session.",
          "type": "string",
          "example": "BDV09X"
        },
        "centre_id": {
          "description": "The id of the centre where the parking session originated.",
          "type": "string",
          "example": "sanfrancisco"
        },
        "currency": {
          "description": "Currency code for the transaction used in the parking session.",
          "type": "string",
          "x-wf-example": "GBP",
          "enum": [
            "GBP",
            "USD",
            "AUD",
            "NZD"
          ]
        },
        "entry_at": {
          "description": "Entry date-time for the parking session.",
          "type": "string",
          "format": "date-time"
        },
        "exit_at": {
          "description": "Exit date-time for the parking session.",
          "type": "string",
          "format": "date-time"
        },
        "formatted_total_time": {
          "description": "String representing the total amount of time for the parking session.",
          "type": "string",
          "example": "2 HOURS"
        },
        "parking_session_id": {
          "description": "Parking session identifier",
          "type": "integer"
        },
        "payment_method_token": {
          "description": "A unique string to identify the last payment method token used to charge the session.",
          "type": "string"
        },
        "payment_status": {
          "description": "The payment status of this session",
          "type": "string",
          "enum": [
            "succeeded",
            "failed",
            "pending",
            "refunded",
            "partial_refunded"
          ]
        },
        "person_id": {
          "description": "Person identifier. Person that this session belongs to.",
          "type": "string"
        },
        "refunded_amount": {
          "description": "The total amount refunded in cents.",
          "type": "integer"
        },
        "refunds": {
          "description": "List of refunds related to the session.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingSessionTransactionInstance"
          }
        },
        "total_time": {
          "description": "The total amount of time (in seconds) for the parking session.",
          "type": "integer"
        },
        "transaction_final_amount": {
          "description": "The transactions final amount in cents.",
          "type": "integer"
        },
        "transaction_id": {
          "description": "The transaction id of the last processed payment transaction related to the session.",
          "type": "string"
        },
        "transaction_pretax_amount": {
          "description": "transaction_original_amount + transaction_surcharge_amount - transaction_discount_amount",
          "type": "integer"
        },
        "transaction_tax_amount": {
          "description": "The transactions tax amount in cents.",
          "type": "integer"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityOpenSessionInstance": {
      "type": "object",
      "description": "Parking Activity Open Session",
      "additionalProperties": false,
      "required": [
        "access_device",
        "centre_id",
        "entry_at"
      ],
      "properties": {
        "access_device": {
          "description": "Device used to access the carpark for the parking session.",
          "type": "string",
          "example": "BDV09X"
        },
        "centre_id": {
          "description": "The id of the centre where the parking session originated.",
          "type": "string",
          "example": "sanfrancisco"
        },
        "entry_at": {
          "description": "Entry date-time for the parking session.",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivitySessionResponse": {
      "type": "object",
      "description": "Parking activity sessions.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The complete list of parking activity sessions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingActivitySessionInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionResponse": {
      "type": "object",
      "description": "A single parking session.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Data for a single parking session.",
          "type": "object",
          "$ref": "#/definitions/parkingActivitySessionInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingActivityOpenSessionResponse": {
      "type": "object",
      "description": "Parking activity open sessions.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The list of open parking activity sessions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingActivityOpenSessionInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/garages422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionChargeBody": {
      "type": "object",
      "description": "Data to reprocess a parking session charge.",
      "additionalProperties": false,
      "properties": {
        "payment_method_token": {
          "description": "Payment method token to be used. If none is provided, the last used payment method token will be reused.",
          "type": "string"
        },
        "reason": {
          "description": "Reason for the session charge",
          "type": "string"
        },
        "requester_id": {
          "description": "Identifier of the staff user that requested the charge",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionRefundBody": {
      "type": "object",
      "description": "Data to process a parking session refund.",
      "additionalProperties": false,
      "properties": {
        "amount": {
          "description": "Amount to be refunded",
          "type": "integer"
        },
        "reason": {
          "description": "Reason for the session refund",
          "type": "string"
        },
        "requester_id": {
          "description": "Identifier of the staff user that requested the refund",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionTransactionResponse": {
      "type": "object",
      "description": "Parking session transaction.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parkingSessionTransactionInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionTransactionInstance": {
      "type": "object",
      "description": "Parking session transaction",
      "additionalProperties": false,
      "required": [
        "created_at",
        "parking_session_id",
        "status",
        "transaction_id",
        "type"
      ],
      "properties": {
        "amount": {
          "description": "Amount used to process the transaction.",
          "type": "integer"
        },
        "created_at": {
          "description": "Transaction creation date.",
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "description": "Feedback message about the session transaction",
          "type": "string"
        },
        "parking_session_id": {
          "description": "Parking session identifier.",
          "type": "integer"
        },
        "payment_method_token": {
          "description": "Payment method token used to process the transaction.",
          "type": "string"
        },
        "reason": {
          "description": "Reason provided when the transaction was processed.",
          "type": "string"
        },
        "requester_id": {
          "description": "Identifier of the staff person that requested the transaction.",
          "type": "string"
        },
        "status": {
          "description": "The status of this transaction.",
          "type": "string",
          "enum": [
            "succeeded",
            "failed"
          ]
        },
        "transaction_id": {
          "description": "Payments transaction identifier.",
          "type": "string"
        },
        "type": {
          "description": "The type of this transaction.",
          "type": "string",
          "enum": [
            "purchase",
            "refund",
            "partial_refund"
          ]
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionTransaction422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingSessionTransaction422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionTransaction422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperatorCreateBody": {
      "type": "object",
      "description": "Data to create a Car Parking Business Operator.",
      "required": [
        "address",
        "centre_id",
        "merchant_code",
        "name",
        "phone_number",
        "tax_id"
      ],
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "Full address for the Car Parking Business Operator.",
          "type": "string",
          "example": "Westfield London, Ariel Way, London, W12 7Gf, United Kingdom"
        },
        "centre_id": {
          "description": "Identifier of the centre where the Car Parking Business Operator is located.",
          "type": "string",
          "example": "sanfrancisco"
        },
        "merchant_code": {
          "description": "Code used to process payments for this operator.",
          "type": "string",
          "example": "parkiq_london"
        },
        "name": {
          "description": "Name of the Car Parking Business Operator",
          "type": "string",
          "example": "Westfield London"
        },
        "parking_time_bonus": {
          "description": "Bonus time in seconds given to users to avoid complaints about busy service.",
          "type": "integer",
          "example": 180
        },
        "phone_number": {
          "description": "Phone number of the Car Parking Business Operator",
          "type": "string"
        },
        "tax_id": {
          "description": "Tax identifier of the Car Parking Business Operator",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperatorUpdateBody": {
      "type": "object",
      "description": "Data to update a Car Parking Business Operator.",
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "Full address for the Car Parking Business Operator.",
          "type": "string",
          "example": "Westfield London, Ariel Way, London, W12 7Gf, United Kingdom"
        },
        "merchant_code": {
          "description": "Code used to process payments for this operator.",
          "type": "string",
          "example": "parkiq_london"
        },
        "name": {
          "description": "Name of the Car Parking Business Operator",
          "type": "string",
          "example": "Westfield London"
        },
        "parking_time_bonus": {
          "description": "Bonus time in seconds given to users to avoid complaints about busy service.",
          "type": "integer",
          "example": 180
        },
        "phone_number": {
          "description": "Phone number of the Car Parking Business Operator",
          "type": "string"
        },
        "tax_id": {
          "description": "Tax identifier of the Car Parking Business Operator",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperatorInstance": {
      "type": "object",
      "description": "Car Parking Business Operator.",
      "additionalProperties": false,
      "properties": {
        "address": {
          "description": "Full address for the Car Parking Business Operator.",
          "type": "string",
          "example": "Westfield London, Ariel Way, London, W12 7Gf, United Kingdom"
        },
        "centre_id": {
          "description": "Identifier of the centre where the Car Parking Business Operator is located.",
          "type": "string",
          "example": "sanfrancisco"
        },
        "merchant_code": {
          "description": "Code used to process payments for this operator.",
          "type": "string",
          "example": "parkiq_london"
        },
        "name": {
          "description": "Name of the Car Parking Business Operator",
          "type": "string",
          "example": "Westfield London"
        },
        "parking_time_bonus": {
          "description": "Bonus time in seconds given to users to avoid complaints about busy service.",
          "type": "integer",
          "example": 180
        },
        "phone_number": {
          "description": "Phone number of the Car Parking Business Operator",
          "type": "string"
        },
        "tax_id": {
          "description": "Tax identifier of the Car Parking Business Operator",
          "type": "string"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperatorResponse": {
      "type": "object",
      "description": "Individual Car Parking Business Operator response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parkingOperatorInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperatorListResponse": {
      "type": "object",
      "description": "List of Car Park Business Operators.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingOperatorInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperator422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingOperator422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingOperator422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "address": {
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "merchant_code": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "phone_number": {
          "$ref": "#/definitions/validationError"
        },
        "tax_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garageLocation": {
      "type": "object",
      "description": "Data to create a car park.",
      "required": [
        "available",
        "capacity",
        "condition",
        "location",
        "occupied",
        "reserved"
      ],
      "additionalProperties": false,
      "properties": {
        "available": {
          "type": "integer",
          "description": "Total number of available parking spaces for the location."
        },
        "capacity": {
          "type": "integer",
          "description": "Total number of parking spaces for the location."
        },
        "condition": {
          "description": "Condition of the location",
          "type": "string",
          "x-wf-example": "spaces",
          "enum": [
            "spaces",
            "faulty",
            "full",
            "closed"
          ]
        },
        "occupied": {
          "type": "integer",
          "description": "Total number of occupied carpark spots for the centre."
        },
        "reserved": {
          "type": "integer",
          "description": "Total number of reserved carpark spots for the centre."
        },
        "location": {
          "type": "string",
          "description": "Location identifier. Identifier to uniquely identify this particular location in the garage.",
          "x-wf-example": "level-1"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garagesInstance": {
      "type": "object",
      "description": "Parking Garage",
      "additionalProperties": false,
      "required": [
        "available",
        "capacity",
        "centre_id",
        "created_at",
        "garage_id",
        "locations",
        "name",
        "updated_at"
      ],
      "properties": {
        "available": {
          "type": "integer",
          "description": "Total number of available parking spaces for the centre."
        },
        "capacity": {
          "type": "integer",
          "description": "Total number of parking spaces for the centre."
        },
        "centre_id": {
          "description": "Centre identifier. Identifier to retrieve the centre this garage is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']",
          "type": "string"
        },
        "created_at": {
          "description": "Date-time the parking activity took place.",
          "type": "string",
          "format": "date-time"
        },
        "garage_id": {
          "type": "integer",
          "description": "Garage identifier. Identifier to uniquely identify this parking garage."
        },
        "locations": {
          "type": "array",
          "description": "Locations that the garage has.",
          "items": {
            "$ref": "#/definitions/garageLocation"
          }
        },
        "name": {
          "description": "Name of the garage.",
          "type": "string"
        },
        "updated_at": {
          "description": "Date-time the parking activity was updated.",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garages422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "locations": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garages422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/garages422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garageIntegration422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "CARPARKS": {
          "$ref": "#/definitions/validationError"
        },
        "LOCATION": {
          "$ref": "#/definitions/validationError"
        },
        "CARPARK": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garageIntegration422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/garageIntegration422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garagesCreateBody": {
      "type": "object",
      "description": "Data to create a car parks.",
      "required": [
        "centre_id",
        "locations",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/garageLocation"
          },
          "description": "List of carpark spaces available"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this garage is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']"
        },
        "name": {
          "type": "string",
          "description": "Name of the garage."
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "swarcoLocationDetails": {
      "type": "object",
      "description": "Data to create a swarco car park location.",
      "required": [
        "CAPACITY",
        "EMPTY_PLACES",
        "LOCATION",
        "STATUS"
      ],
      "additionalProperties": false,
      "properties": {
        "CAPACITY": {
          "type": "integer",
          "description": "Total number of parking spaces for the location."
        },
        "EMPTY_PLACES": {
          "type": "integer",
          "description": "Total number of available parking spaces for the location."
        },
        "LOCATION": {
          "type": "string",
          "description": "Location identifier. Identifier to uniquely identify this particular location in the garage.",
          "x-example": "level-1"
        },
        "STATUS": {
          "description": "Condition of the location",
          "type": "string",
          "x-example": "spaces",
          "enum": [
            "spaces",
            "faulty",
            "full",
            "closed"
          ]
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "swarcoLocationInstance": {
      "type": "object",
      "description": "Data to update a Swarco car park.",
      "required": [
        "CARPARK"
      ],
      "additionalProperties": false,
      "properties": {
        "CARPARK": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swarcoLocationDetails"
          },
          "description": "List of carpark spaces available"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "swarcoCarparksInstance": {
      "type": "object",
      "description": "Data to update a Swarco car park.",
      "required": [
        "LOCATION"
      ],
      "additionalProperties": false,
      "properties": {
        "LOCATION": {
          "$ref": "#/definitions/swarcoLocationInstance"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "swarcoGaragesUpdateBody": {
      "type": "object",
      "description": "Data to update a Swarco car park.",
      "required": [
        "CARPARKS"
      ],
      "additionalProperties": false,
      "properties": {
        "CARPARKS": {
          "$ref": "#/definitions/swarcoCarparksInstance"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garagesUpdateBody": {
      "type": "object",
      "description": "Data to create a car park.",
      "required": [
        "locations",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/garageLocation"
          },
          "description": "List of carpark spaces available"
        },
        "name": {
          "type": "string",
          "description": "Name of the garage."
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garageResponse": {
      "type": "object",
      "description": "Individual garage response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/garagesInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "centreGarageSummaryInstance": {
      "type": "object",
      "description": "Parking garage summary information.",
      "additionalProperties": false,
      "required": [
        "available",
        "capacity",
        "centre_id",
        "occupied",
        "reserved",
        "updated_at",
        "stale"
      ],
      "properties": {
        "available": {
          "type": "integer",
          "description": "Total number of available carpark spots for the centre."
        },
        "capacity": {
          "type": "integer",
          "description": "Total number of carparks spots for the centre."
        },
        "centre_id": {
          "description": "Centre identifier. Identifier to retrieve the centre this garage is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']",
          "type": "string"
        },
        "occupied": {
          "type": "integer",
          "description": "Total number of occupied carpark spots for the centre."
        },
        "reserved": {
          "type": "integer",
          "description": "Total number of reserved carpark spots for the centre."
        },
        "updated_at": {
          "description": "Date-time the parking garage details were updated.",
          "type": "string",
          "format": "date-time"
        },
        "stale": {
          "description": "Value is true if the last updated date for the parking garage details is older than 15 minutes.",
          "type": "boolean"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionSummaryInstance": {
      "type": "object",
      "description": "Parking session summary information.",
      "additionalProperties": false,
      "required": [
        "year",
        "month",
        "total_cost",
        "total_sessions",
        "currency"
      ],
      "properties": {
        "year": {
          "type": "integer",
          "description": "year of summary."
        },
        "month": {
          "type": "integer",
          "description": "month of summary."
        },
        "total_sessions": {
          "type": "integer",
          "description": "count of sessions of the month."
        },
        "total_cost": {
          "type": "integer",
          "description": "total cost of sessions of the month."
        },
        "currency": {
          "type": "string",
          "description": "Currency code of the session.",
          "enum": [
            "GBP",
            "USD",
            "AUD",
            "NZD"
          ]
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "centreGarageSummaryResponse": {
      "type": "object",
      "description": "Garage summary response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/centreGarageSummaryInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "parkingSessionSummaryResponse": {
      "type": "object",
      "description": "sessions summary response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingSessionSummaryInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "garagesResponse": {
      "type": "object",
      "description": "List garage response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/garagesInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "parking"
      ]
    },
    "payment401Response": {
      "type": "object",
      "description": "Unauthorized.",
      "required": [
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/payment401Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "payment401Error": {
      "type": "object",
      "description": "Unauthorized.",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x_api_secret": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params": {
          "description": "Request parameters.",
          "type": "object",
          "items": {
            "$ref": "#/definitions/paramDetails"
          }
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paramDetails": {
      "type": "object",
      "required": [
        "parameter",
        "value"
      ],
      "additionalProperties": false,
      "properties": {
        "parameter": {
          "description": "Parameter key.",
          "type": "string"
        },
        "value": {
          "description": "Parameter value.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "payment422Error": {
      "type": "object",
      "description": "List of resources not found.",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "payment422Response": {
      "type": "object",
      "description": "Unprocessable (422).",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of errors.",
          "$ref": "#/definitions/payment422Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewayInstance": {
      "type": "object",
      "description": "Gateway details.",
      "required": [
        "created_at",
        "gateway_id",
        "name",
        "token",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "created_at": {
          "description": "Date-time the gateway was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "gateway_id": {
          "description": "Gateway identifier. Identifier to retrieve this gateway.",
          "type": "integer"
        },
        "name": {
          "description": "Name of the gateway.",
          "type": "string"
        },
        "token": {
          "description": "Token used to process transactions on this gateway.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        },
        "updated_at": {
          "description": "Date-time the gateway was last updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewaysListResponse": {
      "type": "object",
      "description": "List gateways response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gatewayInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewayResponse": {
      "type": "object",
      "description": "Individual gateway.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/gatewayInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewayCreateBody": {
      "type": "object",
      "description": "Data to create a gateway.",
      "required": [
        "name",
        "token"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Name of the gateway.",
          "type": "string"
        },
        "token": {
          "description": "Token used to process transactions on this gateway.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gateway422Response": {
      "type": "object",
      "description": "Response for invalid data on create.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/gateway422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gateway422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "token": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewayUpdateBody": {
      "type": "object",
      "description": "Data to update a gateway.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Name of the gateway.",
          "type": "string"
        },
        "token": {
          "description": "Token used to process transactions on this gateway.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "verifyPaymentMethodBody": {
      "type": "object",
      "description": "Data to verify a payment method.",
      "additionalProperties": false,
      "properties": {
        "country": {
          "description": "The country code used to verify the payment method details of the customer. This country code is read-only and cannot be changed",
          "type": "string",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ],
          "default": "US"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchantInstance": {
      "type": "object",
      "description": "Merchant details.",
      "required": [
        "code",
        "created_at",
        "display_name",
        "features",
        "gateway_id",
        "merchant_id",
        "name",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "charge_via_platform": {
          "description": "Value is true if transactions for this merchant are charged on behalf of a connected Stripe account through the platform. Value is false if transactions for this merchant are charged directly on the connected Stripe account.",
          "type": "boolean"
        },
        "code": {
          "description": "Unique code used to process transactions on this merchant.",
          "type": "string"
        },
        "created_at": {
          "description": "Date-time the merchant was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "display_name": {
          "description": "Custom display name which can be assigned to this merchant object.",
          "type": "string"
        },
        "features": {
          "description": "List of features the merchant has. If 'food' is present, the merchant is capable of food purchases.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "food"
            ]
          }
        },
        "gateway_id": {
          "description": "Identifier of the gateway that the merchant is related.",
          "type": "integer"
        },
        "location_descriptor": {
          "description": "Custom location description that may end up on bank statement.",
          "type": "string"
        },
        "merchant_id": {
          "description": "Merchant identifier. Identifier to retrieve this merchant.",
          "type": "integer"
        },
        "name": {
          "description": "Name of the merchant.",
          "type": "string"
        },
        "name_descriptor": {
          "description": "Custom name description that may end up on bank statement.",
          "type": "string"
        },
        "updated_at": {
          "description": "Date-time the merchant was last updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchantsListResponse": {
      "type": "object",
      "description": "List merchants response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/merchantInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchantResponse": {
      "type": "object",
      "description": "Individual merchant.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/merchantInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchantCreateBody": {
      "type": "object",
      "description": "Data to create a merchant.",
      "required": [
        "code",
        "gateway_id",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "Unique code used to process transactions on this merchant.",
          "type": "string"
        },
        "display_name": {
          "description": "Custom display name which can be assigned to this merchant object.",
          "type": "string"
        },
        "features": {
          "description": "List of features the merchant has. If 'food' is present, the merchant is capable of food purchases.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "food"
            ]
          }
        },
        "gateway_id": {
          "description": "Identifier of the gateway that the merchant is related.",
          "type": "integer"
        },
        "location_descriptor": {
          "description": "Custom location description that may end up on bank statement.",
          "type": "string"
        },
        "name": {
          "description": "Name of the merchant.",
          "type": "string"
        },
        "name_descriptor": {
          "description": "Custom name description that may end up on bank statement.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchant422Response": {
      "type": "object",
      "description": "Response for invalid data on create.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/merchant422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchant422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "code": {
          "$ref": "#/definitions/validationError"
        },
        "gateway_id": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "merchantUpdateBody": {
      "type": "object",
      "description": "Data to update a merchant.",
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "Unique code used to process transactions on this merchant.",
          "type": "string"
        },
        "features": {
          "description": "List of features the merchant has. If 'food' is present, the merchant is capable of food purchases.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "food"
            ]
          }
        },
        "gateway_id": {
          "description": "Identifier of the gateway that the merchant is related.",
          "type": "integer"
        },
        "location_descriptor": {
          "description": "Custom location description that may end up on bank statement.",
          "type": "string"
        },
        "name": {
          "description": "Name of the merchant.",
          "type": "string"
        },
        "name_descriptor": {
          "description": "Custom name description that may end up on bank statement.",
          "type": "string"
        },
        "charge_via_platform": {
          "description": "Value is true if transactions for this merchant are charged on behalf of a connected Stripe account through the platform. Value is false if transactions for this merchant are charged directly on the connected Stripe account.",
          "type": "boolean"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodUpdateBody": {
      "type": "object",
      "description": "Data to update the details associated with a payment method.",
      "additionalProperties": false,
      "properties": {
        "country": {
          "description": "The country code used to verify the payment method details of the customer. This country code is read-only and cannot be changed",
          "type": "string",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ],
          "default": "US"
        },
        "first_name": {
          "description": "Customer first name.",
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "description": "Customer last name.",
          "type": "string",
          "example": "Lennon"
        },
        "month": {
          "description": "Expiration month.",
          "type": "integer",
          "example": 7
        },
        "postal_code": {
          "description": "Customer postal code.",
          "type": "string",
          "example": "90210"
        },
        "year": {
          "description": "Expiration year.",
          "type": "integer",
          "example": 2020
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodInstance": {
      "type": "object",
      "description": "Payment method details.",
      "required": [
        "card_type",
        "created_at",
        "data",
        "errors",
        "fingerprint",
        "first_name",
        "first_six_digits",
        "last_four_digits",
        "last_name",
        "month",
        "payment_method_token",
        "payment_method_type",
        "postal_code",
        "year"
      ],
      "additionalProperties": false,
      "properties": {
        "card_type": {
          "description": "Identifier of the card's brand.",
          "type": "string",
          "example": "visa"
        },
        "created_at": {
          "description": "Date-time the payment method was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "data": {
          "description": "Extra data values passed through the gateway.",
          "type": "object"
        },
        "errors": {
          "description": "A list of validation errors from the payment gateway.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fingerprint": {
          "description": "If the payment method is a credit card, the fingerprint of the PAN.",
          "type": "string",
          "example": "6989646136c8d443b39bd67f80dff7772226"
        },
        "first_name": {
          "description": "Customer first name.",
          "type": "string",
          "example": "John"
        },
        "first_six_digits": {
          "description": "First six digits of a credit card.",
          "type": "string",
          "example": "987654"
        },
        "last_four_digits": {
          "description": "Last four digits of a credit card.",
          "type": "string",
          "example": "1234"
        },
        "last_name": {
          "description": "Customer last name.",
          "type": "string",
          "example": "Lennon"
        },
        "month": {
          "description": "Expiration month.",
          "type": "integer",
          "example": 7
        },
        "payment_method_token": {
          "description": "The token identifying the payment method.",
          "type": "string",
          "example": "YFIQBf7V5X8p68jvvBbnsODJaXw"
        },
        "payment_method_type": {
          "description": "Type of payment method, e.g., credit_card, bank_account, apple_pay, paypal.",
          "type": "string",
          "example": "credit_card"
        },
        "postal_code": {
          "description": "Customer postal code.",
          "type": "string",
          "example": "90210"
        },
        "year": {
          "description": "Expiration year.",
          "type": "integer",
          "example": 2020
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodVerificationResponseInstance": {
      "type": "object",
      "description": "Payment verification details.",
      "required": [
        "created_at",
        "avs_code",
        "avs_message",
        "cancelled",
        "cvv_code",
        "cvv_message",
        "error_code",
        "error_detail",
        "fraud_review",
        "message",
        "pending",
        "success",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "created_at": {
          "description": "Date-time the payment method was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "avs_code": {
          "description": "Result code of an Address Verification System (AVS) check.",
          "type": "string",
          "example": "R"
        },
        "avs_message": {
          "description": "Brief description of an Address Verification System (AVS) check.",
          "type": "string",
          "example": "Street address and postal code do not match."
        },
        "cancelled": {
          "description": "Value is true if transaction state is cancelled.",
          "type": "boolean"
        },
        "cvv_code": {
          "description": "Result code of a Card Verification Value check.",
          "type": "string",
          "example": "D"
        },
        "cvv_message": {
          "description": "Brief description of a Card Verification Value check.",
          "type": "string",
          "example": "Suspicious transaction"
        },
        "error_code": {
          "description": "The gateway specific error code.",
          "type": "string"
        },
        "error_detail": {
          "description": "In the case of an error, this is the exception message.",
          "type": "string"
        },
        "fraud_review": {
          "description": "Value is true when a payment is pending review by the fraud service of the gateway.",
          "type": "boolean"
        },
        "message": {
          "description": "A brief description of the results of the transaction.",
          "type": "string"
        },
        "pending": {
          "description": "Value is true if transaction state is pending.",
          "type": "boolean"
        },
        "success": {
          "description": "Value is true if transaction was successful.",
          "type": "boolean"
        },
        "updated_at": {
          "description": "Date-time the payment method was updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodResponse": {
      "type": "object",
      "description": "Individual payment method.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/paymentMethodInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodVerificationInstance": {
      "type": "object",
      "description": "Payment method verification details.",
      "required": [
        "created_at",
        "gateway_transaction_id",
        "ip",
        "merchant_name_descriptor",
        "message",
        "payment_method",
        "status",
        "succeeded",
        "transaction_id",
        "response"
      ],
      "properties": {
        "created_at": {
          "description": "Date-time the payment verification was performed.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "gateway_transaction_id": {
          "description": "The gateway's corresponding transaction id.",
          "type": "string"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "message": {
          "description": "A brief description of the results of the verification.",
          "type": "string",
          "example": "Unable to process the transaction because the payment method has been redacted."
        },
        "payment_method": {
          "$ref": "#/definitions/paymentMethodInstance"
        },
        "status": {
          "description": "The status of the verification.",
          "type": "string",
          "enum": [
            "succeeded",
            "failed",
            "gateway_processing_failed",
            "gateway_processing_result_unknown"
          ]
        },
        "succeeded": {
          "description": "Value is true if verification was successful.",
          "type": "boolean",
          "example": true
        },
        "transaction_id": {
          "description": "A unique string generated by the payment gateway to identify a transaction.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        },
        "response": {
          "$ref": "#/definitions/paymentMethodVerificationResponseInstance"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "paymentMethodVerificationResponse": {
      "type": "object",
      "description": "Response for payment method verification request.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/paymentMethodVerificationInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeEventBody": {
      "type": "object",
      "description": "Data to create a Stripe event.",
      "required": [
        "data",
        "id",
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "created": {
          "description": "Number of seconds since epoch when the event was created.",
          "type": "string"
        },
        "data": {
          "description": "JSON payload of data related to the event.",
          "type": "object"
        },
        "id": {
          "description": "Unique identifier of the event.",
          "example": "evt_00000000000002",
          "type": "string"
        },
        "live_mode": {
          "description": "Value is true if the Stripe event was created in the live system.",
          "type": "boolean"
        },
        "type": {
          "description": "Custom event type provided by Stripe.",
          "example": "account.application.deauthorized",
          "type": "string"
        },
        "user_id": {
          "description": "Identifier which associates this event to a specific Stripe account.",
          "example": "acct_18HJLlGNs9QlOCiX",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeEvent422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "id": {
          "$ref": "#/definitions/validationError"
        },
        "type": {
          "$ref": "#/definitions/validationError"
        },
        "data": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeEvent422Response": {
      "type": "object",
      "description": "Response for invalid data on create.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/stripeEvent422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionAuthorizeOrPurchaseBody": {
      "type": "object",
      "description": "Data to authorize a transaction.",
      "required": [
        "amount",
        "currency_code",
        "merchant_code",
        "payment_method_token"
      ],
      "additionalProperties": false,
      "properties": {
        "amount": {
          "description": "Amount to be charged, in cents.",
          "example": 1500,
          "type": "integer"
        },
        "currency_code": {
          "description": "Currency of the amount being charged. ISO-4217 format.",
          "example": "USD",
          "type": "string"
        },
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "$ref": "#/definitions/gatewaySpecificFieldsForAuthorization"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_code": {
          "description": "Code of the merchant that will receive the amount.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Custom name description that may end up on bank statement, depending on the gateway.",
          "type": "string"
        },
        "merchant_location_descriptor": {
          "description": "Custom location description that may end up on bank statement, depending on the gateway.",
          "type": "string"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        },
        "payment_method_token": {
          "description": "Token of the payment method that should be charged.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewaySpecificFieldsForAuthorization": {
      "type": "object",
      "description": "Specific fields passed to gateway when processing transactions for this merchant.",
      "additionalProperties": false,
      "properties": {
        "stripe": {
          "$ref": "#/definitions/stripeAuthorizationSpecificFields"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeAuthorizationSpecificFields": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "application_fee": {
          "type": "string",
          "description": "When using Stripe Connect, Stripe allows you to specify an application_fee which is a number of cents to be charged on top of Stripe's normal fees."
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewaySpecificResponseFields": {
      "type": "object",
      "description": "Specific fields returned from gateway when processing transactions for this merchant.",
      "additionalProperties": false,
      "properties": {
        "stripe": {
          "$ref": "#/definitions/stripeSpecificResponseFields"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeSpecificResponseFields": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "card_funding": {
          "type": "string",
          "description": "A response from Stripe may include a card_funding response field that indicates what type of funding source was used to complete the transaction, such as credit or debit."
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionInstance": {
      "type": "object",
      "description": "Transaction",
      "required": [
        "amount",
        "created_at",
        "currency_code",
        "gateway_transaction_id",
        "gateway_specific_fields",
        "gateway_specific_response_fields",
        "message",
        "on_test_gateway",
        "payment_method",
        "response",
        "status",
        "succeeded",
        "transaction_id",
        "transaction_type"
      ],
      "properties": {
        "amount": {
          "description": "Amount charged, in cents.",
          "type": "integer",
          "example": 1500
        },
        "created_at": {
          "description": "Date-time the transaction was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "currency_code": {
          "description": "Currency of the amount being charged. ISO-4217 format.",
          "type": "string",
          "example": "USD"
        },
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "description": "Fields that a gateway defines for a specific purpose but is not implemented by all gateways",
          "$ref": "#/definitions/gatewaySpecificFieldsForAuthorization"
        },
        "gateway_specific_response_fields": {
          "description": "Additional fields that a gateway may choose to provide.",
          "$ref": "#/definitions/gatewaySpecificResponseFields"
        },
        "gateway_transaction_id": {
          "description": "The gateway's corresponding transaction id.",
          "type": "string"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_location_descriptor": {
          "description": "Location of merchant.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "message": {
          "description": "A brief description of the results of the transaction.",
          "type": "string",
          "example": "Succeeded!"
        },
        "on_test_gateway": {
          "description": "Value is true if transaction was made on test gateway",
          "type": "boolean"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        },
        "payment_method": {
          "$ref": "#/definitions/paymentMethodInstance"
        },
        "response": {
          "$ref": "#/definitions/paymentMethodVerificationResponseInstance"
        },
        "status": {
          "description": "The status of the transaction.",
          "type": "string",
          "enum": [
            "succeeded",
            "failed",
            "gateway_processing_failed",
            "gateway_processing_result_unknown"
          ]
        },
        "succeeded": {
          "description": "Value is true if transaction was successful.",
          "type": "boolean"
        },
        "transaction_id": {
          "description": "Transaction identifier. Identifier to retrieve this transaction.",
          "type": "string",
          "example": "Hnloej7yPucNBmB1swFnULd4Bt3"
        },
        "transaction_type": {
          "description": "The type of transaction, e.g., Authorization, Capture, Credit",
          "type": "string",
          "enum": [
            "Authorization",
            "Capture",
            "Credit",
            "Verification",
            "Void",
            "Purchase"
          ]
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionResponse": {
      "type": "object",
      "description": "Individual transaction.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/transactionInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transaction422Response": {
      "type": "object",
      "description": "Response for invalid data on create.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/transaction422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transaction422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "payment_method_token": {
          "$ref": "#/definitions/validationError"
        },
        "merchant_code": {
          "$ref": "#/definitions/validationError"
        },
        "amount": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionCaptureBody": {
      "type": "object",
      "description": "Data to capture a transaction.",
      "required": [
        "merchant_code"
      ],
      "additionalProperties": false,
      "properties": {
        "amount": {
          "description": "Amount to be captured, in cents. If this value is not provided, the entire transaction amount will be captured.",
          "example": 1500,
          "type": "integer"
        },
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_code": {
          "description": "Code of the merchant used for capturing funds.",
          "type": "string"
        },
        "merchant_location_descriptor": {
          "description": "Location of merchant.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionCaptureInstance": {
      "type": "object",
      "description": "Transaction capture.",
      "required": [
        "amount",
        "created_at",
        "currency_code",
        "description",
        "gateway_specific_fields",
        "gateway_specific_response_fields",
        "gateway_token",
        "gateway_transaction_id",
        "ip",
        "merchant_location_descriptor",
        "merchant_name_descriptor",
        "message",
        "on_test_gateway",
        "order_id",
        "response",
        "status",
        "succeeded",
        "transaction_id",
        "transaction_type"
      ],
      "properties": {
        "amount": {
          "description": "Amount to be captured, in cents. If this value is not provided, the entire transaction amount will be captured.",
          "example": 1500,
          "type": "integer"
        },
        "created_at": {
          "description": "Date-time the transaction was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "currency_code": {
          "description": "Currency of the amount being charged. ISO-4217 format.",
          "type": "string",
          "example": "USD"
        },
        "description": {
          "description": "Description of the product or service rendered.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "description": "Fields that a gateway defines for a specific purpose but is not implemented by all gateways",
          "type": "object"
        },
        "gateway_specific_response_fields": {
          "description": "Additional fields that a gateway may choose to provide.",
          "$ref": "#/definitions/gatewaySpecificResponseFields"
        },
        "gateway_transaction_id": {
          "description": "The gateway's corresponding transaction id.",
          "type": "string",
          "example": "64"
        },
        "gateway_token": {
          "description": "A unique string generated by Spreedly to identify a gateway",
          "type": "string"
        },
        "ip": {
          "description": "IP address of the customer making the purchase.",
          "type": "string",
          "example": "127.0.0.1"
        },
        "merchant_location_descriptor": {
          "description": "Location of merchant.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "message": {
          "description": "A brief description of the results of the transaction.",
          "type": "string",
          "example": "Succeeded!"
        },
        "on_test_gateway": {
          "description": "Value is true if transaction was made on test gateway",
          "type": "boolean",
          "example": true
        },
        "order_id": {
          "description": "A tracking number that you can declare",
          "type": "string"
        },
        "response": {
          "$ref": "#/definitions/paymentMethodVerificationResponseInstance"
        },
        "status": {
          "description": "The status of the transaction",
          "type": "string",
          "example": "succeeded"
        },
        "succeeded": {
          "description": "Value is true if transaction was successful.",
          "type": "boolean",
          "example": true
        },
        "transaction_id": {
          "description": "Transaction identifier. A unique string generated by Spreedly to identify a transaction.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        },
        "transaction_type": {
          "description": "The type of transaction, e.g., Authorization, Capture, Credit",
          "type": "string",
          "enum": [
            "Authorization",
            "Capture",
            "Credit",
            "Verification",
            "Void",
            "Purchase"
          ]
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionCaptureResponse": {
      "type": "object",
      "description": "Response for transaction capture request.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/transactionCaptureInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionVoidBody": {
      "type": "object",
      "description": "Data to void a transaction.",
      "required": [
        "merchant_code"
      ],
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "merchant_code": {
          "description": "Code of the merchant used for void.",
          "type": "string"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionVoidInstance": {
      "type": "object",
      "description": "Transaction void.",
      "required": [
        "created_at",
        "description",
        "gateway_specific_fields",
        "gateway_token",
        "gateway_transaction_id",
        "ip",
        "merchant_location_descriptor",
        "merchant_name_descriptor",
        "message",
        "on_test_gateway",
        "order_id",
        "response",
        "status",
        "succeeded",
        "transaction_id",
        "transaction_type"
      ],
      "properties": {
        "created_at": {
          "description": "Date and time of origination.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description of the product or service rendered.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "description": "Fields that a gateway defines for a specific purpose but is not implemented by all gateways",
          "type": "object"
        },
        "gateway_transaction_id": {
          "description": "The gateway’s corresponding transaction id.",
          "type": "string"
        },
        "gateway_token": {
          "description": "A unique string generated by Spreedly to identify a gateway.",
          "type": "string"
        },
        "ip": {
          "description": "IP address of the customer making the purchase.",
          "type": "string",
          "example": "127.0.0.1"
        },
        "merchant_location_descriptor": {
          "description": "Location of merchant.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "message": {
          "description": "A brief description of the results of the transaction.",
          "type": "string",
          "example": "Succeeded!"
        },
        "on_test_gateway": {
          "description": "Value is true if transaction was made on test gateway",
          "type": "boolean",
          "example": true
        },
        "order_id": {
          "description": "A tracking number that you can declare.",
          "type": "string"
        },
        "response": {
          "$ref": "#/definitions/paymentMethodVerificationResponseInstance"
        },
        "status": {
          "description": "The status of the transaction",
          "type": "string",
          "example": "succeeded"
        },
        "succeeded": {
          "description": "Value is true if transaction was successful.",
          "type": "boolean",
          "example": true
        },
        "transaction_id": {
          "description": "Transaction identifier. A unique string generated by Spreedly to identify a transaction.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        },
        "transaction_type": {
          "description": "The type of transaction, e.g., Authorization, Capture, Credit",
          "type": "string",
          "enum": [
            "Authorization",
            "Capture",
            "Credit",
            "Verification",
            "Void",
            "Purchase"
          ]
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionVoidResponse": {
      "type": "object",
      "description": "Response for transaction void request.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/transactionVoidInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionRefundBody": {
      "type": "object",
      "description": "Data to refund a transaction.",
      "required": [
        "merchant_code"
      ],
      "additionalProperties": false,
      "properties": {
        "amount": {
          "description": "Amount to be refunded, in cents. If this value is not provided, the entire transaction amount will be refunded.",
          "example": 1500,
          "type": "integer"
        },
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "$ref": "#/definitions/gatewaySpecificFieldsForRefund"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_code": {
          "description": "Code of the merchant used for refund.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Custom name description that may end up on bank statement, depending on the gateway.",
          "type": "string"
        },
        "merchant_location_descriptor": {
          "description": "Custom location description that may end up on bank statement, depending on the gateway.",
          "type": "string"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "gatewaySpecificFieldsForRefund": {
      "type": "object",
      "description": "Specific fields passed to gateway when processing transactions for this merchant.",
      "additionalProperties": false,
      "properties": {
        "stripe": {
          "$ref": "#/definitions/stripeRefundSpecificFields"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "stripeRefundSpecificFields": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "refund_application_fee": {
          "type": "boolean",
          "description": "This is an optional parameter you can specify when you run a refund on Stripe. It indicates whether the Stripe Connect application_fee should be refunded when refunding the charge."
        },
        "reverse_transfer": {
          "type": "boolean",
          "description": "This is an optional parameter you can specify when you run a refund."
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionRefundInstance": {
      "type": "object",
      "description": "Transaction refund.",
      "required": [
        "amount",
        "created_at",
        "currency_code",
        "description",
        "email",
        "gateway_specific_fields",
        "gateway_token",
        "gateway_transaction_id",
        "ip",
        "merchant_location_descriptor",
        "merchant_name_descriptor",
        "message",
        "on_test_gateway",
        "order_id",
        "response",
        "status",
        "succeeded",
        "transaction_id",
        "transaction_type"
      ],
      "properties": {
        "amount": {
          "description": "Amount to be refunded, in cents. If this value is not provided, the entire transaction amount will be refunded.",
          "example": 1500,
          "type": "integer"
        },
        "created_at": {
          "description": "Date-time the transaction was created.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "currency_code": {
          "description": "Currency of the amount being charged. ISO-4217 format.",
          "type": "string",
          "example": "USD"
        },
        "description": {
          "description": "Description of product or service sold.",
          "type": "string"
        },
        "email": {
          "description": "Customer email address.",
          "type": "string"
        },
        "gateway_specific_fields": {
          "$ref": "#/definitions/gatewaySpecificFieldsForRefund"
        },
        "gateway_token": {
          "description": "A unique string generated by Spreedly to identify a gateway. Similar to an id, it is used to reference and operate against a [gateway](/basics/gateway/#store-gateway-token).",
          "type": "string"
        },
        "gateway_transaction_id": {
          "description": "The gateway's corresponding transaction id.",
          "type": "string"
        },
        "ip": {
          "description": "Customer IPv4 address.",
          "type": "string"
        },
        "merchant_location_descriptor": {
          "description": "Location of merchant.",
          "type": "string"
        },
        "merchant_name_descriptor": {
          "description": "Name of merchant.",
          "type": "string"
        },
        "message": {
          "description": "A brief description of the results of the transaction.",
          "type": "string",
          "example": "Succeeded!"
        },
        "on_test_gateway": {
          "description": "Value is true if transaction was made on test gateway",
          "type": "boolean"
        },
        "order_id": {
          "description": "A merchant specified tracking number.",
          "type": "string"
        },
        "response": {
          "$ref": "#/definitions/paymentMethodVerificationResponseInstance"
        },
        "status": {
          "description": "The status of the transaction.",
          "type": "string",
          "enum": [
            "succeeded",
            "failed",
            "gateway_processing_failed",
            "gateway_processing_result_unknown"
          ]
        },
        "succeeded": {
          "description": "Value is true if transaction was successful.",
          "type": "boolean",
          "example": true
        },
        "transaction_id": {
          "description": "Transaction identifier. A unique string generated by Spreedly to identify a transaction.",
          "type": "string",
          "example": "RjFg5ik5ftVqalFxBGrSVkubC4J"
        },
        "transaction_type": {
          "description": "The type of transaction, e.g., Authorization, Capture, Credit",
          "type": "string",
          "enum": [
            "Authorization",
            "Capture",
            "Credit",
            "Verification",
            "Void",
            "Purchase"
          ]
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionRefundResponse": {
      "type": "object",
      "description": "Response for transaction refund request.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/transactionRefundInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionRefund422Response": {
      "type": "object",
      "description": "Response for invalid data on refund.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/transactionRefund422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "transactionRefund422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "amount": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "payment"
      ]
    },
    "AppUpsert422Error": {
      "additionalProperties": false,
      "properties": {
        "app_id": {
          "$ref": "#/definitions/validationError"
        },
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "notification_badge": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "AppUpsert422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on add or update.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/AppUpsert422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "DeviceUpsert422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "locale": {
          "$ref": "#/definitions/validationError"
        },
        "maker": {
          "$ref": "#/definitions/validationError"
        },
        "model": {
          "$ref": "#/definitions/validationError"
        },
        "os_version": {
          "$ref": "#/definitions/validationError"
        },
        "platform": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "DeviceUpsert422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on add or update.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/DeviceUpsert422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "MessagingPreferenceInstance": {
      "description": "Messaging preference",
      "properties": {
        "food": {
          "$ref": "#/definitions/MessagingPreferenceItemInstance",
          "description": "food messaging preferences."
        },
        "parking": {
          "$ref": "#/definitions/MessagingPreferenceItemInstance",
          "description": "parking messaging preferences."
        }
      },
      "required": [
        "food",
        "parking"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "MessagingPreferenceItemInstance": {
      "properties": {
        "email": {
          "description": "Value is true if user enabled notifications via email",
          "type": "boolean"
        },
        "push": {
          "description": "Value is true if user enabled notifications via push",
          "type": "boolean"
        },
        "sms": {
          "description": "Value is true if user enabled notifications via sms",
          "type": "boolean"
        }
      },
      "required": [
        "email",
        "push",
        "sms"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accessDevicesInstance": {
      "description": "AccessDevices",
      "properties": {
        "device_id": {
          "description": "Device identifier.",
          "type": "string"
        },
        "device_status": {
          "description": "Device status",
          "enum": [
            "ok",
            "removed"
          ],
          "type": "string"
        },
        "type": {
          "description": "Device type",
          "type": "string",
          "x-wf-example": "license_plate"
        }
      },
      "required": [
        "device_id",
        "device_status",
        "type"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "account": {
      "description": "Account including associated identification data.",
      "properties": {
        "created_at": {
          "description": "DateTime that the shopper was created",
          "type": "string"
        },
        "email": {
          "description": "Email address for the shopper",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name for the shopper",
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        },
        "last_name": {
          "description": "Last name for the shopper",
          "type": "string"
        },
        "messaging_preferences": {
          "$ref": "#/definitions/MessagingPreferenceInstance",
          "type": "object"
        },
        "newsletter_centre_ids": {
          "description": "List of centre identifiers in response associated with the newsletter subscriptions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers in response that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "person_id": {
          "description": "Identifier of the account",
          "type": "string"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user primary center",
          "type": "string"
        },
        "registered_for_parking": {
          "description": "Value is true if user signed up for parking",
          "type": "boolean"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing",
          "type": "boolean"
        },
        "timezone": {
          "description": "User timezone",
          "type": "string"
        },
        "updated_at": {
          "description": "DateTime that the shopper last updated",
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "email",
        "email_marketing_opt_in",
        "first_name",
        "person_id",
        "primary_centre_id",
        "updated_at"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "accountParkingSessionSummaryInstance": {
      "description": "ParkingSessionSummary",
      "properties": {
        "month": {
          "description": "Month of summary.",
          "type": "integer"
        },
        "total_cost": {
          "description": "Total cost of the sessions on the month",
          "type": "string"
        },
        "total_sessions": {
          "description": "Count of sessions of the month",
          "type": "integer"
        },
        "year": {
          "description": "Year of summary.",
          "type": "integer"
        }
      },
      "required": [
        "month",
        "year",
        "total_sessions",
        "total_cost"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountParkingSessionsSummaryResponse": {
      "additionalProperties": false,
      "description": "List parking sessions summary response.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountParkingSessionSummaryInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountResponse": {
      "description": "Contains a single account",
      "properties": {
        "data": {
          "$ref": "#/definitions/account"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "accountStatusResponse": {
      "description": "Account status",
      "properties": {
        "data": {
          "enum": [
            "full",
            "partial",
            "none",
            "deleted",
            "locked"
          ],
          "type": "string"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "accountToken": {
      "description": "Token",
      "properties": {
        "access_token": {
          "description": "Access token",
          "type": "string"
        },
        "created_at": {
          "description": "Token creation date as unix timestamp",
          "example": 1444446127,
          "type": "integer"
        },
        "expires_in": {
          "description": "Token TTL",
          "type": "integer"
        },
        "refresh_token": {
          "description": "Refresh Token string",
          "type": "string"
        },
        "token_type": {
          "description": "Token Type",
          "type": "string"
        }
      },
      "required": [
        "access_token",
        "expires_in",
        "token_type"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "accountTokenInfo": {
      "description": "Token Info",
      "properties": {
        "created_at": {
          "description": "Token creation date as unix timestamp",
          "example": 1444446127,
          "type": "integer"
        },
        "expires_at": {
          "description": "DateTime that the token will expires Unix Timestamp format",
          "format": "date-time",
          "type": "string"
        },
        "expires_in_seconds": {
          "description": "Token TTL",
          "type": "integer"
        },
        "person_id": {
          "description": "Identifier of the person that owns this token",
          "type": "string"
        },
        "scopes": {
          "description": "OAuth Scopes",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "accountTokenRequestBody": {
      "description": "Account-token request parameters.",
      "properties": {
        "country": {
          "description": "Country code of the account.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "grant_type": {
          "description": "Grant Type",
          "enum": [
            "password",
            "refresh_token"
          ],
          "type": "string"
        },
        "password": {
          "description": "User password",
          "type": "string"
        },
        "refresh_token": {
          "description": "Refresh token",
          "type": "string"
        },
        "username": {
          "description": "User email",
          "type": "string"
        }
      },
      "required": [
        "grant_type"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "accountTokenRevokeBody": {
      "description": "Token revoke parameters",
      "properties": {
        "token": {
          "description": "Access token",
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicle422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "license_plate": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicle422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on add or update.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/accountVehicle422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleCreateBody": {
      "additionalProperties": false,
      "description": "Data to add a vehicle.",
      "properties": {
        "license_plate": {
          "description": "Vehicle license plate. Vehicle has a license plate as a unique identifier.",
          "maxLength": 8,
          "minLength": 4,
          "pattern": "\\A[A-Z0-9]+\\z",
          "type": "string"
        },
        "name": {
          "description": "Vehicle name.",
          "maxLength": 25,
          "type": "string"
        }
      },
      "required": [
        "license_plate",
        "name"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleCreatedInstance": {
      "description": "Vehicle",
      "properties": {
        "created_at": {
          "description": "Date-time the vehicle was added.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "deleted_at": {
          "description": "Date-time the vehicle was deleted.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "license_plate": {
          "description": "Vehicle license plate.",
          "maxLength": 8,
          "minLength": 4,
          "pattern": "\\A[A-Z0-9]+\\z",
          "type": "string"
        },
        "name": {
          "description": "Vehicle name.",
          "maxLength": 25,
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "last_parking_session_at",
        "license_plate",
        "name"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleCreatedResponse": {
      "additionalProperties": false,
      "description": "Individual vehicle response.",
      "properties": {
        "data": {
          "$ref": "#/definitions/accountVehicleCreatedInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleInstance": {
      "description": "Vehicle",
      "properties": {
        "created_at": {
          "description": "Date-time the vehicle was added.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "deleted_at": {
          "description": "Date-time the vehicle was deleted.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "last_parking_session_at": {
          "description": "Date-time the vehicle was last used for parking.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "license_plate": {
          "description": "Vehicle license plate.",
          "maxLength": 8,
          "minLength": 4,
          "pattern": "\\A[A-Z0-9]+\\z",
          "type": "string"
        },
        "name": {
          "description": "Vehicle name.",
          "maxLength": 25,
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "license_plate",
        "name"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleResponse": {
      "additionalProperties": false,
      "description": "Individual vehicle response.",
      "properties": {
        "data": {
          "$ref": "#/definitions/accountVehicleInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehicleUpdateBody": {
      "additionalProperties": false,
      "description": "Data to update a vehicle.",
      "properties": {
        "name": {
          "description": "Vehicle name.",
          "maxLength": 25,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountVehiclesListResponse": {
      "additionalProperties": false,
      "description": "List vehicles response.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/accountVehicleInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountsAppUpsertBody": {
      "additionalProperties": false,
      "description": "Data to upsert a app.",
      "properties": {
        "notification_badge": {
          "description": "Notification badge counter.",
          "type": "string"
        }
      },
      "required": [
        "notification_badge"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "accountsDeviceUpsertBody": {
      "additionalProperties": false,
      "description": "Data to upsert a device.",
      "properties": {
        "locale": {
          "description": "device locale",
          "type": "string"
        },
        "maker": {
          "description": "device maker",
          "type": "string"
        },
        "mobile_carrier": {
          "description": "device mobile carrier",
          "type": "string"
        },
        "model": {
          "description": "device model",
          "type": "string"
        },
        "notification_badge": {
          "description": "Notification badge counter.",
          "type": "string"
        },
        "notification_token": {
          "description": "Token which allows push notifications to be sent to a device.",
          "type": "string"
        },
        "os_version": {
          "description": "device operational system version",
          "type": "string"
        },
        "platform": {
          "description": "device platform",
          "enum": [
            "ios",
            "android"
          ],
          "type": "string"
        },
        "timezone": {
          "description": "device timezone",
          "type": "string"
        }
      },
      "required": [
        "locale",
        "model",
        "maker",
        "notification_badge",
        "os_version",
        "platform",
        "timezone"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "addInterestsRequest": {
      "description": "Data to add interest list to account",
      "properties": {
        "country": {
          "description": "Country code of the account.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email of the partial account.",
          "type": "string"
        },
        "interest_ids": {
          "description": "Interest identitfiers. A list of unique identitfiers for the interests",
          "items": {
            "pattern": "\\A[1-9][0-9]*\\Z",
            "type": "string"
          },
          "type": "array"
        },
        "interests_updated_from": {
          "description": "Source from which the interests are being updated",
          "enum": [
            "android",
            "ios",
            "mobile_web",
            "web",
            "concierge"
          ],
          "type": "string"
        }
      },
      "required": [
        "email",
        "country",
        "interest_ids",
        "interests_updated_from"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "addKids422Error": {
      "additionalProperties": false,
      "description": "Missing or invalid data for kid record.",
      "properties": {
        "kids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kids.birth_date": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kids.first_name": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kids.gender": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "addKids422Response": {
      "additionalProperties": false,
      "description": "Missing or invalid data for kid record.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/addKids422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "addKidsRequest": {
      "description": "Data to add kids to account",
      "properties": {
        "country": {
          "description": "Country code of the account.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email of the account.",
          "type": "string"
        },
        "kids": {
          "description": "Data for each kid record being added to account.",
          "items": {
            "$ref": "#/definitions/kidsRequestObject"
          },
          "type": "array"
        }
      },
      "required": [
        "email",
        "country",
        "kids"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "conciergeAccount": {
      "description": "Account including associated identification data.",
      "properties": {
        "corporate_owner": {
          "description": "Corporation owner of the account",
          "type": "string"
        },
        "created_at": {
          "description": "DateTime that the shopper was created",
          "type": "string"
        },
        "creation_source": {
          "description": "Source that is requesting the user creation",
          "enum": [
            "mobile_signup",
            "web_signup",
            "wifi",
            "newsletter",
            "wfss",
            "contest",
            "in_centre",
            "gift_card",
            "parking"
          ],
          "type": "string"
        },
        "email": {
          "description": "Email address for the shopper",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name for the shopper",
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        },
        "last_name": {
          "description": "Last name for the shopper",
          "type": "string"
        },
        "messaging_preferences": {
          "$ref": "#/definitions/MessagingPreferenceInstance",
          "type": "object"
        },
        "newsletter_centre_ids": {
          "description": "List of centre identifiers in response associated with the newsletter subscriptions",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers in response that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "person_id": {
          "description": "Identifier of the account",
          "type": "string"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_country": {
          "description": "User country",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user primary center",
          "type": "string"
        },
        "registered_for_parking": {
          "description": "Value is true if user signed up for parking",
          "type": "boolean"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing",
          "type": "boolean"
        },
        "timezone": {
          "description": "User timezone",
          "type": "string"
        },
        "updated_at": {
          "description": "DateTime that the shopper last updated",
          "type": "string"
        },
        "wifi_id": {
          "description": "User identifier on wifi vendor database",
          "type": "integer"
        }
      },
      "required": [
        "created_at",
        "creation_source",
        "corporate_owner",
        "email",
        "email_marketing_opt_in",
        "first_name",
        "person_id",
        "primary_centre_country",
        "primary_centre_id",
        "updated_at"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "conciergeAccountResponse": {
      "description": "Contains a single account",
      "properties": {
        "data": {
          "$ref": "#/definitions/conciergeAccount"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "conciergeUpdateAccount": {
      "properties": {
        "email": {
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "messaging_preferences": {
          "$ref": "#/definitions/MessagingPreferenceInstance"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user primary center",
          "type": "string"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing",
          "type": "boolean"
        },
        "timezone": {
          "description": "User timezone",
          "type": "string"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "creditCard422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "parent_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCard422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on add or update.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/creditCard422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCardCreateBody": {
      "additionalProperties": false,
      "description": "Data to add a credit card.",
      "properties": {
        "payment_method_token": {
          "description": "Credit card token. Credit card has a token as a unique identifier.",
          "type": "string"
        }
      },
      "required": [
        "payment_method_token"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCardInstance": {
      "description": "Credit Card Token",
      "properties": {
        "card_type": {
          "description": "Credit card type.",
          "example": "visa",
          "type": "string"
        },
        "created_at": {
          "description": "Date-time the credit card was added.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "deleted_at": {
          "description": "Date-time the credit card was deleted.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "first_name": {
          "description": "Credit card holder's first name.",
          "type": "string"
        },
        "first_six_digits": {
          "description": "First six numbers of credit card.",
          "type": "string"
        },
        "last_four_digits": {
          "description": "Last four numbers of credit card.",
          "type": "string"
        },
        "last_name": {
          "description": "Credit card holder's last name.",
          "type": "string"
        },
        "last_used_for_food": {
          "description": "Value is true if the credit card is the last one used for food.",
          "type": "boolean"
        },
        "month": {
          "description": "Credit card expiration month.",
          "type": "integer"
        },
        "parking_card": {
          "description": "Value is true if the credit card is the one used for parking.",
          "type": "boolean"
        },
        "payment_method_token": {
          "description": "Credit card identifier. Token identifier for credit card.",
          "type": "string"
        },
        "postal_code": {
          "description": "Credit card holder's postal code.",
          "type": "string"
        },
        "year": {
          "description": "Credit card expiration year.",
          "type": "integer"
        }
      },
      "required": [
        "card_type",
        "created_at",
        "first_name",
        "first_six_digits",
        "last_four_digits",
        "last_name",
        "last_used_for_food",
        "month",
        "parking_card",
        "payment_method_token",
        "postal_code",
        "year"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCardResponse": {
      "additionalProperties": false,
      "description": "Individual credit card response.",
      "properties": {
        "data": {
          "$ref": "#/definitions/creditCardInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCardUpdateBody": {
      "additionalProperties": false,
      "description": "Data to update a credit card.",
      "properties": {
        "first_name": {
          "description": "The first name of the cardholder.",
          "type": "string"
        },
        "last_name": {
          "description": "The last name of the cardholder.",
          "type": "string"
        },
        "month": {
          "description": "Credit card expiration month.",
          "type": "integer"
        },
        "parking_card": {
          "description": "Used for parking. Credit card is enabled (true) or not enabled (false) for parking.",
          "type": "boolean"
        },
        "postal_code": {
          "description": "Postal code of the cardholder.",
          "type": "string"
        },
        "year": {
          "description": "Credit card expiration year.",
          "type": "integer"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "creditCardsListResponse": {
      "additionalProperties": false,
      "description": "List credit cards response.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/creditCardInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "cursoredMetaResponse": {
      "additionalProperties": false,
      "description": "Response metadata.",
      "properties": {
        "api_version": {
          "description": "API version. Version number for the API.",
          "example": "1",
          "type": "string"
        },
        "deprecation_information": {
          "$ref": "#/definitions/deprecationInformation",
          "description": "End-of-life information about the deprecation of the endpoint. If this has content you must act on it."
        },
        "next_page_id": {
          "description": "Next page identifier to retrieve the next page of results.",
          "type": "string"
        },
        "total": {
          "description": "Total number of results for all pages.",
          "example": 100,
          "type": "integer"
        }
      },
      "required": [
        "api_version",
        "deprecation_information"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ednaAppsInstance": {
      "additionalProperties": false,
      "description": "Apps instance for EDNA",
      "properties": {
        "app_id": {
          "description": "Identifier of the app.",
          "type": "string"
        },
        "devices": {
          "description": "Devices associated with the app.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notification_badge": {
          "description": "Number of notifications.",
          "type": "integer"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ednaInterestsInstance": {
      "additionalProperties": false,
      "description": "Interests instance for EDNA",
      "properties": {
        "created_at": {
          "description": "Datetime when interest was created.",
          "format": "date-time",
          "type": "string"
        },
        "deleted_at": {
          "description": "Datetime when interest was deleted.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Identifier of the interest.",
          "type": "string"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ednaLastLoginLocationInstance": {
      "additionalProperties": false,
      "description": "Last Login Location instance for EDNA",
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/ednaLastLoginLocationInstanceCoordinates",
          "description": "Coordinates last logged in from.",
          "type": "object"
        },
        "country": {
          "description": "Country last logged in from.",
          "type": "string"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ednaLastLoginLocationInstanceCoordinates": {
      "additionalProperties": false,
      "description": "Coordinates last logged in from.",
      "properties": {
        "lat": {
          "description": "Latitude last logged in from.",
          "type": "integer"
        },
        "lon": {
          "description": "Longitude last logged in from.",
          "type": "integer"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ednaLoginIdsInstance": {
      "additionalProperties": false,
      "description": "Login identifiers for the user.",
      "properties": {
        "emails": {
          "description": "Emails used as login identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "foodHistoryActivityInstance": {
      "description": "Food order",
      "properties": {
        "active_coupons": {
          "description": "The coupons that are applied to the order",
          "items": {
            "$ref": "#/definitions/orderCouponInstance"
          },
          "type": "array"
        },
        "created_at": {
          "description": "Creation date for the given order",
          "format": "date-time",
          "type": "string"
        },
        "credit_card": {
          "$ref": "#/definitions/creditCardInstance"
        },
        "delivery_time": {
          "description": "Delivery time for the order.",
          "format": "date-time",
          "type": "string"
        },
        "food_order_id": {
          "description": "Food Order identifier.",
          "type": "string"
        },
        "order_items": {
          "description": "Items for the food order",
          "items": {
            "$ref": "#/definitions/orderItemInstance"
          },
          "type": "array"
        },
        "restaurant": {
          "description": "Name of the restaurant",
          "type": "string"
        },
        "short_id": {
          "description": "Human friendly order number.",
          "type": "integer"
        },
        "status": {
          "description": "Textual order status.",
          "type": "string"
        },
        "subtotal": {
          "description": "The order subtotal.",
          "example": "$20.50",
          "type": "string"
        },
        "tax": {
          "description": "The order tax amount.",
          "example": "$3.45",
          "type": "string"
        },
        "total_amount": {
          "description": "The total amount of the order.",
          "example": "$45.00",
          "type": "string"
        }
      },
      "required": [
        "food_order_id",
        "created_at",
        "restaurant",
        "order_items",
        "credit_card",
        "total_amount",
        "tax",
        "short_id",
        "subtotal",
        "active_coupons",
        "status"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "foodHistoryResponse": {
      "additionalProperties": false,
      "description": "List food ordering activities response.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/foodHistoryActivityInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "foodOrderResponse": {
      "additionalProperties": false,
      "description": "Food order response.",
      "properties": {
        "data": {
          "$ref": "#/definitions/foodHistoryActivityInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getAnalytics200Response": {
      "additionalProperties": false,
      "description": "Response for successful retrieval analytics query",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/getAnalyticsInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/cursoredMetaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getAnalytics422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "Owner identifier is missing or invalid"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getAnalytics422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on analytics query",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/getAnalytics422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getAnalyticsInstance": {
      "additionalProperties": false,
      "properties": {
        "active_credit_cards": {
          "description": "Active credit cards of the user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "active_vehicles_count": {
          "description": "Number of active vehicles of the user.",
          "type": "integer"
        },
        "address": {
          "description": "Address of the user.",
          "type": "string"
        },
        "birth_day": {
          "description": "Birth day of the user.",
          "type": "integer"
        },
        "birth_month": {
          "description": "Birth month of the user.",
          "type": "integer"
        },
        "birth_year": {
          "description": "Birth year of the user.",
          "type": "integer"
        },
        "city": {
          "description": "City of the user.",
          "type": "string"
        },
        "created_at": {
          "description": "DateTime that the shopper was created",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "creation_source": {
          "description": "Source from which the user was created",
          "type": "string"
        },
        "email": {
          "description": "Email address for the shopper",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name for the shopper",
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "type": "string"
        },
        "kids": {
          "description": "List of birth dates of kids of the user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "last_login_at": {
          "description": "Datetime when the user last logged in",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "last_name": {
          "description": "Last name for the shopper",
          "type": "string"
        },
        "newsletter_countries": {
          "description": "List of countries to where each of the newsletter subscriptions belongs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers in response that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parking_id": {
          "description": "Parking identifier",
          "type": "string"
        },
        "partial_account": {
          "description": "Value is true if the account is partial",
          "type": "boolean"
        },
        "person_id": {
          "description": "Identifier of the account",
          "type": "string"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_country": {
          "description": "Identifier of the user primary country",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user's primary center",
          "type": "string"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing.",
          "type": "boolean"
        },
        "state": {
          "description": "State of the user.",
          "type": "string"
        },
        "updated_at": {
          "description": "DateTime that the shopper last updated",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "wifi_custom_data": {
          "description": "Custom data related to the user provided by wifi vendor",
          "type": "string"
        },
        "wifi_id": {
          "description": "User identifier on wifi vendor database",
          "type": "string"
        },
        "zip": {
          "description": "Zip code of the user.",
          "pattern": "\\A[A-Za-z0-9\\s-]+\\z",
          "type": "string"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getEdna200Response": {
      "additionalProperties": false,
      "description": "Response for successful retrieval EDNA analytics query",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/getEdnaInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/cursoredMetaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getEdna422Response": {
      "additionalProperties": false,
      "description": "Response for invalid EDNA analytics query",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "additionalProperties": false,
          "properties": {
            "base": {
              "$ref": "#/definitions/validationError",
              "description": "Owner identifier is missing or invalid"
            },
            "next_page_id": {
              "description": "next_page_id param is missing"
            },
            "updated_since": {
              "description": "updated_since param is missing"
            }
          },
          "type": "object"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getEdnaInstance": {
      "additionalProperties": false,
      "properties": {
        "account_terms": {
          "description": "Value is true if the user has agreed to the account terms.",
          "type": "boolean"
        },
        "address": {
          "description": "Address of the user.",
          "type": "string"
        },
        "apps": {
          "description": "Apps that are associated with the user.",
          "items": {
            "$ref": "#/definitions/ednaAppsInstance"
          },
          "type": "array"
        },
        "birth_day": {
          "description": "Birth day of the user.",
          "type": "integer"
        },
        "birth_month": {
          "description": "Birth month of the user.",
          "type": "integer"
        },
        "birth_year": {
          "description": "Birth year of the user.",
          "type": "integer"
        },
        "city": {
          "description": "City of the user.",
          "type": "string"
        },
        "corporate_owner": {
          "description": "User's corporate owner.",
          "type": "string"
        },
        "created_at": {
          "description": "DateTime that the shopper was created",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "created_at_timestamp": {
          "description": "Number of seconds since epoch when user was created.",
          "type": "integer"
        },
        "creation_source": {
          "description": "Source from which the user was created",
          "type": "string"
        },
        "credit_cards": {
          "description": "Datetime in iso8601 when user was created.",
          "items": {
            "$ref": "#/definitions/creditCardInstance"
          },
          "type": "array"
        },
        "deleted_at": {
          "description": "Datetime in iso8601 when user was deleted.",
          "format": "date-time",
          "type": "string"
        },
        "devices": {
          "description": "List of user's devices",
          "items": {
            "$ref": "#/definitions/accountsDeviceUpsertBody"
          },
          "type": "array"
        },
        "email": {
          "description": "Email address for the shopper",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name for the shopper",
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "type": "string"
        },
        "interests": {
          "description": "List of user's interests",
          "items": {
            "$ref": "#/definitions/ednaInterestsInstance"
          },
          "type": "array"
        },
        "is_active": {
          "description": "Value is true if user is active.",
          "type": "boolean"
        },
        "is_verified": {
          "description": "Value is true if user is verified.",
          "type": "boolean"
        },
        "kids": {
          "description": "List of birth dates of kids of the user.",
          "items": {
            "$ref": "#/definitions/kidsInstance"
          },
          "type": "array"
        },
        "last_login_at": {
          "description": "Datetime when the user last logged in",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "last_login_at_timestamp": {
          "description": "Number of seconds since epoch when user last logged in.",
          "type": "integer"
        },
        "last_login_location": {
          "description": "Location the user last logged in from.",
          "items": {
            "$ref": "#/definitions/ednaLastLoginLocationInstance"
          },
          "type": "array"
        },
        "last_name": {
          "description": "Last name for the shopper",
          "type": "string"
        },
        "locked_at": {
          "description": "Datetime in iso8601 when user was locked.",
          "format": "date-time",
          "type": "string"
        },
        "log_in_attempts": {
          "description": "Number of incorrect log in attempts the user has made.",
          "type": "integer"
        },
        "login_ids": {
          "$ref": "#/definitions/ednaLoginIdsInstance",
          "description": "Emails that the user can use to log in.",
          "type": "object"
        },
        "messaging_preferences": {
          "$ref": "#/definitions/MessagingPreferenceInstance",
          "description": "User's messaging prefereces.",
          "type": "object"
        },
        "newsletter_centre_ids": {
          "description": "List of centre identifiers associated with the newsletter subscriptions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_countries": {
          "description": "List of countries to where each of the newsletter subscriptions belongs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers in response that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "oldest_data_updated_at": {
          "description": "Datetime in iso8601 when user last logged in.",
          "format": "date-time",
          "type": "string"
        },
        "oldest_data_updated_at_timestamp": {
          "description": "Number of seconds since epoch when user last logged in.",
          "type": "integer"
        },
        "parking_rule_group_guid": {
          "description": "Parking group the user belongs to.",
          "type": "string"
        },
        "parking_signup_at": {
          "description": "Datetime in iso8601 when user signed up for parking.",
          "format": "date-time",
          "type": "string"
        },
        "partial_account": {
          "description": "Value is true if the account is partial",
          "type": "boolean"
        },
        "person_id": {
          "description": "Identifier of the account",
          "type": "string"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_country": {
          "description": "Identifier of the user primary country",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user's primary center",
          "type": "string"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing.",
          "type": "boolean"
        },
        "state": {
          "description": "State of the user.",
          "type": "string"
        },
        "timezone": {
          "description": "User's timezone.",
          "type": "string"
        },
        "updated_at": {
          "description": "DateTime that the shopper last updated",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "updated_at_timestamp": {
          "description": "Number of seconds since epoch when user was updated.",
          "type": "integer"
        },
        "upgraded_at": {
          "description": "Datetime in iso8601 when the user was upgraded.",
          "format": "date-time",
          "type": "string"
        },
        "vehicles": {
          "items": {
            "$ref": "#/definitions/accountVehicleInstance"
          },
          "type": "array"
        },
        "verified_at": {
          "description": "Datetime in iso8601 when user was verified.",
          "format": "date-time",
          "type": "string"
        },
        "verified_at_timestamp": {
          "description": "Number of seconds since epoch when user was verified.",
          "type": "integer"
        },
        "wifi_id": {
          "description": "User identifier on wifi vendor database",
          "type": "string"
        },
        "wifi_terms": {
          "description": "Value is true if the user has agreed to the wifi terms.",
          "type": "boolean"
        },
        "zip": {
          "description": "Zip code of the user.",
          "pattern": "\\A[A-Za-z0-9\\s-]+\\z",
          "type": "string"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getNewsletters401Error": {
      "properties": {
        "base": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getNewsletters401Response": {
      "additionalProperties": false,
      "description": "Invalid data for upgrade",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject",
          "type": "object"
        },
        "errors": {
          "$ref": "#/definitions/getNewsletters401Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getNewslettershttp404Error": {
      "properties": {
        "resource": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "getNewslettershttp404Response": {
      "additionalProperties": false,
      "description": "Invalid data for upgrade",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject",
          "type": "object"
        },
        "errors": {
          "$ref": "#/definitions/getNewslettershttp404Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "initiatePasswordResetBody": {
      "description": "Password reset parameters",
      "properties": {
        "country": {
          "description": "Country code of the account.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email address of the account",
          "type": "string"
        }
      },
      "required": [
        "email",
        "country"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "invalidSessionResponse": {
      "additionalProperties": false,
      "description": "Invalid session identifier for person",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/invalidSessionResponseError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "invalidSessionResponseError": {
      "description": "Invalid session identifier for person",
      "properties": {
        "parking_session_id": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "parking_session_id"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "kidsInstance": {
      "additionalProperties": false,
      "description": "Data for a single kid.",
      "properties": {
        "birth_date": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "enum": [
            "m",
            "f",
            "u",
            "o"
          ],
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "first_name",
        "birth_date",
        "gender",
        "created_at",
        "updated_at"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "kidsRequestObject": {
      "description": "Data to add kids to account",
      "properties": {
        "birth_date": {
          "description": "Birth date of the kid. Must be of the form YYYY-MM-DD. Must be under 12 years of age.",
          "format": "date",
          "type": "string"
        },
        "first_name": {
          "description": "First name of the kid.",
          "type": "string"
        },
        "gender": {
          "description": "Gender of the kid.",
          "enum": [
            "m",
            "f",
            "u",
            "o"
          ],
          "type": "string"
        }
      },
      "required": [
        "first_name",
        "birth_date"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "lockedError": {
      "additionalProperties": false,
      "properties": {
        "account": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "lockedResponse": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/lockedError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "newAccount": {
      "properties": {
        "creation_source": {
          "description": "Source that is requesting the user creation",
          "enum": [
            "mobile_signup",
            "web_signup",
            "wifi",
            "newsletter",
            "wfss",
            "contest",
            "in_centre",
            "gift_card",
            "parking"
          ],
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "maxLength": 50,
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        },
        "last_name": {
          "maxLength": 50,
          "type": "string"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers in response that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parking_id": {
          "description": "Identifier of parking",
          "type": "string"
        },
        "password": {
          "description": "Account password.",
          "maxLength": 30,
          "minLength": 8,
          "type": "string"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user primary center",
          "type": "string"
        },
        "timezone": {
          "description": "User timezone",
          "type": "string"
        },
        "wifi_custom_data": {
          "description": "Custom data related to the user provided by wifi vendor",
          "type": "string"
        },
        "wifi_id": {
          "description": "User identifier on wifi vendor database",
          "type": "string"
        }
      },
      "required": [
        "creation_source",
        "email",
        "first_name",
        "primary_centre_id"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "newslettersManageBody": {
      "description": "Data to subscribe account to newsletters",
      "properties": {
        "country": {
          "description": "Country code of the account (required if person_id is not present).",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email of the partial account (required if person_id is not present).",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "True if account is opted-in to marketing.",
          "type": "string"
        },
        "newsletter_access_token": {
          "description": "Newsletter access token. Token to authorize access to newsletter information.",
          "type": "string"
        },
        "newsletter_subscriptions": {
          "description": "Replace the current newsletter subscriptions for the account with the list of newsletter identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "person_id": {
          "description": "Person identifier of the account",
          "type": "string"
        }
      },
      "required": [
        "newsletter_subscriptions"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "newslettersSubscribe200Response": {
      "additionalProperties": false,
      "description": "Successfully subscribed account to newsletters.",
      "properties": {
        "data": {
          "$ref": "#/definitions/newslettersSubscribeInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "newslettersSubscribeBody": {
      "description": "Data to subscribe account to newsletters",
      "properties": {
        "country": {
          "description": "Country code of the account to subscribe to newsletters.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email of the partial account to subscribe to newsletters.",
          "type": "string"
        },
        "first_name": {
          "description": "First name of the account.",
          "type": "string"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers to subscribe the account to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "primary_centre_id": {
          "description": "Primary centre identifier. Identifier of the primary centre of the account",
          "type": "string"
        }
      },
      "required": [
        "newsletter_subscriptions",
        "email",
        "country",
        "primary_centre_id"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "newslettersSubscribeInstance": {
      "description": "Account details regarding newsletter subscription.",
      "properties": {
        "email": {
          "description": "Email address for the account.",
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "True if account is opted in to marketing.",
          "type": "boolean"
        },
        "first_name": {
          "description": "First name for the account",
          "type": "string"
        },
        "newsletter_centre_ids": {
          "description": "List of centre identifiers associated with the newsletter subscriptions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers that the account is subscribed to.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "primary_centre_id": {
          "description": "Primary centre identifier. Identifier of the primary centre of the account.",
          "type": "string"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "notificationBody": {
      "description": "Notification body",
      "properties": {
        "centre_id": {
          "description": "Centre identifier. Identifier of the centre where the message originated.",
          "type": "string"
        },
        "data": {
          "description": "Custom data to be used on the message",
          "type": "object"
        },
        "message_id": {
          "description": "Message identifier for the message that will be sent",
          "type": "string"
        },
        "person_id": {
          "description": "Identifier of the account that will receive the message",
          "type": "string"
        }
      },
      "required": [
        "centre_id",
        "message_id",
        "person_id"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "notificationWithCategoryBody": {
      "description": "Notification body",
      "properties": {
        "category": {
          "description": "category of message",
          "enum": [
            "food",
            "parking"
          ],
          "type": "string"
        },
        "centre_id": {
          "description": "Centre identifier. Identifier of the centre where the message originated.",
          "type": "string"
        },
        "message_id": {
          "description": "Message identifier for the message that will be sent",
          "type": "string"
        },
        "person_id": {
          "description": "Identifier of the account that will receive the message",
          "type": "string"
        }
      },
      "required": [
        "centre_id",
        "message_id",
        "person_id",
        "category"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "notifications422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "centre": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "notifications422Response": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/notifications422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "orderCouponInstance": {
      "description": "Food order coupon",
      "properties": {
        "code": {
          "description": "The coupon code.",
          "type": "string"
        },
        "discount": {
          "description": "The discount amount applied to the order.",
          "example": "$2.50",
          "type": "string"
        },
        "flat": {
          "description": "The flat amount off that the coupon provides, if the coupon is a flat discount.",
          "example": "$2.50",
          "type": "string"
        },
        "food_order_coupon_id": {
          "description": "The ID of the coupon.",
          "type": "string"
        },
        "name": {
          "description": "The Name of the coupon.",
          "type": "string"
        },
        "percent": {
          "description": "The percent-off that the coupon provides, if the coupon is a percentage discount",
          "type": "number"
        }
      },
      "required": [
        "food_order_coupon_id",
        "name",
        "code",
        "discount",
        "percent",
        "flat"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "orderItemInstance": {
      "description": "Food order item",
      "properties": {
        "name": {
          "description": "Name of the item.",
          "type": "string"
        },
        "options": {
          "items": {
            "$ref": "#/definitions/orderOptionInstance"
          },
          "type": "array"
        },
        "price": {
          "description": "Price of the item.",
          "example": "$20.50",
          "type": "string"
        },
        "quantity": {
          "description": "Ordered quantity for the item.",
          "type": "number"
        },
        "subtotal": {
          "description": "Price multiplied by the item quantity.",
          "example": "$20.50",
          "type": "string"
        },
        "total_price": {
          "description": "The total price of this item, including options.",
          "example": "$20.50",
          "type": "string"
        }
      },
      "required": [
        "name",
        "price",
        "subtotal",
        "options",
        "total_price"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "orderOptionInstance": {
      "description": "Food order option",
      "properties": {
        "name": {
          "description": "Name for the order option.",
          "type": "string"
        },
        "price": {
          "description": "Price for the order option.",
          "example": "$12.60",
          "type": "string"
        },
        "quantity": {
          "description": "Quantity for the order option",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "quantity",
        "price"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingAccountListInstance": {
      "additionalProperties": false,
      "description": "Parking Account",
      "properties": {
        "access_devices": {
          "items": {
            "$ref": "#/definitions/accessDevicesInstance"
          },
          "type": "array"
        },
        "account_status": {
          "description": "Account status",
          "enum": [
            "open",
            "closed",
            "blocked"
          ],
          "type": "string"
        },
        "created_at": {
          "description": "Date-time the account was created.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        },
        "credit_card_number": {
          "description": "Account parking card pan number shadowed.",
          "type": "string"
        },
        "email": {
          "description": "Account email.",
          "type": "string"
        },
        "first_name": {
          "description": "Account first name.",
          "type": "string"
        },
        "last_name": {
          "description": "Account last name.",
          "type": "string"
        },
        "payment_method_token": {
          "description": "Account parking card payment token.",
          "type": "string"
        },
        "person_id": {
          "description": "Westfield UID for an account.",
          "type": "string"
        },
        "rule_group_guid": {
          "description": "Account rule group GUID.",
          "type": "string"
        },
        "updated_at": {
          "description": "Date-time the account was last updated.",
          "example": "2018-03-21T00:00:00Z",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "access_devices",
        "account_status",
        "created_at",
        "credit_card_number",
        "email",
        "first_name",
        "last_name",
        "payment_method_token",
        "person_id",
        "rule_group_guid",
        "updated_at"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingAccountsListResponse": {
      "additionalProperties": false,
      "description": "List parking accounts.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/parkingAccountListInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingHistoryResponse": {
      "additionalProperties": false,
      "description": "List parking sessions response.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/parkingSessionInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingInvoiceBody": {
      "additionalProperties": false,
      "description": "",
      "properties": {
        "centre_id": {
          "description": "Centre identifier.",
          "type": "string"
        },
        "end_date": {
          "description": "Request the invoice through given date.",
          "format": "date",
          "type": "string"
        },
        "license_plate": {
          "description": "Vehicle identifier.",
          "type": "string"
        },
        "start_date": {
          "description": "Request the invoice from the given date.",
          "format": "date",
          "type": "string"
        }
      },
      "required": [
        "centre_id",
        "end_date",
        "license_plate",
        "start_date"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingReceiptBody": {
      "additionalProperties": false,
      "description": "",
      "properties": {
        "parking_session_id": {
          "description": "Parking session identifier. Used to retrieve the data for the receipt. Session must belong to the person.",
          "type": "string"
        }
      },
      "required": [
        "parking_session_id"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingRefundBody": {
      "additionalProperties": false,
      "description": "",
      "properties": {
        "amount": {
          "description": "Amount to be refunded.",
          "type": "integer"
        },
        "parking_session_id": {
          "description": "Parking session identifier of the session to be refunded. Session must belong to the person.",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the refund.",
          "type": "string"
        }
      },
      "required": [
        "parking_session_id"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingRefundData": {
      "description": "Parking session refund data.",
      "properties": {
        "amount": {
          "description": "Amount in cents used to process the transaction.",
          "example": 250,
          "type": "integer"
        },
        "created_at": {
          "description": "Transaction creation date.",
          "format": "date-time",
          "type": "string"
        },
        "formatted_amount": {
          "description": "String representing the amount used to process the transaction.",
          "example": "$2.50",
          "type": "string"
        },
        "reason": {
          "description": "Reason provided when the transaction was processed.",
          "type": "string"
        },
        "requester_id": {
          "description": "Identifier of the staff user that requested the refund.",
          "type": "string"
        },
        "transaction_id": {
          "description": "Payments transaction identifier.",
          "type": "string"
        },
        "type": {
          "description": "The type of this transaction.",
          "enum": [
            "refund",
            "partial_refund"
          ],
          "type": "string"
        }
      },
      "required": [
        "created_at",
        "transaction_id",
        "type"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingRefundResponse": {
      "additionalProperties": false,
      "description": "Parking session refund response.",
      "properties": {
        "data": {
          "$ref": "#/definitions/parkingRefundData"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingSessionInstance": {
      "description": "Parking session",
      "properties": {
        "centre_id": {
          "description": "Centre identifier. Identifier of the centre where the parking session originated.",
          "type": "string"
        },
        "credit_card": {
          "$ref": "#/definitions/creditCardInstance"
        },
        "currency": {
          "description": "Currency code for the transaction.",
          "type": "string",
          "x-wf-example": "GBP"
        },
        "entry_at": {
          "description": "Entry date-time for the parking session.",
          "format": "date-time",
          "type": "string"
        },
        "exit_at": {
          "description": "Exit date-time for the parking session.",
          "format": "date-time",
          "type": "string"
        },
        "formatted_total_time": {
          "description": "String representing the total amount of time for the parking session.",
          "example": "2 HOURS",
          "type": "string"
        },
        "formatted_transaction_final_amount": {
          "description": "String representing the total amount for the parking session.",
          "example": "$2.50",
          "type": "string"
        },
        "parking_session_id": {
          "description": "Parking session identifier.",
          "type": "integer"
        },
        "payment_status": {
          "description": "The payment status of this session",
          "enum": [
            "succeeded",
            "failed",
            "pending",
            "refunded",
            "partial_refunded"
          ],
          "type": "string"
        },
        "refunds": {
          "description": "List of refunds made related to the session.",
          "items": {
            "$ref": "#/definitions/parkingRefundData"
          },
          "type": "array"
        },
        "total_time": {
          "description": "Total amount of time (in seconds) for the parking session.",
          "type": "integer"
        },
        "transaction_final_amount": {
          "description": "Transaction's final amount in cents.",
          "type": "integer"
        },
        "vehicle": {
          "$ref": "#/definitions/accountVehicleInstance"
        }
      },
      "required": [
        "centre_id",
        "currency",
        "credit_card",
        "entry_at",
        "exit_at",
        "formatted_total_time",
        "formatted_transaction_final_amount",
        "parking_session_id",
        "payment_status",
        "total_time",
        "transaction_final_amount",
        "vehicle"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingSignup422Error": {
      "additionalProperties": false,
      "properties": {
        "account": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors associated with the account details."
        },
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parkingSignup422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data on parking signup.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/parkingSignup422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "parseError": {
      "description": "List of errors.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "x-services": [
        "people_access"
      ]
    },
    "passwordChangeBody": {
      "description": "Data to change an account password.",
      "properties": {
        "current_password": {
          "description": "Current account's password",
          "type": "string"
        },
        "new_password": {
          "description": "New account's password",
          "maxLength": 30,
          "minLength": 8,
          "type": "string"
        }
      },
      "required": [
        "current_password",
        "new_password"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "people422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "people422Response": {
      "additionalProperties": false,
      "description": "Unprocessable entity",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/people422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "peopleRetrieveKidsResponse": {
      "additionalProperties": false,
      "description": "List of the kids in the account",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/kidsInstance"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "person400Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/parseError",
          "description": "A list of errors that do not apply to an attribute."
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "person400Response": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/person400Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "person422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "creation_source": {
          "$ref": "#/definitions/validationError"
        },
        "email": {
          "$ref": "#/definitions/validationError"
        },
        "first_name": {
          "$ref": "#/definitions/validationError"
        },
        "password": {
          "$ref": "#/definitions/validationError"
        },
        "phone_number": {
          "$ref": "#/definitions/validationError"
        },
        "primary_centre_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "person422Response": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/person422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "replaceInterestsRequest": {
      "description": "Data to replace interest list of account",
      "properties": {
        "interest_ids": {
          "description": "Interest identitfiers. A list of unique identitfiers for the interests",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "interests_updated_from": {
          "description": "Source from which the interests are being updated",
          "enum": [
            "android",
            "ios",
            "mobile_web",
            "web",
            "concierge"
          ],
          "type": "string"
        }
      },
      "required": [
        "interest_ids",
        "interests_updated_from"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "replaceKidsRequest": {
      "description": "Data to replace kids of an account",
      "properties": {
        "kids": {
          "description": "Data for new kid records.",
          "items": {
            "$ref": "#/definitions/kidsRequestObject"
          },
          "type": "array"
        }
      },
      "required": [
        "kids"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "resetPassword422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "A list of errors that do not apply to an attribute."
        },
        "country": {
          "$ref": "#/definitions/validationError",
          "description": "Country is missing or the value is empty."
        },
        "email": {
          "$ref": "#/definitions/validationError",
          "description": "Email is missing or the value is empty."
        },
        "person_id": {
          "$ref": "#/definitions/validationError",
          "description": "Person identifier is missing or the value is empty."
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "resetPassword422Response": {
      "additionalProperties": false,
      "description": "Response for invalid account's password.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/resetPassword422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "retrieveInterestsResponse": {
      "additionalProperties": false,
      "description": "Invalid data for upgrade",
      "properties": {
        "data": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ticket": {
      "properties": {
        "browser": {
          "description": "browser",
          "type": "string"
        },
        "centre_id": {
          "description": "Centre identifierier",
          "type": "string"
        },
        "description": {
          "description": "description of ticket",
          "type": "string"
        },
        "platform": {
          "description": "device platform",
          "type": "string"
        },
        "product": {
          "description": "Product related to the ticket",
          "type": "string"
        }
      },
      "required": [
        "centre_id",
        "description",
        "product"
      ],
      "x-services": [
        "people_access"
      ]
    },
    "ticket422Error": {
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "description": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "ticket422Response": {
      "additionalProperties": false,
      "description": "Response for missing params.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/ticket422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "unauthorizedError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "$ref": "#/definitions/validationError"
        },
        "credentials": {
          "$ref": "#/definitions/validationError"
        },
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "people_access",
        "wishlist"
      ]
    },
    "unauthorizedResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/unauthorizedError"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "people_access",
        "wishlist"
      ]
    },
    "updateAccount": {
      "properties": {
        "email": {
          "type": "string"
        },
        "email_marketing_opt_in": {
          "description": "Value is true if user is subscribed to marketing",
          "type": "boolean"
        },
        "first_name": {
          "maxLength": 50,
          "type": "string"
        },
        "gender": {
          "description": "User gender",
          "enum": [
            "female",
            "male"
          ],
          "type": "string"
        },
        "last_name": {
          "maxLength": 50,
          "type": "string"
        },
        "messaging_preferences": {
          "$ref": "#/definitions/MessagingPreferenceInstance"
        },
        "newsletter_subscriptions": {
          "description": "List of newsletter identifiers that the user is subscribed to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phone_number": {
          "description": "User's mobile phone number following the E.164 standard",
          "type": "string"
        },
        "primary_centre_id": {
          "description": "Identifier of the user primary center",
          "type": "string"
        },
        "sms_marketing_opt_in": {
          "description": "Value is true if user is subscribed to sms marketing",
          "type": "boolean"
        },
        "timezone": {
          "description": "User timezone",
          "type": "string"
        },
        "wifi_custom_data": {
          "description": "Custom data related to the user provided by wifi vendor",
          "type": "string"
        },
        "wifi_id": {
          "description": "User identifier on wifi vendor database",
          "type": "string"
        }
      },
      "x-services": [
        "people_access"
      ]
    },
    "updatePassword422Error": {
      "additionalProperties": false,
      "properties": {
        "current_password": {
          "$ref": "#/definitions/validationError"
        },
        "new_password": {
          "$ref": "#/definitions/validationError"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "updatePassword422Response": {
      "additionalProperties": false,
      "description": "Response for invalid account's password.",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/updatePassword422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "updatePasswordResetBody": {
      "description": "Data to reset an account password.",
      "properties": {
        "password": {
          "description": "Account password.",
          "maxLength": 30,
          "minLength": 8,
          "type": "string"
        },
        "person_id": {
          "description": "Person identifier. Used to identify the account.",
          "type": "string"
        }
      },
      "required": [
        "person_id",
        "password"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "upgrade422Error": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/validationError",
          "description": "Password and password confirmation do not match, or account is not a partial account"
        }
      },
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "upgrade422Response": {
      "additionalProperties": false,
      "description": "Response for invalid data for upgrade",
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/upgrade422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "upgradeAccountBody": {
      "description": "Data to upgrade account",
      "properties": {
        "country": {
          "description": "Country code of the account to be upgraded.",
          "enum": [
            "US",
            "UK",
            "AU",
            "NZ"
          ],
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "email": {
          "description": "Email of the partial account to be upgraded.",
          "type": "string"
        },
        "first_name": {
          "description": "First name of the user.",
          "maxLength": 50,
          "type": "string"
        },
        "last_name": {
          "description": "Last name of the user.",
          "maxLength": 50,
          "type": "string"
        },
        "password": {
          "description": "New password for the account to be upgraded.",
          "maxLength": 30,
          "minLength": 8,
          "type": "string"
        },
        "person_id": {
          "description": "Person identifier. Identifier of the account to be upgraded.",
          "type": "string"
        }
      },
      "required": [
        "first_name",
        "password"
      ],
      "type": "object",
      "x-services": [
        "people_access"
      ]
    },
    "wishlistItemInstance": {
      "type": "object",
      "required": [
        "data",
        "kind",
        "resource_id",
        "created_at"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/wishlistItemData"
        },
        "kind": {
          "description": "Wishlist item's external resource kind.",
          "type": "string",
          "enum": [
            "product",
            "deal",
            "event",
            "retailer"
          ],
          "example": "product"
        },
        "resource_id": {
          "description": "Wishlist item's external resource identifier.",
          "type": "string",
          "example": 1234
        },
        "created_at": {
          "description": "Date and Time when item was added to the Wishlist.",
          "type": "string",
          "format": "date-time"
        },
        "platform_source": {
          "description": "Platform source where it is being saved",
          "type": "string",
          "enum": [
            "android",
            "ios",
            "mobile_web",
            "web",
            "concierge"
          ],
          "example": "ios"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItemData": {
      "description": "Wishlist item's resource data.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "deal": {
          "$ref": "#/definitions/wishlistDeal"
        },
        "event": {
          "$ref": "#/definitions/wishlistEvent"
        },
        "product": {
          "$ref": "#/definitions/wishlistProduct"
        },
        "retailer": {
          "$ref": "#/definitions/wishlistRetailer"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistDeal": {
      "description": "Deal data.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Deal title.",
          "type": "string"
        },
        "retailer_id": {
          "description": "Retailer identifier. Identifier of the retailer that this deal is associated with.",
          "type": "string"
        },
        "retailer_name": {
          "description": "Display name of the retailer that this deal is associated with.",
          "type": "string"
        },
        "state": {
          "description": "Deal state.",
          "type": "string"
        },
        "ends_at": {
          "description": "Expiry date.",
          "type": "string",
          "format": "date-time"
        },
        "image": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistEvent": {
      "description": "Event data.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "occurences": {
          "description": "A list of datetimes that the event occurs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlistEventOccurrence"
          }
        },
        "retailers": {
          "description": "Retailers and stores associated with the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventRetailer"
          }
        },
        "image": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistEventOccurrence": {
      "description": "The dateTime that the event starts and ends.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "finishes_at": {
          "description": "Date and time the event ends.",
          "type": "string",
          "format": "date-time"
        },
        "starts_at": {
          "description": "Date and time the event starts.",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "eventRetailer": {
      "type": "object",
      "required": [
        "retailer_code",
        "retailer_id",
        "store_ids"
      ],
      "additionalProperties": false,
      "properties": {
        "retailer_code": {
          "type": "string",
          "description": "Retailer code of the retailer associated with the event"
        },
        "retailer_id": {
          "type": "integer",
          "description": "ID of the retailer associated with the event"
        },
        "store_ids": {
          "description": "IDs of stores for the retailer which is associated with the event",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistProduct": {
      "description": "Product data.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Display name of product.",
          "type": "string"
        },
        "image": {
          "description": "An image associated with this product (first image of first variant).",
          "type": "string"
        },
        "retailer_code": {
          "description": "Unique id associated with retailer of this product.",
          "type": "string"
        },
        "price": {
          "description": "Price of this product.",
          "type": "number"
        },
        "sale_price": {
          "description": "Sale price of this product.",
          "type": "number"
        },
        "retailer_name": {
          "description": "Name associated with retailer of this product.",
          "type": "string"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistRetailer": {
      "description": "Retailer data.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Display name of retailer.",
          "type": "string"
        },
        "logo": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItemResponse": {
      "type": "object",
      "description": "Wishlist item response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/wishlistItemInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItemListCreateBody": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/wishlistItemCreateBody"
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItemCreateBody": {
      "type": "object",
      "required": [
        "kind",
        "resource_id"
      ],
      "additionalProperties": false,
      "properties": {
        "kind": {
          "description": "Wishlist item's external resource kind.",
          "type": "string",
          "enum": [
            "product",
            "deal",
            "event",
            "retailer"
          ],
          "example": "product"
        },
        "resource_id": {
          "description": "Wishlist item's external resource identifier.",
          "type": "string",
          "example": 1234
        },
        "platform_source": {
          "description": "Platform source where it is being saved.",
          "type": "string",
          "enum": [
            "android",
            "ios",
            "mobile_web",
            "web",
            "concierge"
          ],
          "example": "android"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItem422Response": {
      "type": "object",
      "description": "Response for invalid data on create.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/wishlistItem422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "wishlistItem422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "kind": {
          "$ref": "#/definitions/validationError"
        },
        "external_resource_id": {
          "$ref": "#/definitions/validationError"
        },
        "platform_source": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "wishlist"
      ]
    },
    "favoritesResponse": {
      "type": "object",
      "description": "Favorites.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The favorited items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlistItemInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "wishlist"
      ]
    }
  }
}
