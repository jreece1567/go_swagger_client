package c_u_r_a_t_i_o_n_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c u r a t i o n s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c u r a t i o n s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCurationsCurationID deletes a curation

Request deletion of a curation.
*/
func (a *Client) DeleteCurationsCurationID(params *DeleteCurationsCurationIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCurationsCurationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCurationsCurationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCurationsCurationID",
		Method:             "DELETE",
		PathPattern:        "/curations/{curation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCurationsCurationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCurationsCurationIDNoContent), nil
}

/*
GetCurations lists curations

Request an array of curations filtered by allowed parameters.
*/
func (a *Client) GetCurations(params *GetCurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurations",
		Method:             "GET",
		PathPattern:        "/curations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurationsOK), nil
}

/*
GetCurationsCurationID individuals curation

Request a single curation.
*/
func (a *Client) GetCurationsCurationID(params *GetCurationsCurationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurationsCurationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurationsCurationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurationsCurationID",
		Method:             "GET",
		PathPattern:        "/curations/{curation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurationsCurationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurationsCurationIDOK), nil
}

/*
PatchCurationsCurationID updates a curation

Request update of a curation from JSON data in the request body.
*/
func (a *Client) PatchCurationsCurationID(params *PatchCurationsCurationIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchCurationsCurationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCurationsCurationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchCurationsCurationID",
		Method:             "PATCH",
		PathPattern:        "/curations/{curation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCurationsCurationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchCurationsCurationIDNoContent), nil
}

/*
PostCurations creates a curation

Request creation of a curation from JSON data in the request body.
*/
func (a *Client) PostCurations(params *PostCurationsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCurationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCurations",
		Method:             "POST",
		PathPattern:        "/curations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCurationsCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
