package c_u_r_a_t_i_o_n_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCurationsParams creates a new GetCurationsParams object
// with the default values initialized.
func NewGetCurationsParams() *GetCurationsParams {
	var (
		currentDefault bool  = bool(true)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCurationsParams{
		Current: &currentDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCurationsParamsWithTimeout creates a new GetCurationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCurationsParamsWithTimeout(timeout time.Duration) *GetCurationsParams {
	var (
		currentDefault bool  = bool(true)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCurationsParams{
		Current: &currentDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetCurationsParams contains all the parameters to send to the API endpoint
for the get curations operation typically these are written to a http.Request
*/
type GetCurationsParams struct {

	/*AvailableOnOrAfter
	  On or after this date. Request the curations available on or after the date.

	*/
	AvailableOnOrAfter *strfmt.DateTime
	/*CentreID
	  Centre identifier. Request the curations with centre_id. Lowercase code name for a specific centre. Must relate to store_id.

	*/
	CentreID *string
	/*Country
	  Country code. Request the curations with country code. Lowercase two-character code for country.

	*/
	Country *string
	/*Current
	  Current curations. Request to include only current (true) or all (false) curations.

	*/
	Current *bool
	/*Featured
	  Filter by featured

	*/
	Featured *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Limit
	  Limit the maximum number of results returned.

	*/
	Limit *int64
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*ProductCategoryID
	  Filter by product category ids

	*/
	ProductCategoryID *int64
	/*ProductCategoryPath
	  Filter by product category path

	*/
	ProductCategoryPath *string
	/*Sort
	  Sort results by one or more fields. Change sort order by adding desc or asc after field name.

	*/
	Sort []string
	/*Statuses
	  Statuses. Requests curations that include one of the listed statuses.

	*/
	Statuses []string

	timeout time.Duration
}

// WithAvailableOnOrAfter adds the availableOnOrAfter to the get curations params
func (o *GetCurationsParams) WithAvailableOnOrAfter(AvailableOnOrAfter *strfmt.DateTime) *GetCurationsParams {
	o.AvailableOnOrAfter = AvailableOnOrAfter
	return o
}

// WithCentreID adds the centreId to the get curations params
func (o *GetCurationsParams) WithCentreID(CentreID *string) *GetCurationsParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get curations params
func (o *GetCurationsParams) WithCountry(Country *string) *GetCurationsParams {
	o.Country = Country
	return o
}

// WithCurrent adds the current to the get curations params
func (o *GetCurationsParams) WithCurrent(Current *bool) *GetCurationsParams {
	o.Current = Current
	return o
}

// WithFeatured adds the featured to the get curations params
func (o *GetCurationsParams) WithFeatured(Featured *bool) *GetCurationsParams {
	o.Featured = Featured
	return o
}

// WithFields adds the fields to the get curations params
func (o *GetCurationsParams) WithFields(Fields []string) *GetCurationsParams {
	o.Fields = Fields
	return o
}

// WithLimit adds the limit to the get curations params
func (o *GetCurationsParams) WithLimit(Limit *int64) *GetCurationsParams {
	o.Limit = Limit
	return o
}

// WithPage adds the page to the get curations params
func (o *GetCurationsParams) WithPage(Page *int64) *GetCurationsParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get curations params
func (o *GetCurationsParams) WithPerPage(PerPage *int64) *GetCurationsParams {
	o.PerPage = PerPage
	return o
}

// WithProductCategoryID adds the productCategoryId to the get curations params
func (o *GetCurationsParams) WithProductCategoryID(ProductCategoryID *int64) *GetCurationsParams {
	o.ProductCategoryID = ProductCategoryID
	return o
}

// WithProductCategoryPath adds the productCategoryPath to the get curations params
func (o *GetCurationsParams) WithProductCategoryPath(ProductCategoryPath *string) *GetCurationsParams {
	o.ProductCategoryPath = ProductCategoryPath
	return o
}

// WithSort adds the sort to the get curations params
func (o *GetCurationsParams) WithSort(Sort []string) *GetCurationsParams {
	o.Sort = Sort
	return o
}

// WithStatuses adds the statuses to the get curations params
func (o *GetCurationsParams) WithStatuses(Statuses []string) *GetCurationsParams {
	o.Statuses = Statuses
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCurationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.AvailableOnOrAfter != nil {

		// query param available_on_or_after
		var qrAvailableOnOrAfter strfmt.DateTime
		if o.AvailableOnOrAfter != nil {
			qrAvailableOnOrAfter = *o.AvailableOnOrAfter
		}
		qAvailableOnOrAfter := qrAvailableOnOrAfter.String()
		if qAvailableOnOrAfter != "" {
			if err := r.SetQueryParam("available_on_or_after", qAvailableOnOrAfter); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Current != nil {

		// query param current
		var qrCurrent bool
		if o.Current != nil {
			qrCurrent = *o.Current
		}
		qCurrent := swag.FormatBool(qrCurrent)
		if qCurrent != "" {
			if err := r.SetQueryParam("current", qCurrent); err != nil {
				return err
			}
		}

	}

	if o.Featured != nil {

		// query param featured
		var qrFeatured bool
		if o.Featured != nil {
			qrFeatured = *o.Featured
		}
		qFeatured := swag.FormatBool(qrFeatured)
		if qFeatured != "" {
			if err := r.SetQueryParam("featured", qFeatured); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.ProductCategoryID != nil {

		// query param product_category_id
		var qrProductCategoryID int64
		if o.ProductCategoryID != nil {
			qrProductCategoryID = *o.ProductCategoryID
		}
		qProductCategoryID := swag.FormatInt64(qrProductCategoryID)
		if qProductCategoryID != "" {
			if err := r.SetQueryParam("product_category_id", qProductCategoryID); err != nil {
				return err
			}
		}

	}

	if o.ProductCategoryPath != nil {

		// query param product_category_path
		var qrProductCategoryPath string
		if o.ProductCategoryPath != nil {
			qrProductCategoryPath = *o.ProductCategoryPath
		}
		qProductCategoryPath := qrProductCategoryPath
		if qProductCategoryPath != "" {
			if err := r.SetQueryParam("product_category_path", qProductCategoryPath); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "csv")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
