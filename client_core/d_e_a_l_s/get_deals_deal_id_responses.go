package d_e_a_l_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// GetDealsDealIDReader is a Reader for the GetDealsDealID structure.
type GetDealsDealIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetDealsDealIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDealsDealIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetDealsDealIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDealsDealIDOK creates a GetDealsDealIDOK with default headers values
func NewGetDealsDealIDOK() *GetDealsDealIDOK {
	return &GetDealsDealIDOK{}
}

/*GetDealsDealIDOK handles this case with default header values.

Successfully retrieved the individual deal.
*/
type GetDealsDealIDOK struct {
	Payload *models_core.DealResponse
}

func (o *GetDealsDealIDOK) Error() string {
	return fmt.Sprintf("[GET /deals/{deal_id}][%d] getDealsDealIdOK  %+v", 200, o.Payload)
}

func (o *GetDealsDealIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.DealResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDealsDealIDNotFound creates a GetDealsDealIDNotFound with default headers values
func NewGetDealsDealIDNotFound() *GetDealsDealIDNotFound {
	return &GetDealsDealIDNotFound{}
}

/*GetDealsDealIDNotFound handles this case with default header values.

Deal not found.
*/
type GetDealsDealIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *GetDealsDealIDNotFound) Error() string {
	return fmt.Sprintf("[GET /deals/{deal_id}][%d] getDealsDealIdNotFound  %+v", 404, o.Payload)
}

func (o *GetDealsDealIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
