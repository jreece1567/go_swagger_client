package d_e_a_l_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new d e a l s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d e a l s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDealsDealID deletes a deal

Request deletion of a deal.
*/
func (a *Client) DeleteDealsDealID(params *DeleteDealsDealIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDealsDealIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDealsDealIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDealsDealID",
		Method:             "DELETE",
		PathPattern:        "/deals/{deal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDealsDealIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDealsDealIDNoContent), nil
}

/*
GetDeals lists deals

Request an array of deals filtered by allowed parameters.
*/
func (a *Client) GetDeals(params *GetDealsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDealsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDealsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeals",
		Method:             "GET",
		PathPattern:        "/deals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDealsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDealsOK), nil
}

/*
GetDealsCommentsCommentID individuals deal comment

Request a single deal comment.
*/
func (a *Client) GetDealsCommentsCommentID(params *GetDealsCommentsCommentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDealsCommentsCommentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDealsCommentsCommentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDealsCommentsCommentID",
		Method:             "GET",
		PathPattern:        "/deals/comments/{comment_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDealsCommentsCommentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDealsCommentsCommentIDOK), nil
}

/*
GetDealsDealID individuals deal

Request a single deal.
*/
func (a *Client) GetDealsDealID(params *GetDealsDealIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDealsDealIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDealsDealIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDealsDealID",
		Method:             "GET",
		PathPattern:        "/deals/{deal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDealsDealIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDealsDealIDOK), nil
}

/*
GetDealsDealIDComments lists deal comments

Request an array of deal comments.
*/
func (a *Client) GetDealsDealIDComments(params *GetDealsDealIDCommentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDealsDealIDCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDealsDealIDCommentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDealsDealIDComments",
		Method:             "GET",
		PathPattern:        "/deals/{deal_id}/comments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDealsDealIDCommentsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDealsDealIDCommentsOK), nil
}

/*
PatchDealsDealID updates a deal

Request update of a deal from JSON data in the request body.
*/
func (a *Client) PatchDealsDealID(params *PatchDealsDealIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchDealsDealIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDealsDealIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchDealsDealID",
		Method:             "PATCH",
		PathPattern:        "/deals/{deal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDealsDealIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDealsDealIDNoContent), nil
}

/*
PostDeals creates a deal

Request creation of a deal from JSON data in the request body.
*/
func (a *Client) PostDeals(params *PostDealsParams, authInfo runtime.ClientAuthInfoWriter) (*PostDealsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDealsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDeals",
		Method:             "POST",
		PathPattern:        "/deals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDealsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDealsCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
