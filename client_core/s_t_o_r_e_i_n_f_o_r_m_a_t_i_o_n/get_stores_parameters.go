package s_t_o_r_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStoresParams creates a new GetStoresParams object
// with the default values initialized.
func NewGetStoresParams() *GetStoresParams {
	var (
		centreIdDefault string   = string("sanfrancisco")
		deletedDefault  bool     = bool(false)
		pageDefault     int64    = int64(1)
		perPageDefault  int64    = int64(25)
		sortDefault     []string = []string{ "name asc" }
	)
	return &GetStoresParams{
		CentreID: &centreIdDefault,
		Deleted:  &deletedDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,
		Sort:     sortDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStoresParamsWithTimeout creates a new GetStoresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStoresParamsWithTimeout(timeout time.Duration) *GetStoresParams {
	var (
		centreIdDefault string   = string("sanfrancisco")
		deletedDefault  bool     = bool(false)
		pageDefault     int64    = int64(1)
		perPageDefault  int64    = int64(25)
		sortDefault     []string = []string { "name asc" }
	)
	return &GetStoresParams{
		CentreID: &centreIdDefault,
		Deleted:  &deletedDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,
		Sort:     sortDefault,

		timeout: timeout,
	}
}

/*GetStoresParams contains all the parameters to send to the API endpoint
for the get stores operation typically these are written to a http.Request
*/
type GetStoresParams struct {

	/*CategoryID
	  Category identifier. Request the stores with category_id.

	*/
	CategoryID *int64
	/*CentreID
	  Centre identifier. Request the stores with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Country
	  Country code. Request the stores with country code. Lowercase two-character code for country.

	*/
	Country *string
	/*Deleted
	  Deleted stores. Request to include (true) or not include (false) stores that are deleted.

	*/
	Deleted *bool
	/*Enabled
	  Select enabled stores. Request to include only enabled (true) or not enabled (false) stores. This will be deprecated. Please remove from future queries and uses statuses parameter instead.

	*/
	Enabled *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Q
	  Query. Request stores based on partial match on name.

	*/
	Q *string
	/*RetailerCode
	  Retailer code. Request the stores with retailer_code. Lowercase code name assigned a specific retailer.

	*/
	RetailerCode *string
	/*RetailerID
	  Retailer identifier. Request the stores with retaler_id.

	*/
	RetailerID *int64
	/*Sort
	  Sort results by one or more fields. Change sort order by adding desc or asc after field name.

	*/
	Sort []string
	/*Statuses
	  Statuses. Request stores that include the listed statuses. Live and Preview statuses with be returned by default

	*/
	Statuses []string
	/*StoreIds
	  List of store ids to be used for additional filtering of results.

	*/
	StoreIds []int64
	/*UpdatedSince
	  Updated since. Request the stores updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime
	/*WithFirstLetter
	  First letter of store. Request the stores by the normalized first letter of the store name.

	*/
	WithFirstLetter *string
	/*ZoneID
	  Zone identifier. Request the stores with zone_id. Lowercase name for a specific zone.

	*/
	ZoneID *string

	timeout time.Duration
}

// WithCategoryID adds the categoryId to the get stores params
func (o *GetStoresParams) WithCategoryID(CategoryID *int64) *GetStoresParams {
	o.CategoryID = CategoryID
	return o
}

// WithCentreID adds the centreId to the get stores params
func (o *GetStoresParams) WithCentreID(CentreID *string) *GetStoresParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get stores params
func (o *GetStoresParams) WithCountry(Country *string) *GetStoresParams {
	o.Country = Country
	return o
}

// WithDeleted adds the deleted to the get stores params
func (o *GetStoresParams) WithDeleted(Deleted *bool) *GetStoresParams {
	o.Deleted = Deleted
	return o
}

// WithEnabled adds the enabled to the get stores params
func (o *GetStoresParams) WithEnabled(Enabled *bool) *GetStoresParams {
	o.Enabled = Enabled
	return o
}

// WithFields adds the fields to the get stores params
func (o *GetStoresParams) WithFields(Fields []string) *GetStoresParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get stores params
func (o *GetStoresParams) WithPage(Page *int64) *GetStoresParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get stores params
func (o *GetStoresParams) WithPerPage(PerPage *int64) *GetStoresParams {
	o.PerPage = PerPage
	return o
}

// WithQ adds the q to the get stores params
func (o *GetStoresParams) WithQ(Q *string) *GetStoresParams {
	o.Q = Q
	return o
}

// WithRetailerCode adds the retailerCode to the get stores params
func (o *GetStoresParams) WithRetailerCode(RetailerCode *string) *GetStoresParams {
	o.RetailerCode = RetailerCode
	return o
}

// WithRetailerID adds the retailerId to the get stores params
func (o *GetStoresParams) WithRetailerID(RetailerID *int64) *GetStoresParams {
	o.RetailerID = RetailerID
	return o
}

// WithSort adds the sort to the get stores params
func (o *GetStoresParams) WithSort(Sort []string) *GetStoresParams {
	o.Sort = Sort
	return o
}

// WithStatuses adds the statuses to the get stores params
func (o *GetStoresParams) WithStatuses(Statuses []string) *GetStoresParams {
	o.Statuses = Statuses
	return o
}

// WithStoreIds adds the storeIds to the get stores params
func (o *GetStoresParams) WithStoreIds(StoreIds []int64) *GetStoresParams {
	o.StoreIds = StoreIds
	return o
}

// WithUpdatedSince adds the updatedSince to the get stores params
func (o *GetStoresParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetStoresParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WithWithFirstLetter adds the withFirstLetter to the get stores params
func (o *GetStoresParams) WithWithFirstLetter(WithFirstLetter *string) *GetStoresParams {
	o.WithFirstLetter = WithFirstLetter
	return o
}

// WithZoneID adds the zoneId to the get stores params
func (o *GetStoresParams) WithZoneID(ZoneID *string) *GetStoresParams {
	o.ZoneID = ZoneID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetStoresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CategoryID != nil {

		// query param category_id
		var qrCategoryID int64
		if o.CategoryID != nil {
			qrCategoryID = *o.CategoryID
		}
		qCategoryID := swag.FormatInt64(qrCategoryID)
		if qCategoryID != "" {
			if err := r.SetQueryParam("category_id", qCategoryID); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.RetailerCode != nil {

		// query param retailer_code
		var qrRetailerCode string
		if o.RetailerCode != nil {
			qrRetailerCode = *o.RetailerCode
		}
		qRetailerCode := qrRetailerCode
		if qRetailerCode != "" {
			if err := r.SetQueryParam("retailer_code", qRetailerCode); err != nil {
				return err
			}
		}

	}

	if o.RetailerID != nil {

		// query param retailer_id
		var qrRetailerID int64
		if o.RetailerID != nil {
			qrRetailerID = *o.RetailerID
		}
		qRetailerID := swag.FormatInt64(qrRetailerID)
		if qRetailerID != "" {
			if err := r.SetQueryParam("retailer_id", qRetailerID); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "csv")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	var valuesStoreIds []string
	for _, v := range o.StoreIds {
		valuesStoreIds = append(valuesStoreIds, swag.FormatInt64(v))
	}

	joinedStoreIds := swag.JoinByFormat(valuesStoreIds, "csv")
	// query array param store_ids
	if err := r.SetQueryParam("store_ids", joinedStoreIds...); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if o.WithFirstLetter != nil {

		// query param with_first_letter
		var qrWithFirstLetter string
		if o.WithFirstLetter != nil {
			qrWithFirstLetter = *o.WithFirstLetter
		}
		qWithFirstLetter := qrWithFirstLetter
		if qWithFirstLetter != "" {
			if err := r.SetQueryParam("with_first_letter", qWithFirstLetter); err != nil {
				return err
			}
		}

	}

	if o.ZoneID != nil {

		// query param zone_id
		var qrZoneID string
		if o.ZoneID != nil {
			qrZoneID = *o.ZoneID
		}
		qZoneID := qrZoneID
		if qZoneID != "" {
			if err := r.SetQueryParam("zone_id", qZoneID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
