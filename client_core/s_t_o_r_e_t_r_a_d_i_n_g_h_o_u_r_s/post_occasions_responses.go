package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PostOccasionsReader is a Reader for the PostOccasions structure.
type PostOccasionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostOccasionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostOccasionsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostOccasionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostOccasionsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostOccasionsCreated creates a PostOccasionsCreated with default headers values
func NewPostOccasionsCreated() *PostOccasionsCreated {
	return &PostOccasionsCreated{}
}

/*PostOccasionsCreated handles this case with default header values.

Successfully created an occasion.
*/
type PostOccasionsCreated struct {
	/*URI of created occasion.
	 */
	Location string

	Payload *models_core.OccasionInstanceResponse
}

func (o *PostOccasionsCreated) Error() string {
	return fmt.Sprintf("[POST /occasions][%d] postOccasionsCreated  %+v", 201, o.Payload)
}

func (o *PostOccasionsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header location
	o.Location = response.GetHeader("location")

	o.Payload = new(models_core.OccasionInstanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOccasionsUnauthorized creates a PostOccasionsUnauthorized with default headers values
func NewPostOccasionsUnauthorized() *PostOccasionsUnauthorized {
	return &PostOccasionsUnauthorized{}
}

/*PostOccasionsUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PostOccasionsUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PostOccasionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /occasions][%d] postOccasionsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostOccasionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOccasionsUnprocessableEntity creates a PostOccasionsUnprocessableEntity with default headers values
func NewPostOccasionsUnprocessableEntity() *PostOccasionsUnprocessableEntity {
	return &PostOccasionsUnprocessableEntity{}
}

/*PostOccasionsUnprocessableEntity handles this case with default header values.

Occasion not created. Returns an array of error messages explaining the problems with the provided attributes.
*/
type PostOccasionsUnprocessableEntity struct {
	Payload *models_core.Occasion422Response
}

func (o *PostOccasionsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /occasions][%d] postOccasionsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostOccasionsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Occasion422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
