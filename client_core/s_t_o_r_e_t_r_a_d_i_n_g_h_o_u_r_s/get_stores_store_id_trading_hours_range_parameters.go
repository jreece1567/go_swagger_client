package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStoresStoreIDTradingHoursRangeParams creates a new GetStoresStoreIDTradingHoursRangeParams object
// with the default values initialized.
func NewGetStoresStoreIDTradingHoursRangeParams() *GetStoresStoreIDTradingHoursRangeParams {
	var ()
	return &GetStoresStoreIDTradingHoursRangeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStoresStoreIDTradingHoursRangeParamsWithTimeout creates a new GetStoresStoreIDTradingHoursRangeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStoresStoreIDTradingHoursRangeParamsWithTimeout(timeout time.Duration) *GetStoresStoreIDTradingHoursRangeParams {
	var ()
	return &GetStoresStoreIDTradingHoursRangeParams{

		timeout: timeout,
	}
}

/*GetStoresStoreIDTradingHoursRangeParams contains all the parameters to send to the API endpoint
for the get stores store ID trading hours range operation typically these are written to a http.Request
*/
type GetStoresStoreIDTradingHoursRangeParams struct {

	/*CentreID
	  Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID string
	/*From
	  Start date. Request the store trading-hours on or after start date of a range.

	*/
	From strfmt.Date
	/*StoreID
	  Store identifier. Request the store trading-hours with store_id.

	*/
	StoreID int64
	/*To
	  End date. Request the store trading-hours on or before end date of a range.

	*/
	To strfmt.Date

	timeout time.Duration
}

// WithCentreID adds the centreId to the get stores store ID trading hours range params
func (o *GetStoresStoreIDTradingHoursRangeParams) WithCentreID(CentreID string) *GetStoresStoreIDTradingHoursRangeParams {
	o.CentreID = CentreID
	return o
}

// WithFrom adds the from to the get stores store ID trading hours range params
func (o *GetStoresStoreIDTradingHoursRangeParams) WithFrom(From strfmt.Date) *GetStoresStoreIDTradingHoursRangeParams {
	o.From = From
	return o
}

// WithStoreID adds the storeId to the get stores store ID trading hours range params
func (o *GetStoresStoreIDTradingHoursRangeParams) WithStoreID(StoreID int64) *GetStoresStoreIDTradingHoursRangeParams {
	o.StoreID = StoreID
	return o
}

// WithTo adds the to to the get stores store ID trading hours range params
func (o *GetStoresStoreIDTradingHoursRangeParams) WithTo(To strfmt.Date) *GetStoresStoreIDTradingHoursRangeParams {
	o.To = To
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetStoresStoreIDTradingHoursRangeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// query param centre_id
	qrCentreID := o.CentreID
	qCentreID := qrCentreID
	if qCentreID != "" {
		if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
			return err
		}
	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom.String()
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// path param store_id
	if err := r.SetPathParam("store_id", swag.FormatInt64(o.StoreID)); err != nil {
		return err
	}

	// query param to
	qrTo := o.To
	qTo := qrTo.String()
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
