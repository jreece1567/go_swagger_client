package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOccurrencesParticipantKindParticipantKindIDParams creates a new GetOccurrencesParticipantKindParticipantKindIDParams object
// with the default values initialized.
func NewGetOccurrencesParticipantKindParticipantKindIDParams() *GetOccurrencesParticipantKindParticipantKindIDParams {
	var ()
	return &GetOccurrencesParticipantKindParticipantKindIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOccurrencesParticipantKindParticipantKindIDParamsWithTimeout creates a new GetOccurrencesParticipantKindParticipantKindIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOccurrencesParticipantKindParticipantKindIDParamsWithTimeout(timeout time.Duration) *GetOccurrencesParticipantKindParticipantKindIDParams {
	var ()
	return &GetOccurrencesParticipantKindParticipantKindIDParams{

		timeout: timeout,
	}
}

/*GetOccurrencesParticipantKindParticipantKindIDParams contains all the parameters to send to the API endpoint
for the get occurrences participant kind participant kind ID operation typically these are written to a http.Request
*/
type GetOccurrencesParticipantKindParticipantKindIDParams struct {

	/*EndsAt
	  Filters occurrences that start on or before given date-time. The given date-time precision is only honored down to the minute

	*/
	EndsAt *strfmt.DateTime
	/*ParticipantKind
	  Participant kind. Used with participant_kind_id.

	*/
	ParticipantKind string
	/*ParticipantKindID
	  Participant kind identifier. Identifier for participant of type participant_kind.

	*/
	ParticipantKindID string
	/*StartsAt
	  Filters occurrences that start on or after given date-time. The given date-time precision is only honored down to the minute

	*/
	StartsAt *strfmt.DateTime

	timeout time.Duration
}

// WithEndsAt adds the endsAt to the get occurrences participant kind participant kind ID params
func (o *GetOccurrencesParticipantKindParticipantKindIDParams) WithEndsAt(EndsAt *strfmt.DateTime) *GetOccurrencesParticipantKindParticipantKindIDParams {
	o.EndsAt = EndsAt
	return o
}

// WithParticipantKind adds the participantKind to the get occurrences participant kind participant kind ID params
func (o *GetOccurrencesParticipantKindParticipantKindIDParams) WithParticipantKind(ParticipantKind string) *GetOccurrencesParticipantKindParticipantKindIDParams {
	o.ParticipantKind = ParticipantKind
	return o
}

// WithParticipantKindID adds the participantKindId to the get occurrences participant kind participant kind ID params
func (o *GetOccurrencesParticipantKindParticipantKindIDParams) WithParticipantKindID(ParticipantKindID string) *GetOccurrencesParticipantKindParticipantKindIDParams {
	o.ParticipantKindID = ParticipantKindID
	return o
}

// WithStartsAt adds the startsAt to the get occurrences participant kind participant kind ID params
func (o *GetOccurrencesParticipantKindParticipantKindIDParams) WithStartsAt(StartsAt *strfmt.DateTime) *GetOccurrencesParticipantKindParticipantKindIDParams {
	o.StartsAt = StartsAt
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetOccurrencesParticipantKindParticipantKindIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.EndsAt != nil {

		// query param ends_at
		var qrEndsAt strfmt.DateTime
		if o.EndsAt != nil {
			qrEndsAt = *o.EndsAt
		}
		qEndsAt := qrEndsAt.String()
		if qEndsAt != "" {
			if err := r.SetQueryParam("ends_at", qEndsAt); err != nil {
				return err
			}
		}

	}

	// path param participant_kind
	if err := r.SetPathParam("participant_kind", o.ParticipantKind); err != nil {
		return err
	}

	// path param participant_kind_id
	if err := r.SetPathParam("participant_kind_id", o.ParticipantKindID); err != nil {
		return err
	}

	if o.StartsAt != nil {

		// query param starts_at
		var qrStartsAt strfmt.DateTime
		if o.StartsAt != nil {
			qrStartsAt = *o.StartsAt
		}
		qStartsAt := qrStartsAt.String()
		if qStartsAt != "" {
			if err := r.SetQueryParam("starts_at", qStartsAt); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
