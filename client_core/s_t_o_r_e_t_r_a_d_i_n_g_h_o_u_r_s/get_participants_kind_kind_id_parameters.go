package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParticipantsKindKindIDParams creates a new GetParticipantsKindKindIDParams object
// with the default values initialized.
func NewGetParticipantsKindKindIDParams() *GetParticipantsKindKindIDParams {
	var ()
	return &GetParticipantsKindKindIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParticipantsKindKindIDParamsWithTimeout creates a new GetParticipantsKindKindIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParticipantsKindKindIDParamsWithTimeout(timeout time.Duration) *GetParticipantsKindKindIDParams {
	var ()
	return &GetParticipantsKindKindIDParams{

		timeout: timeout,
	}
}

/*GetParticipantsKindKindIDParams contains all the parameters to send to the API endpoint
for the get participants kind kind ID operation typically these are written to a http.Request
*/
type GetParticipantsKindKindIDParams struct {

	/*Kind
	  Participant kind. Request to the participant with kind.

	*/
	Kind string
	/*KindID
	  Participant key. Request to the participant with kind_id.

	*/
	KindID string

	timeout time.Duration
}

// WithKind adds the kind to the get participants kind kind ID params
func (o *GetParticipantsKindKindIDParams) WithKind(Kind string) *GetParticipantsKindKindIDParams {
	o.Kind = Kind
	return o
}

// WithKindID adds the kindId to the get participants kind kind ID params
func (o *GetParticipantsKindKindIDParams) WithKindID(KindID string) *GetParticipantsKindKindIDParams {
	o.KindID = KindID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetParticipantsKindKindIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param kind
	if err := r.SetPathParam("kind", o.Kind); err != nil {
		return err
	}

	// path param kind_id
	if err := r.SetPathParam("kind_id", o.KindID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
