package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOccasionsParams creates a new GetOccasionsParams object
// with the default values initialized.
func NewGetOccasionsParams() *GetOccasionsParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(50)
	)
	return &GetOccasionsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOccasionsParamsWithTimeout creates a new GetOccasionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOccasionsParamsWithTimeout(timeout time.Duration) *GetOccasionsParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(50)
	)
	return &GetOccasionsParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetOccasionsParams contains all the parameters to send to the API endpoint
for the get occasions operation typically these are written to a http.Request
*/
type GetOccasionsParams struct {

	/*CentreID
	  Centre identifier. Request occasions with centre_id. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london'].

	*/
	CentreID *string
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*OverlapEndAt
	  Overlap end at. Request occasions which start before the overlap end_at Date-time. Must be used with overlap_start_at.

	*/
	OverlapEndAt *strfmt.DateTime
	/*OverlapStartAt
	  Overlap start at. Request occasions which start on or after the overlap start_at Date-time. Must be used with overlap_end_at.

	*/
	OverlapStartAt *strfmt.DateTime
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64

	timeout time.Duration
}

// WithCentreID adds the centreId to the get occasions params
func (o *GetOccasionsParams) WithCentreID(CentreID *string) *GetOccasionsParams {
	o.CentreID = CentreID
	return o
}

// WithFields adds the fields to the get occasions params
func (o *GetOccasionsParams) WithFields(Fields []string) *GetOccasionsParams {
	o.Fields = Fields
	return o
}

// WithOverlapEndAt adds the overlapEndAt to the get occasions params
func (o *GetOccasionsParams) WithOverlapEndAt(OverlapEndAt *strfmt.DateTime) *GetOccasionsParams {
	o.OverlapEndAt = OverlapEndAt
	return o
}

// WithOverlapStartAt adds the overlapStartAt to the get occasions params
func (o *GetOccasionsParams) WithOverlapStartAt(OverlapStartAt *strfmt.DateTime) *GetOccasionsParams {
	o.OverlapStartAt = OverlapStartAt
	return o
}

// WithPage adds the page to the get occasions params
func (o *GetOccasionsParams) WithPage(Page *int64) *GetOccasionsParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get occasions params
func (o *GetOccasionsParams) WithPerPage(PerPage *int64) *GetOccasionsParams {
	o.PerPage = PerPage
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetOccasionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.OverlapEndAt != nil {

		// query param overlap_end_at
		var qrOverlapEndAt strfmt.DateTime
		if o.OverlapEndAt != nil {
			qrOverlapEndAt = *o.OverlapEndAt
		}
		qOverlapEndAt := qrOverlapEndAt.String()
		if qOverlapEndAt != "" {
			if err := r.SetQueryParam("overlap_end_at", qOverlapEndAt); err != nil {
				return err
			}
		}

	}

	if o.OverlapStartAt != nil {

		// query param overlap_start_at
		var qrOverlapStartAt strfmt.DateTime
		if o.OverlapStartAt != nil {
			qrOverlapStartAt = *o.OverlapStartAt
		}
		qOverlapStartAt := qrOverlapStartAt.String()
		if qOverlapStartAt != "" {
			if err := r.SetQueryParam("overlap_start_at", qOverlapStartAt); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
