package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new s t o r e t r a d i n g h o u r s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s t o r e t r a d i n g h o u r s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteOccasionsOccasionID deletes an occasion

Request deletion of an occasion.
*/
func (a *Client) DeleteOccasionsOccasionID(params *DeleteOccasionsOccasionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOccasionsOccasionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOccasionsOccasionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOccasionsOccasionID",
		Method:             "DELETE",
		PathPattern:        "/occasions/{occasion_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOccasionsOccasionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOccasionsOccasionIDNoContent), nil
}

/*
DeleteParticipantsParticipantID deletes a participant

Request deletion of a participant.
*/
func (a *Client) DeleteParticipantsParticipantID(params *DeleteParticipantsParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteParticipantsParticipantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParticipantsParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteParticipantsParticipantID",
		Method:             "DELETE",
		PathPattern:        "/participants/{participant_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteParticipantsParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteParticipantsParticipantIDNoContent), nil
}

/*
DeleteSchedulesScheduleID deletes a schedule

Request deletion of a schedule.
*/
func (a *Client) DeleteSchedulesScheduleID(params *DeleteSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSchedulesScheduleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchedulesScheduleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSchedulesScheduleID",
		Method:             "DELETE",
		PathPattern:        "/schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSchedulesScheduleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSchedulesScheduleIDNoContent), nil
}

/*
DeleteStoresStoreIDTradingHoursTradingHourID deletes a store trading hour

Request deletion of a store trading-hour.
*/
func (a *Client) DeleteStoresStoreIDTradingHoursTradingHourID(params *DeleteStoresStoreIDTradingHoursTradingHourIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoresStoreIDTradingHoursTradingHourIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoresStoreIDTradingHoursTradingHourIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteStoresStoreIDTradingHoursTradingHourID",
		Method:             "DELETE",
		PathPattern:        "/stores/{store_id}/trading-hours/{trading_hour_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoresStoreIDTradingHoursTradingHourIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoresStoreIDTradingHoursTradingHourIDNoContent), nil
}

/*
GetOccasions lists occasions

Request an array of occasions filtered by allowed parameters.
*/
func (a *Client) GetOccasions(params *GetOccasionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetOccasionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOccasionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOccasions",
		Method:             "GET",
		PathPattern:        "/occasions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOccasionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOccasionsOK), nil
}

/*
GetOccurrencesParticipantKindParticipantKindID lists occurrences

Request an array of schedules occurrences by participant.
*/
func (a *Client) GetOccurrencesParticipantKindParticipantKindID(params *GetOccurrencesParticipantKindParticipantKindIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOccurrencesParticipantKindParticipantKindIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOccurrencesParticipantKindParticipantKindIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOccurrencesParticipantKindParticipantKindID",
		Method:             "GET",
		PathPattern:        "/occurrences/{participant_kind}/{participant_kind_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOccurrencesParticipantKindParticipantKindIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOccurrencesParticipantKindParticipantKindIDOK), nil
}

/*
GetParticipants lists participants

Request an array of participants filtered by allowed parameters.
*/
func (a *Client) GetParticipants(params *GetParticipantsParams, authInfo runtime.ClientAuthInfoWriter) (*GetParticipantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParticipants",
		Method:             "GET",
		PathPattern:        "/participants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParticipantsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParticipantsOK), nil
}

/*
GetParticipantsKindKindID individules participant

Request a single participant.
*/
func (a *Client) GetParticipantsKindKindID(params *GetParticipantsKindKindIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetParticipantsKindKindIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParticipantsKindKindIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParticipantsKindKindID",
		Method:             "GET",
		PathPattern:        "/participants/{kind}/{kind_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParticipantsKindKindIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParticipantsKindKindIDOK), nil
}

/*
GetParticipantsParticipantID individules participant

Request a single participant.
*/
func (a *Client) GetParticipantsParticipantID(params *GetParticipantsParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetParticipantsParticipantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParticipantsParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetParticipantsParticipantID",
		Method:             "GET",
		PathPattern:        "/participants/{participant_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParticipantsParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetParticipantsParticipantIDOK), nil
}

/*
GetSchedules lists schedules

Request an array of schedules filtered by allowed parameters.
*/
func (a *Client) GetSchedules(params *GetSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSchedules",
		Method:             "GET",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchedulesOK), nil
}

/*
GetStoreTradingHours lists all store trading hours

Request an array of store trading hours filtered by allowed parameters.
*/
func (a *Client) GetStoreTradingHours(params *GetStoreTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoreTradingHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoreTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoreTradingHours",
		Method:             "GET",
		PathPattern:        "/store_trading_hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoreTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoreTradingHoursOK), nil
}

/*
GetStoreTradingHoursRange lists all store trading hours for a date range

Request an array of store trading hours filtered by allowed parameters.
*/
func (a *Client) GetStoreTradingHoursRange(params *GetStoreTradingHoursRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoreTradingHoursRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoreTradingHoursRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoreTradingHoursRange",
		Method:             "GET",
		PathPattern:        "/store_trading_hours/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoreTradingHoursRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoreTradingHoursRangeOK), nil
}

/*
GetStoresStoreIDTradingHours lists store trading hours

Request an array of store trading hours filtered by allowed parameters.
*/
func (a *Client) GetStoresStoreIDTradingHours(params *GetStoresStoreIDTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoresStoreIDTradingHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoresStoreIDTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoresStoreIDTradingHours",
		Method:             "GET",
		PathPattern:        "/stores/{store_id}/trading-hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoresStoreIDTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoresStoreIDTradingHoursOK), nil
}

/*
GetStoresStoreIDTradingHoursRange lists store trading hours for a date range

Request an array of store trading hours filtered by allowed parameters.
*/
func (a *Client) GetStoresStoreIDTradingHoursRange(params *GetStoresStoreIDTradingHoursRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoresStoreIDTradingHoursRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoresStoreIDTradingHoursRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStoresStoreIDTradingHoursRange",
		Method:             "GET",
		PathPattern:        "/stores/{store_id}/trading-hours/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoresStoreIDTradingHoursRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoresStoreIDTradingHoursRangeOK), nil
}

/*
PatchOccasionsOccasionID updates a occasion

Request update of an occasion from JSON data in the request body.
*/
func (a *Client) PatchOccasionsOccasionID(params *PatchOccasionsOccasionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchOccasionsOccasionIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchOccasionsOccasionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchOccasionsOccasionID",
		Method:             "PATCH",
		PathPattern:        "/occasions/{occasion_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchOccasionsOccasionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOccasionsOccasionIDNoContent), nil
}

/*
PatchParticipantsParticipantID updates a participant

Request update of a participant from JSON data in the request body.
*/
func (a *Client) PatchParticipantsParticipantID(params *PatchParticipantsParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchParticipantsParticipantIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchParticipantsParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchParticipantsParticipantID",
		Method:             "PATCH",
		PathPattern:        "/participants/{participant_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchParticipantsParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchParticipantsParticipantIDNoContent), nil
}

/*
PatchSchedulesScheduleID updates a schedule

Request update of a schedule from JSON data in the request body.
*/
func (a *Client) PatchSchedulesScheduleID(params *PatchSchedulesScheduleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSchedulesScheduleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSchedulesScheduleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSchedulesScheduleID",
		Method:             "PATCH",
		PathPattern:        "/schedules/{schedule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSchedulesScheduleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSchedulesScheduleIDNoContent), nil
}

/*
PostOccasions creates an occasion

Request creation of an occasion from JSON data in the request body.
*/
func (a *Client) PostOccasions(params *PostOccasionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostOccasionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOccasionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOccasions",
		Method:             "POST",
		PathPattern:        "/occasions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOccasionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOccasionsCreated), nil
}

/*
PostParticipants creates a participant

Request creation of a participant from JSON data in the request body.
*/
func (a *Client) PostParticipants(params *PostParticipantsParams, authInfo runtime.ClientAuthInfoWriter) (*PostParticipantsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParticipantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostParticipants",
		Method:             "POST",
		PathPattern:        "/participants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostParticipantsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostParticipantsCreated), nil
}

/*
PostSchedules creates a schedule

Request creation of a schedule from JSON data in the request body.
*/
func (a *Client) PostSchedules(params *PostSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSchedulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSchedules",
		Method:             "POST",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSchedulesCreated), nil
}

/*
PostStoresStoreIDTradingHours creates a store trading hours

Request creation of store trading-hours from JSON data in the request body.
*/
func (a *Client) PostStoresStoreIDTradingHours(params *PostStoresStoreIDTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*PostStoresStoreIDTradingHoursCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStoresStoreIDTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostStoresStoreIDTradingHours",
		Method:             "POST",
		PathPattern:        "/stores/{store_id}/trading-hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostStoresStoreIDTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStoresStoreIDTradingHoursCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
