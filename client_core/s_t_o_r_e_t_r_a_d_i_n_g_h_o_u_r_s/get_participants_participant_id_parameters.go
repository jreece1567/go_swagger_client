package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParticipantsParticipantIDParams creates a new GetParticipantsParticipantIDParams object
// with the default values initialized.
func NewGetParticipantsParticipantIDParams() *GetParticipantsParticipantIDParams {
	var ()
	return &GetParticipantsParticipantIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParticipantsParticipantIDParamsWithTimeout creates a new GetParticipantsParticipantIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParticipantsParticipantIDParamsWithTimeout(timeout time.Duration) *GetParticipantsParticipantIDParams {
	var ()
	return &GetParticipantsParticipantIDParams{

		timeout: timeout,
	}
}

/*GetParticipantsParticipantIDParams contains all the parameters to send to the API endpoint
for the get participants participant ID operation typically these are written to a http.Request
*/
type GetParticipantsParticipantIDParams struct {

	/*ParticipantID
	  Participant identifier. Request to the participant with participant_id.

	*/
	ParticipantID int64

	timeout time.Duration
}

// WithParticipantID adds the participantId to the get participants participant ID params
func (o *GetParticipantsParticipantIDParams) WithParticipantID(ParticipantID int64) *GetParticipantsParticipantIDParams {
	o.ParticipantID = ParticipantID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetParticipantsParticipantIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param participant_id
	if err := r.SetPathParam("participant_id", swag.FormatInt64(o.ParticipantID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
