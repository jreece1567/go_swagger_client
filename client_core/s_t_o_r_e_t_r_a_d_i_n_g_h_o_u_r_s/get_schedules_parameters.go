package s_t_o_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSchedulesParams creates a new GetSchedulesParams object
// with the default values initialized.
func NewGetSchedulesParams() *GetSchedulesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetSchedulesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSchedulesParamsWithTimeout creates a new GetSchedulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSchedulesParamsWithTimeout(timeout time.Duration) *GetSchedulesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetSchedulesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetSchedulesParams contains all the parameters to send to the API endpoint
for the get schedules operation typically these are written to a http.Request
*/
type GetSchedulesParams struct {

	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*IncludeFollowee
	  Followee flag. Request Schedules includes the ones that given participant is following.

	*/
	IncludeFollowee *bool
	/*OverlapEndAt
	  Overlap end at. Request schedules which start before the overlap end_at Date-time. Must be used with overlap_start_at.

	*/
	OverlapEndAt *strfmt.DateTime
	/*OverlapStartAt
	  Overlap start at. Request schedules which start on or after the overlap start_at Date-time. Must be used with overlap_end_at.

	*/
	OverlapStartAt *strfmt.DateTime
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*ParticipantID
	  Participant identifier. Request schedules with participant_id.

	*/
	ParticipantID *int64
	/*ParticipantKind
	  Type of participant. Used with participant_kind_id..

	*/
	ParticipantKind *string
	/*ParticipantKindID
	  Participant kind identifier. Identifier for participant of type participant_kind.

	*/
	ParticipantKindID *string
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*ScheduleIds
	  List of Schedule identifiers. Request schedules for each schedule_id.

	*/
	ScheduleIds []int64
	/*StoreID
	  Store identifier. Request schedules with store_id.

	*/
	StoreID *int64
	/*Type
	  Type of schedule.

	*/
	Type *string

	timeout time.Duration
}

// WithFields adds the fields to the get schedules params
func (o *GetSchedulesParams) WithFields(Fields []string) *GetSchedulesParams {
	o.Fields = Fields
	return o
}

// WithIncludeFollowee adds the includeFollowee to the get schedules params
func (o *GetSchedulesParams) WithIncludeFollowee(IncludeFollowee *bool) *GetSchedulesParams {
	o.IncludeFollowee = IncludeFollowee
	return o
}

// WithOverlapEndAt adds the overlapEndAt to the get schedules params
func (o *GetSchedulesParams) WithOverlapEndAt(OverlapEndAt *strfmt.DateTime) *GetSchedulesParams {
	o.OverlapEndAt = OverlapEndAt
	return o
}

// WithOverlapStartAt adds the overlapStartAt to the get schedules params
func (o *GetSchedulesParams) WithOverlapStartAt(OverlapStartAt *strfmt.DateTime) *GetSchedulesParams {
	o.OverlapStartAt = OverlapStartAt
	return o
}

// WithPage adds the page to the get schedules params
func (o *GetSchedulesParams) WithPage(Page *int64) *GetSchedulesParams {
	o.Page = Page
	return o
}

// WithParticipantID adds the participantId to the get schedules params
func (o *GetSchedulesParams) WithParticipantID(ParticipantID *int64) *GetSchedulesParams {
	o.ParticipantID = ParticipantID
	return o
}

// WithParticipantKind adds the participantKind to the get schedules params
func (o *GetSchedulesParams) WithParticipantKind(ParticipantKind *string) *GetSchedulesParams {
	o.ParticipantKind = ParticipantKind
	return o
}

// WithParticipantKindID adds the participantKindId to the get schedules params
func (o *GetSchedulesParams) WithParticipantKindID(ParticipantKindID *string) *GetSchedulesParams {
	o.ParticipantKindID = ParticipantKindID
	return o
}

// WithPerPage adds the perPage to the get schedules params
func (o *GetSchedulesParams) WithPerPage(PerPage *int64) *GetSchedulesParams {
	o.PerPage = PerPage
	return o
}

// WithScheduleIds adds the scheduleIds to the get schedules params
func (o *GetSchedulesParams) WithScheduleIds(ScheduleIds []int64) *GetSchedulesParams {
	o.ScheduleIds = ScheduleIds
	return o
}

// WithStoreID adds the storeId to the get schedules params
func (o *GetSchedulesParams) WithStoreID(StoreID *int64) *GetSchedulesParams {
	o.StoreID = StoreID
	return o
}

// WithType adds the type to the get schedules params
func (o *GetSchedulesParams) WithType(Type *string) *GetSchedulesParams {
	o.Type = Type
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetSchedulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.IncludeFollowee != nil {

		// query param include_followee
		var qrIncludeFollowee bool
		if o.IncludeFollowee != nil {
			qrIncludeFollowee = *o.IncludeFollowee
		}
		qIncludeFollowee := swag.FormatBool(qrIncludeFollowee)
		if qIncludeFollowee != "" {
			if err := r.SetQueryParam("include_followee", qIncludeFollowee); err != nil {
				return err
			}
		}

	}

	if o.OverlapEndAt != nil {

		// query param overlap_end_at
		var qrOverlapEndAt strfmt.DateTime
		if o.OverlapEndAt != nil {
			qrOverlapEndAt = *o.OverlapEndAt
		}
		qOverlapEndAt := qrOverlapEndAt.String()
		if qOverlapEndAt != "" {
			if err := r.SetQueryParam("overlap_end_at", qOverlapEndAt); err != nil {
				return err
			}
		}

	}

	if o.OverlapStartAt != nil {

		// query param overlap_start_at
		var qrOverlapStartAt strfmt.DateTime
		if o.OverlapStartAt != nil {
			qrOverlapStartAt = *o.OverlapStartAt
		}
		qOverlapStartAt := qrOverlapStartAt.String()
		if qOverlapStartAt != "" {
			if err := r.SetQueryParam("overlap_start_at", qOverlapStartAt); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.ParticipantID != nil {

		// query param participant_id
		var qrParticipantID int64
		if o.ParticipantID != nil {
			qrParticipantID = *o.ParticipantID
		}
		qParticipantID := swag.FormatInt64(qrParticipantID)
		if qParticipantID != "" {
			if err := r.SetQueryParam("participant_id", qParticipantID); err != nil {
				return err
			}
		}

	}

	if o.ParticipantKind != nil {

		// query param participant_kind
		var qrParticipantKind string
		if o.ParticipantKind != nil {
			qrParticipantKind = *o.ParticipantKind
		}
		qParticipantKind := qrParticipantKind
		if qParticipantKind != "" {
			if err := r.SetQueryParam("participant_kind", qParticipantKind); err != nil {
				return err
			}
		}

	}

	if o.ParticipantKindID != nil {

		// query param participant_kind_id
		var qrParticipantKindID string
		if o.ParticipantKindID != nil {
			qrParticipantKindID = *o.ParticipantKindID
		}
		qParticipantKindID := qrParticipantKindID
		if qParticipantKindID != "" {
			if err := r.SetQueryParam("participant_kind_id", qParticipantKindID); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	var valuesScheduleIds []string
	for _, v := range o.ScheduleIds {
		valuesScheduleIds = append(valuesScheduleIds, swag.FormatInt64(v))
	}

	joinedScheduleIds := swag.JoinByFormat(valuesScheduleIds, "csv")
	// query array param schedule_ids
	if err := r.SetQueryParam("schedule_ids", joinedScheduleIds...); err != nil {
		return err
	}

	if o.StoreID != nil {

		// query param store_id
		var qrStoreID int64
		if o.StoreID != nil {
			qrStoreID = *o.StoreID
		}
		qStoreID := swag.FormatInt64(qrStoreID)
		if qStoreID != "" {
			if err := r.SetQueryParam("store_id", qStoreID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
