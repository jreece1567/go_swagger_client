package m_o_v_i_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresCentreIDMoviesParams creates a new GetCentresCentreIDMoviesParams object
// with the default values initialized.
func NewGetCentresCentreIDMoviesParams() *GetCentresCentreIDMoviesParams {
	var (
		deletedDefault bool  = bool(false)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresCentreIDMoviesParams{
		Deleted: &deletedDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresCentreIDMoviesParamsWithTimeout creates a new GetCentresCentreIDMoviesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresCentreIDMoviesParamsWithTimeout(timeout time.Duration) *GetCentresCentreIDMoviesParams {
	var (
		deletedDefault bool  = bool(false)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresCentreIDMoviesParams{
		Deleted: &deletedDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetCentresCentreIDMoviesParams contains all the parameters to send to the API endpoint
for the get centres centre ID movies operation typically these are written to a http.Request
*/
type GetCentresCentreIDMoviesParams struct {

	/*CentreID
	  Centre identifier. Request movies with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID string
	/*Date
	  Play date. Request the movies playing on play date.

	*/
	Date *strfmt.Date
	/*Deleted
	  Deleted movies. Request to include (true) or not include (false) movies that are deleted.

	*/
	Deleted *bool
	/*EndDate
	  End date. Request the movies playing on or before end date of a range.

	*/
	EndDate *strfmt.Date
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*StartDate
	  Start date. Request the movies playing on or after start date of a range.

	*/
	StartDate *strfmt.Date
	/*UpdatedSince
	  Updated since. Request the movies updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCentreID adds the centreId to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithCentreID(CentreID string) *GetCentresCentreIDMoviesParams {
	o.CentreID = CentreID
	return o
}

// WithDate adds the date to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithDate(Date *strfmt.Date) *GetCentresCentreIDMoviesParams {
	o.Date = Date
	return o
}

// WithDeleted adds the deleted to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithDeleted(Deleted *bool) *GetCentresCentreIDMoviesParams {
	o.Deleted = Deleted
	return o
}

// WithEndDate adds the endDate to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithEndDate(EndDate *strfmt.Date) *GetCentresCentreIDMoviesParams {
	o.EndDate = EndDate
	return o
}

// WithFields adds the fields to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithFields(Fields []string) *GetCentresCentreIDMoviesParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithPage(Page *int64) *GetCentresCentreIDMoviesParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithPerPage(PerPage *int64) *GetCentresCentreIDMoviesParams {
	o.PerPage = PerPage
	return o
}

// WithStartDate adds the startDate to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithStartDate(StartDate *strfmt.Date) *GetCentresCentreIDMoviesParams {
	o.StartDate = StartDate
	return o
}

// WithUpdatedSince adds the updatedSince to the get centres centre ID movies params
func (o *GetCentresCentreIDMoviesParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetCentresCentreIDMoviesParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresCentreIDMoviesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param centre_id
	if err := r.SetPathParam("centre_id", o.CentreID); err != nil {
		return err
	}

	if o.Date != nil {

		// query param date
		var qrDate strfmt.Date
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate.String()
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate strfmt.Date
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {
			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate strfmt.Date
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
