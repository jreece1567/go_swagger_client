package m_o_v_i_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new m o v i e i n f o r m a t i o n API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m o v i e i n f o r m a t i o n API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCentresCentreIDMovies lists movies and session times

Request an array of movies filtered by allowed parameters.
*/
func (a *Client) GetCentresCentreIDMovies(params *GetCentresCentreIDMoviesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresCentreIDMoviesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresCentreIDMoviesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresCentreIDMovies",
		Method:             "GET",
		PathPattern:        "/centres/{centre_id}/movies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresCentreIDMoviesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresCentreIDMoviesOK), nil
}

/*
GetCentresCentreIDMoviesMovieID individuals movie and session times

Request a single movie.
*/
func (a *Client) GetCentresCentreIDMoviesMovieID(params *GetCentresCentreIDMoviesMovieIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresCentreIDMoviesMovieIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresCentreIDMoviesMovieIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresCentreIDMoviesMovieID",
		Method:             "GET",
		PathPattern:        "/centres/{centre_id}/movies/{movie_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresCentreIDMoviesMovieIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresCentreIDMoviesMovieIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
