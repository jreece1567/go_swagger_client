package c_e_n_t_r_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresParams creates a new GetCentresParams object
// with the default values initialized.
func NewGetCentresParams() *GetCentresParams {
	var (
		enabledDefault bool  = bool(true)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresParams{
		Enabled: &enabledDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresParamsWithTimeout creates a new GetCentresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresParamsWithTimeout(timeout time.Duration) *GetCentresParams {
	var (
		enabledDefault bool  = bool(true)
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresParams{
		Enabled: &enabledDefault,
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetCentresParams contains all the parameters to send to the API endpoint
for the get centres operation typically these are written to a http.Request
*/
type GetCentresParams struct {

	/*CentreID
	  Centre identifier. Request the centre with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Country
	  Country code. Request centres with country code. Lowercase two-character code for country.

	*/
	Country *string
	/*Enabled
	  Enabled centres. Request only enabled (true) or not enabled (false) centres.

	*/
	Enabled *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*MaxDistance
	  Distance limit (in kilometers). Combines with 'near_to' centre to set maximum distance to search for up to three centres.

	*/
	MaxDistance *int64
	/*NearTo
	  Centre identifier. Request the three closest centres within 'max_distance' of the given centre, sorted by distance from the given centre.

	*/
	NearTo *string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*State
	  State or region code in uppercase. Request the centres with state. Currently only the AU and US states are available.

	*/
	State *string
	/*Statuses
	  Statuses. Requests centres that include one of the listed statuses.

	*/
	Statuses []string
	/*UpdatedSince
	  Updated since. Request the centres updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCentreID adds the centreId to the get centres params
func (o *GetCentresParams) WithCentreID(CentreID *string) *GetCentresParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get centres params
func (o *GetCentresParams) WithCountry(Country *string) *GetCentresParams {
	o.Country = Country
	return o
}

// WithEnabled adds the enabled to the get centres params
func (o *GetCentresParams) WithEnabled(Enabled *bool) *GetCentresParams {
	o.Enabled = Enabled
	return o
}

// WithFields adds the fields to the get centres params
func (o *GetCentresParams) WithFields(Fields []string) *GetCentresParams {
	o.Fields = Fields
	return o
}

// WithMaxDistance adds the maxDistance to the get centres params
func (o *GetCentresParams) WithMaxDistance(MaxDistance *int64) *GetCentresParams {
	o.MaxDistance = MaxDistance
	return o
}

// WithNearTo adds the nearTo to the get centres params
func (o *GetCentresParams) WithNearTo(NearTo *string) *GetCentresParams {
	o.NearTo = NearTo
	return o
}

// WithPage adds the page to the get centres params
func (o *GetCentresParams) WithPage(Page *int64) *GetCentresParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get centres params
func (o *GetCentresParams) WithPerPage(PerPage *int64) *GetCentresParams {
	o.PerPage = PerPage
	return o
}

// WithState adds the state to the get centres params
func (o *GetCentresParams) WithState(State *string) *GetCentresParams {
	o.State = State
	return o
}

// WithStatuses adds the statuses to the get centres params
func (o *GetCentresParams) WithStatuses(Statuses []string) *GetCentresParams {
	o.Statuses = Statuses
	return o
}

// WithUpdatedSince adds the updatedSince to the get centres params
func (o *GetCentresParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetCentresParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.MaxDistance != nil {

		// query param max_distance
		var qrMaxDistance int64
		if o.MaxDistance != nil {
			qrMaxDistance = *o.MaxDistance
		}
		qMaxDistance := swag.FormatInt64(qrMaxDistance)
		if qMaxDistance != "" {
			if err := r.SetQueryParam("max_distance", qMaxDistance); err != nil {
				return err
			}
		}

	}

	if o.NearTo != nil {

		// query param near_to
		var qrNearTo string
		if o.NearTo != nil {
			qrNearTo = *o.NearTo
		}
		qNearTo := qrNearTo
		if qNearTo != "" {
			if err := r.SetQueryParam("near_to", qNearTo); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
