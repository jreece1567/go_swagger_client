package c_e_n_t_r_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresNewslettersInfoParams creates a new GetCentresNewslettersInfoParams object
// with the default values initialized.
func NewGetCentresNewslettersInfoParams() *GetCentresNewslettersInfoParams {
	var ()
	return &GetCentresNewslettersInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresNewslettersInfoParamsWithTimeout creates a new GetCentresNewslettersInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresNewslettersInfoParamsWithTimeout(timeout time.Duration) *GetCentresNewslettersInfoParams {
	var ()
	return &GetCentresNewslettersInfoParams{

		timeout: timeout,
	}
}

/*GetCentresNewslettersInfoParams contains all the parameters to send to the API endpoint
for the get centres newsletters info operation typically these are written to a http.Request
*/
type GetCentresNewslettersInfoParams struct {

	/*NewsletterIds
	  Newsletter identifiers. Request information about newsletters with newsletter_ids. Lowercase code name for a specific newsletter. Example: ['airportwest_fashion','parramatta_family','belconnen_food']

	*/
	NewsletterIds []string

	timeout time.Duration
}

// WithNewsletterIds adds the newsletterIds to the get centres newsletters info params
func (o *GetCentresNewslettersInfoParams) WithNewsletterIds(NewsletterIds []string) *GetCentresNewslettersInfoParams {
	o.NewsletterIds = NewsletterIds
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresNewslettersInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	valuesNewsletterIds := o.NewsletterIds

	joinedNewsletterIds := swag.JoinByFormat(valuesNewsletterIds, "csv")
	// query array param newsletter_ids
	if err := r.SetQueryParam("newsletter_ids", joinedNewsletterIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
