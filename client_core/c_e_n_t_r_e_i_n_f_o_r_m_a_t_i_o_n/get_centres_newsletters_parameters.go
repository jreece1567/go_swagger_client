package c_e_n_t_r_e_i_n_f_o_r_m_a_t_i_o_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresNewslettersParams creates a new GetCentresNewslettersParams object
// with the default values initialized.
func NewGetCentresNewslettersParams() *GetCentresNewslettersParams {
	var ()
	return &GetCentresNewslettersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresNewslettersParamsWithTimeout creates a new GetCentresNewslettersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresNewslettersParamsWithTimeout(timeout time.Duration) *GetCentresNewslettersParams {
	var ()
	return &GetCentresNewslettersParams{

		timeout: timeout,
	}
}

/*GetCentresNewslettersParams contains all the parameters to send to the API endpoint
for the get centres newsletters operation typically these are written to a http.Request
*/
type GetCentresNewslettersParams struct {

	/*CentreID
	  Centre identifier. Request the centre newsletters with centre_id. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']

	*/
	CentreID *string

	timeout time.Duration
}

// WithCentreID adds the centreId to the get centres newsletters params
func (o *GetCentresNewslettersParams) WithCentreID(CentreID *string) *GetCentresNewslettersParams {
	o.CentreID = CentreID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresNewslettersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
