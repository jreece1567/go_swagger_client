package c_e_n_t_r_e_p_a_r_k_i_n_g_r_a_t_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PatchCentresParkingsParkingIDReader is a Reader for the PatchCentresParkingsParkingID structure.
type PatchCentresParkingsParkingIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchCentresParkingsParkingIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchCentresParkingsParkingIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchCentresParkingsParkingIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchCentresParkingsParkingIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchCentresParkingsParkingIDNoContent creates a PatchCentresParkingsParkingIDNoContent with default headers values
func NewPatchCentresParkingsParkingIDNoContent() *PatchCentresParkingsParkingIDNoContent {
	return &PatchCentresParkingsParkingIDNoContent{}
}

/*PatchCentresParkingsParkingIDNoContent handles this case with default header values.

Successfully updated the centre parking rates.
*/
type PatchCentresParkingsParkingIDNoContent struct {
}

func (o *PatchCentresParkingsParkingIDNoContent) Error() string {
	return fmt.Sprintf("[PATCH /centres/parkings/{parking_id}][%d] patchCentresParkingsParkingIdNoContent ", 204)
}

func (o *PatchCentresParkingsParkingIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCentresParkingsParkingIDUnauthorized creates a PatchCentresParkingsParkingIDUnauthorized with default headers values
func NewPatchCentresParkingsParkingIDUnauthorized() *PatchCentresParkingsParkingIDUnauthorized {
	return &PatchCentresParkingsParkingIDUnauthorized{}
}

/*PatchCentresParkingsParkingIDUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PatchCentresParkingsParkingIDUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PatchCentresParkingsParkingIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /centres/parkings/{parking_id}][%d] patchCentresParkingsParkingIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchCentresParkingsParkingIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCentresParkingsParkingIDNotFound creates a PatchCentresParkingsParkingIDNotFound with default headers values
func NewPatchCentresParkingsParkingIDNotFound() *PatchCentresParkingsParkingIDNotFound {
	return &PatchCentresParkingsParkingIDNotFound{}
}

/*PatchCentresParkingsParkingIDNotFound handles this case with default header values.

Centre parking not found.
*/
type PatchCentresParkingsParkingIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *PatchCentresParkingsParkingIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /centres/parkings/{parking_id}][%d] patchCentresParkingsParkingIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchCentresParkingsParkingIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
