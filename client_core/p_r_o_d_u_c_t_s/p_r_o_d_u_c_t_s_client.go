package p_r_o_d_u_c_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new p r o d u c t s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for p r o d u c t s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProductsMultipleProductIds multiples products

Request an array of multiple products.
*/
/*
func (a *Client) GetProductsMultipleProductIds(params *GetProductsMultipleProductIdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsMultipleProductIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsMultipleProductIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductsMultipleProductIds",
		Method:             "GET",
		PathPattern:        "/products/multiple/{product_ids}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductsMultipleProductIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductsMultipleProductIdsOK), nil
}
*/
/*
GetProductsMultipleProductIdsSyndicated multiples syndicated products

Request an array of multiple syndicated products.
*/
/*
func (a *Client) GetProductsMultipleProductIdsSyndicated(params *GetProductsMultipleProductIdsSyndicatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsMultipleProductIdsSyndicatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsMultipleProductIdsSyndicatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductsMultipleProductIdsSyndicated",
		Method:             "GET",
		PathPattern:        "/products/multiple/{product_ids}/syndicated",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductsMultipleProductIdsSyndicatedReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductsMultipleProductIdsSyndicatedOK), nil
}
*/
/*
GetProductsProductID individuals product

Request a single product.
*/
func (a *Client) GetProductsProductID(params *GetProductsProductIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsProductIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsProductIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductsProductID",
		Method:             "GET",
		PathPattern:        "/products/{product_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductsProductIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductsProductIDOK), nil
}

/*
GetProductsProductIDSyndicated individuals syndicated product

Request a single syndicated product.
*/
func (a *Client) GetProductsProductIDSyndicated(params *GetProductsProductIDSyndicatedParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductsProductIDSyndicatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsProductIDSyndicatedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductsProductIDSyndicated",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/syndicated",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProductsProductIDSyndicatedReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductsProductIDSyndicatedOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
