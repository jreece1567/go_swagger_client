package c_e_n_t_r_e_e_v_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEventsParams creates a new GetEventsParams object
// with the default values initialized.
func NewGetEventsParams() *GetEventsParams {
	var (
		centreIdDefault  string = string("sanfrancisco")
		deletedDefault   bool   = bool(false)
		featuredDefault  bool   = bool(false)
		pageDefault      int64  = int64(1)
		perPageDefault   int64  = int64(10)
		publishedDefault bool   = bool(false)
	)
	return &GetEventsParams{
		CentreID:  &centreIdDefault,
		Deleted:   &deletedDefault,
		Featured:  &featuredDefault,
		Page:      &pageDefault,
		PerPage:   &perPageDefault,
		Published: &publishedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsParamsWithTimeout creates a new GetEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventsParamsWithTimeout(timeout time.Duration) *GetEventsParams {
	var (
		centreIdDefault  string = string("sanfrancisco")
		deletedDefault   bool   = bool(false)
		featuredDefault  bool   = bool(false)
		pageDefault      int64  = int64(1)
		perPageDefault   int64  = int64(10)
		publishedDefault bool   = bool(false)
	)
	return &GetEventsParams{
		CentreID:  &centreIdDefault,
		Deleted:   &deletedDefault,
		Featured:  &featuredDefault,
		Page:      &pageDefault,
		PerPage:   &perPageDefault,
		Published: &publishedDefault,

		timeout: timeout,
	}
}

/*GetEventsParams contains all the parameters to send to the API endpoint
for the get events operation typically these are written to a http.Request
*/
type GetEventsParams struct {

	/*AvailableOnOrAfter
	  On or after this date. Request the events available on or after the date. If centre_id is supplied then the date-time is local, otherwise it is UTC.

	*/
	AvailableOnOrAfter *strfmt.DateTime
	/*CentreID
	  Centre identifier. Request the events with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Deleted
	  Deleted events. Request to include (true) or not include (false) events that are deleted.

	*/
	Deleted *bool
	/*EventIds
	  List of event ids to be used for additional filtering of results.

	*/
	EventIds []int64
	/*Featured
	  Featured events. Request to include only featured (true) or not featured (false) events.

	*/
	Featured *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Published
	  Published events. Request to include only published (true) or all (false) events.

	*/
	Published *bool
	/*RetailerCode
	  Retailer code. Request the events with retailer_code.

	*/
	RetailerCode *string
	/*Sort
	  Sort results by one or more fields. Change sort order by adding desc or asc after field name.

	*/
	Sort []string
	/*Status
	  Status. Request events with status.

	*/
	Status *string
	/*Statuses
	  Statuses. Requests events that include one of the listed statuses.

	*/
	Statuses []string
	/*UpdatedSince
	  Updated since. Request the events updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithAvailableOnOrAfter adds the availableOnOrAfter to the get events params
func (o *GetEventsParams) WithAvailableOnOrAfter(AvailableOnOrAfter *strfmt.DateTime) *GetEventsParams {
	o.AvailableOnOrAfter = AvailableOnOrAfter
	return o
}

// WithCentreID adds the centreId to the get events params
func (o *GetEventsParams) WithCentreID(CentreID *string) *GetEventsParams {
	o.CentreID = CentreID
	return o
}

// WithDeleted adds the deleted to the get events params
func (o *GetEventsParams) WithDeleted(Deleted *bool) *GetEventsParams {
	o.Deleted = Deleted
	return o
}

// WithEventIds adds the eventIds to the get events params
func (o *GetEventsParams) WithEventIds(EventIds []int64) *GetEventsParams {
	o.EventIds = EventIds
	return o
}

// WithFeatured adds the featured to the get events params
func (o *GetEventsParams) WithFeatured(Featured *bool) *GetEventsParams {
	o.Featured = Featured
	return o
}

// WithFields adds the fields to the get events params
func (o *GetEventsParams) WithFields(Fields []string) *GetEventsParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get events params
func (o *GetEventsParams) WithPage(Page *int64) *GetEventsParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get events params
func (o *GetEventsParams) WithPerPage(PerPage *int64) *GetEventsParams {
	o.PerPage = PerPage
	return o
}

// WithPublished adds the published to the get events params
func (o *GetEventsParams) WithPublished(Published *bool) *GetEventsParams {
	o.Published = Published
	return o
}

// WithRetailerCode adds the retailerCode to the get events params
func (o *GetEventsParams) WithRetailerCode(RetailerCode *string) *GetEventsParams {
	o.RetailerCode = RetailerCode
	return o
}

// WithSort adds the sort to the get events params
func (o *GetEventsParams) WithSort(Sort []string) *GetEventsParams {
	o.Sort = Sort
	return o
}

// WithStatus adds the status to the get events params
func (o *GetEventsParams) WithStatus(Status *string) *GetEventsParams {
	o.Status = Status
	return o
}

// WithStatuses adds the statuses to the get events params
func (o *GetEventsParams) WithStatuses(Statuses []string) *GetEventsParams {
	o.Statuses = Statuses
	return o
}

// WithUpdatedSince adds the updatedSince to the get events params
func (o *GetEventsParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetEventsParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.AvailableOnOrAfter != nil {

		// query param available_on_or_after
		var qrAvailableOnOrAfter strfmt.DateTime
		if o.AvailableOnOrAfter != nil {
			qrAvailableOnOrAfter = *o.AvailableOnOrAfter
		}
		qAvailableOnOrAfter := qrAvailableOnOrAfter.String()
		if qAvailableOnOrAfter != "" {
			if err := r.SetQueryParam("available_on_or_after", qAvailableOnOrAfter); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	var valuesEventIds []string
	for _, v := range o.EventIds {
		valuesEventIds = append(valuesEventIds, swag.FormatInt64(v))
	}

	joinedEventIds := swag.JoinByFormat(valuesEventIds, "csv")
	// query array param event_ids
	if err := r.SetQueryParam("event_ids", joinedEventIds...); err != nil {
		return err
	}

	if o.Featured != nil {

		// query param featured
		var qrFeatured bool
		if o.Featured != nil {
			qrFeatured = *o.Featured
		}
		qFeatured := swag.FormatBool(qrFeatured)
		if qFeatured != "" {
			if err := r.SetQueryParam("featured", qFeatured); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Published != nil {

		// query param published
		var qrPublished bool
		if o.Published != nil {
			qrPublished = *o.Published
		}
		qPublished := swag.FormatBool(qrPublished)
		if qPublished != "" {
			if err := r.SetQueryParam("published", qPublished); err != nil {
				return err
			}
		}

	}

	if o.RetailerCode != nil {

		// query param retailer_code
		var qrRetailerCode string
		if o.RetailerCode != nil {
			qrRetailerCode = *o.RetailerCode
		}
		qRetailerCode := qrRetailerCode
		if qRetailerCode != "" {
			if err := r.SetQueryParam("retailer_code", qRetailerCode); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "csv")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
