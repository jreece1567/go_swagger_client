package c_e_n_t_r_e_e_v_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// GetEventsEventIDReader is a Reader for the GetEventsEventID structure.
type GetEventsEventIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetEventsEventIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetEventsEventIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetEventsEventIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEventsEventIDOK creates a GetEventsEventIDOK with default headers values
func NewGetEventsEventIDOK() *GetEventsEventIDOK {
	return &GetEventsEventIDOK{}
}

/*GetEventsEventIDOK handles this case with default header values.

Successfully retrieved the individual event.
*/
type GetEventsEventIDOK struct {
	Payload *models_core.EventResponse
}

func (o *GetEventsEventIDOK) Error() string {
	return fmt.Sprintf("[GET /events/{event_id}][%d] getEventsEventIdOK  %+v", 200, o.Payload)
}

func (o *GetEventsEventIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.EventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsEventIDNotFound creates a GetEventsEventIDNotFound with default headers values
func NewGetEventsEventIDNotFound() *GetEventsEventIDNotFound {
	return &GetEventsEventIDNotFound{}
}

/*GetEventsEventIDNotFound handles this case with default header values.

Event not found.
*/
type GetEventsEventIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *GetEventsEventIDNotFound) Error() string {
	return fmt.Sprintf("[GET /events/{event_id}][%d] getEventsEventIdNotFound  %+v", 404, o.Payload)
}

func (o *GetEventsEventIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
