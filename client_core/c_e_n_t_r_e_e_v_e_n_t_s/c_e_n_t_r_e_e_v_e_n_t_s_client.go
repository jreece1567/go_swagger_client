package c_e_n_t_r_e_e_v_e_n_t_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c e n t r e e v e n t s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c e n t r e e v e n t s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteEventsEventID deletes an event

Request deletion of an event.
*/
func (a *Client) DeleteEventsEventID(params *DeleteEventsEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventsEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEventsEventID",
		Method:             "DELETE",
		PathPattern:        "/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEventsEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventsEventIDNoContent), nil
}

/*
GetEvents lists events

Request an array of events filtered by allowed parameters.
*/
func (a *Client) GetEvents(params *GetEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEvents",
		Method:             "GET",
		PathPattern:        "/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsOK), nil
}

/*
GetEventsEventID individuals event

Request a single event.
*/
func (a *Client) GetEventsEventID(params *GetEventsEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventsEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEventsEventID",
		Method:             "GET",
		PathPattern:        "/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventsEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsEventIDOK), nil
}

/*
PatchEventsEventID updates an event

Request update of an event from JSON data in the request body.
*/
func (a *Client) PatchEventsEventID(params *PatchEventsEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchEventsEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEventsEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchEventsEventID",
		Method:             "PATCH",
		PathPattern:        "/events/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEventsEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchEventsEventIDNoContent), nil
}

/*
PostEvents creates an event

Request creation of an event from JSON data in the request body.
*/
func (a *Client) PostEvents(params *PostEventsParams, authInfo runtime.ClientAuthInfoWriter) (*PostEventsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEvents",
		Method:             "POST",
		PathPattern:        "/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEventsCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
