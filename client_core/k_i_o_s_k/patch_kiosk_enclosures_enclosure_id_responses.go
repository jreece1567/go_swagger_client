package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PatchKioskEnclosuresEnclosureIDReader is a Reader for the PatchKioskEnclosuresEnclosureID structure.
type PatchKioskEnclosuresEnclosureIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchKioskEnclosuresEnclosureIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchKioskEnclosuresEnclosureIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchKioskEnclosuresEnclosureIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchKioskEnclosuresEnclosureIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPatchKioskEnclosuresEnclosureIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchKioskEnclosuresEnclosureIDNoContent creates a PatchKioskEnclosuresEnclosureIDNoContent with default headers values
func NewPatchKioskEnclosuresEnclosureIDNoContent() *PatchKioskEnclosuresEnclosureIDNoContent {
	return &PatchKioskEnclosuresEnclosureIDNoContent{}
}

/*PatchKioskEnclosuresEnclosureIDNoContent handles this case with default header values.

Successfully updated the enclosure.
*/
type PatchKioskEnclosuresEnclosureIDNoContent struct {
}

func (o *PatchKioskEnclosuresEnclosureIDNoContent) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/enclosures/{enclosure_id}][%d] patchKioskEnclosuresEnclosureIdNoContent ", 204)
}

func (o *PatchKioskEnclosuresEnclosureIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchKioskEnclosuresEnclosureIDUnauthorized creates a PatchKioskEnclosuresEnclosureIDUnauthorized with default headers values
func NewPatchKioskEnclosuresEnclosureIDUnauthorized() *PatchKioskEnclosuresEnclosureIDUnauthorized {
	return &PatchKioskEnclosuresEnclosureIDUnauthorized{}
}

/*PatchKioskEnclosuresEnclosureIDUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PatchKioskEnclosuresEnclosureIDUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PatchKioskEnclosuresEnclosureIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/enclosures/{enclosure_id}][%d] patchKioskEnclosuresEnclosureIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKioskEnclosuresEnclosureIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKioskEnclosuresEnclosureIDNotFound creates a PatchKioskEnclosuresEnclosureIDNotFound with default headers values
func NewPatchKioskEnclosuresEnclosureIDNotFound() *PatchKioskEnclosuresEnclosureIDNotFound {
	return &PatchKioskEnclosuresEnclosureIDNotFound{}
}

/*PatchKioskEnclosuresEnclosureIDNotFound handles this case with default header values.

Enclosure not found.
*/
type PatchKioskEnclosuresEnclosureIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *PatchKioskEnclosuresEnclosureIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/enclosures/{enclosure_id}][%d] patchKioskEnclosuresEnclosureIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchKioskEnclosuresEnclosureIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKioskEnclosuresEnclosureIDUnprocessableEntity creates a PatchKioskEnclosuresEnclosureIDUnprocessableEntity with default headers values
func NewPatchKioskEnclosuresEnclosureIDUnprocessableEntity() *PatchKioskEnclosuresEnclosureIDUnprocessableEntity {
	return &PatchKioskEnclosuresEnclosureIDUnprocessableEntity{}
}

/*PatchKioskEnclosuresEnclosureIDUnprocessableEntity handles this case with default header values.

Enclosure not updated. Returns an array of error messages explaining the problems with the provided attributes.
*/
type PatchKioskEnclosuresEnclosureIDUnprocessableEntity struct {
	Payload *models_core.Enclosure422Response
}

func (o *PatchKioskEnclosuresEnclosureIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/enclosures/{enclosure_id}][%d] patchKioskEnclosuresEnclosureIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchKioskEnclosuresEnclosureIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Enclosure422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
