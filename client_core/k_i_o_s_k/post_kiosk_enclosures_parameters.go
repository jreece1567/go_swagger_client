package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// NewPostKioskEnclosuresParams creates a new PostKioskEnclosuresParams object
// with the default values initialized.
func NewPostKioskEnclosuresParams() *PostKioskEnclosuresParams {
	var ()
	return &PostKioskEnclosuresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostKioskEnclosuresParamsWithTimeout creates a new PostKioskEnclosuresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostKioskEnclosuresParamsWithTimeout(timeout time.Duration) *PostKioskEnclosuresParams {
	var ()
	return &PostKioskEnclosuresParams{

		timeout: timeout,
	}
}

/*PostKioskEnclosuresParams contains all the parameters to send to the API endpoint
for the post kiosk enclosures operation typically these are written to a http.Request
*/
type PostKioskEnclosuresParams struct {

	/*Authorization
	  Staff Access token.

	*/
	Authorization string
	/*EnclosureData
	  Data to create an enclosure.

	*/
	EnclosureData *models_core.EnclosureCreateBody

	timeout time.Duration
}

// WithAuthorization adds the authorization to the post kiosk enclosures params
func (o *PostKioskEnclosuresParams) WithAuthorization(Authorization string) *PostKioskEnclosuresParams {
	o.Authorization = Authorization
	return o
}

// WithEnclosureData adds the enclosureData to the post kiosk enclosures params
func (o *PostKioskEnclosuresParams) WithEnclosureData(EnclosureData *models_core.EnclosureCreateBody) *PostKioskEnclosuresParams {
	o.EnclosureData = EnclosureData
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostKioskEnclosuresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.EnclosureData == nil {
		o.EnclosureData = new(models_core.EnclosureCreateBody)
	}

	if err := r.SetBodyParam(o.EnclosureData); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
