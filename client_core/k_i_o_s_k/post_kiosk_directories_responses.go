package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PostKioskDirectoriesReader is a Reader for the PostKioskDirectories structure.
type PostKioskDirectoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostKioskDirectoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostKioskDirectoriesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostKioskDirectoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostKioskDirectoriesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostKioskDirectoriesCreated creates a PostKioskDirectoriesCreated with default headers values
func NewPostKioskDirectoriesCreated() *PostKioskDirectoriesCreated {
	return &PostKioskDirectoriesCreated{}
}

/*PostKioskDirectoriesCreated handles this case with default header values.

Successfully created the directory.
*/
type PostKioskDirectoriesCreated struct {
	Payload *models_core.DirectoryResponse
}

func (o *PostKioskDirectoriesCreated) Error() string {
	return fmt.Sprintf("[POST /kiosk/directories][%d] postKioskDirectoriesCreated  %+v", 201, o.Payload)
}

func (o *PostKioskDirectoriesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.DirectoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKioskDirectoriesUnauthorized creates a PostKioskDirectoriesUnauthorized with default headers values
func NewPostKioskDirectoriesUnauthorized() *PostKioskDirectoriesUnauthorized {
	return &PostKioskDirectoriesUnauthorized{}
}

/*PostKioskDirectoriesUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PostKioskDirectoriesUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PostKioskDirectoriesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /kiosk/directories][%d] postKioskDirectoriesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKioskDirectoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKioskDirectoriesUnprocessableEntity creates a PostKioskDirectoriesUnprocessableEntity with default headers values
func NewPostKioskDirectoriesUnprocessableEntity() *PostKioskDirectoriesUnprocessableEntity {
	return &PostKioskDirectoriesUnprocessableEntity{}
}

/*PostKioskDirectoriesUnprocessableEntity handles this case with default header values.

Directory not created. Returns an array of error messages explaining the problems with the provided attributes.
*/
type PostKioskDirectoriesUnprocessableEntity struct {
	Payload *models_core.Directory422Response
}

func (o *PostKioskDirectoriesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /kiosk/directories][%d] postKioskDirectoriesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostKioskDirectoriesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Directory422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
