package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// GetKioskEnclosuresEnclosureIDReader is a Reader for the GetKioskEnclosuresEnclosureID structure.
type GetKioskEnclosuresEnclosureIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetKioskEnclosuresEnclosureIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetKioskEnclosuresEnclosureIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetKioskEnclosuresEnclosureIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetKioskEnclosuresEnclosureIDOK creates a GetKioskEnclosuresEnclosureIDOK with default headers values
func NewGetKioskEnclosuresEnclosureIDOK() *GetKioskEnclosuresEnclosureIDOK {
	return &GetKioskEnclosuresEnclosureIDOK{}
}

/*GetKioskEnclosuresEnclosureIDOK handles this case with default header values.

Successfully retrieved the individual enclosure.
*/
type GetKioskEnclosuresEnclosureIDOK struct {
	Payload *models_core.EnclosureResponse
}

func (o *GetKioskEnclosuresEnclosureIDOK) Error() string {
	return fmt.Sprintf("[GET /kiosk/enclosures/{enclosure_id}][%d] getKioskEnclosuresEnclosureIdOK  %+v", 200, o.Payload)
}

func (o *GetKioskEnclosuresEnclosureIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.EnclosureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKioskEnclosuresEnclosureIDNotFound creates a GetKioskEnclosuresEnclosureIDNotFound with default headers values
func NewGetKioskEnclosuresEnclosureIDNotFound() *GetKioskEnclosuresEnclosureIDNotFound {
	return &GetKioskEnclosuresEnclosureIDNotFound{}
}

/*GetKioskEnclosuresEnclosureIDNotFound handles this case with default header values.

Enclosure not found.
*/
type GetKioskEnclosuresEnclosureIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *GetKioskEnclosuresEnclosureIDNotFound) Error() string {
	return fmt.Sprintf("[GET /kiosk/enclosures/{enclosure_id}][%d] getKioskEnclosuresEnclosureIdNotFound  %+v", 404, o.Payload)
}

func (o *GetKioskEnclosuresEnclosureIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
