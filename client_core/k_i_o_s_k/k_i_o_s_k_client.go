package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new k i o s k API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for k i o s k API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteKioskDirectoriesDirectoryID deletes a directory

Request deletion of a directory.
*/
func (a *Client) DeleteKioskDirectoriesDirectoryID(params *DeleteKioskDirectoriesDirectoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKioskDirectoriesDirectoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKioskDirectoriesDirectoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteKioskDirectoriesDirectoryID",
		Method:             "DELETE",
		PathPattern:        "/kiosk/directories/{directory_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKioskDirectoriesDirectoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKioskDirectoriesDirectoryIDNoContent), nil
}

/*
DeleteKioskEnclosuresEnclosureID deletes an enclosure

Request deletion of an enclosure.
*/
func (a *Client) DeleteKioskEnclosuresEnclosureID(params *DeleteKioskEnclosuresEnclosureIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKioskEnclosuresEnclosureIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKioskEnclosuresEnclosureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteKioskEnclosuresEnclosureID",
		Method:             "DELETE",
		PathPattern:        "/kiosk/enclosures/{enclosure_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKioskEnclosuresEnclosureIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKioskEnclosuresEnclosureIDNoContent), nil
}

/*
DeleteKioskKioskCentresKioskCentreID deletes a kiosk centre

Request deletion of a kiosk centre.
*/
func (a *Client) DeleteKioskKioskCentresKioskCentreID(params *DeleteKioskKioskCentresKioskCentreIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKioskKioskCentresKioskCentreIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKioskKioskCentresKioskCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteKioskKioskCentresKioskCentreID",
		Method:             "DELETE",
		PathPattern:        "/kiosk/kiosk_centres/{kiosk_centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKioskKioskCentresKioskCentreIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKioskKioskCentresKioskCentreIDNoContent), nil
}

/*
GetKioskDirectories lists directories

Request an array of directories.
*/
func (a *Client) GetKioskDirectories(params *GetKioskDirectoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetKioskDirectoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskDirectoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskDirectories",
		Method:             "GET",
		PathPattern:        "/kiosk/directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskDirectoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskDirectoriesOK), nil
}

/*
GetKioskDirectoriesDirectoryID individuals directory

Request a single directory.
*/
func (a *Client) GetKioskDirectoriesDirectoryID(params *GetKioskDirectoriesDirectoryIDParams) (*GetKioskDirectoriesDirectoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskDirectoriesDirectoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskDirectoriesDirectoryID",
		Method:             "GET",
		PathPattern:        "/kiosk/directories/{directory_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskDirectoriesDirectoryIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskDirectoriesDirectoryIDOK), nil
}

/*
GetKioskEnclosures lists enclosures

Request an array of enclosures filtered by allowed parameters.
*/
func (a *Client) GetKioskEnclosures(params *GetKioskEnclosuresParams, authInfo runtime.ClientAuthInfoWriter) (*GetKioskEnclosuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskEnclosuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskEnclosures",
		Method:             "GET",
		PathPattern:        "/kiosk/enclosures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskEnclosuresReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskEnclosuresOK), nil
}

/*
GetKioskEnclosuresEnclosureID requests a single enclosure

Request a single enclosure.
*/
func (a *Client) GetKioskEnclosuresEnclosureID(params *GetKioskEnclosuresEnclosureIDParams) (*GetKioskEnclosuresEnclosureIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskEnclosuresEnclosureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskEnclosuresEnclosureID",
		Method:             "GET",
		PathPattern:        "/kiosk/enclosures/{enclosure_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskEnclosuresEnclosureIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskEnclosuresEnclosureIDOK), nil
}

/*
GetKioskKioskCentres lists kiosk centres

Request an array of centres that have kiosks.
*/
func (a *Client) GetKioskKioskCentres(params *GetKioskKioskCentresParams, authInfo runtime.ClientAuthInfoWriter) (*GetKioskKioskCentresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskKioskCentresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskKioskCentres",
		Method:             "GET",
		PathPattern:        "/kiosk/kiosk_centres",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskKioskCentresReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskKioskCentresOK), nil
}

/*
GetKioskKioskCentresKioskCentreID individuals kiosk centre

Request a single kiosk centre.
*/
func (a *Client) GetKioskKioskCentresKioskCentreID(params *GetKioskKioskCentresKioskCentreIDParams) (*GetKioskKioskCentresKioskCentreIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKioskKioskCentresKioskCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKioskKioskCentresKioskCentreID",
		Method:             "GET",
		PathPattern:        "/kiosk/kiosk_centres/{kiosk_centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKioskKioskCentresKioskCentreIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKioskKioskCentresKioskCentreIDOK), nil
}

/*
PatchKioskDirectoriesDirectoryID updates a directory

Request update of a directory from JSON data in the request body.
*/
func (a *Client) PatchKioskDirectoriesDirectoryID(params *PatchKioskDirectoriesDirectoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchKioskDirectoriesDirectoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchKioskDirectoriesDirectoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchKioskDirectoriesDirectoryID",
		Method:             "PATCH",
		PathPattern:        "/kiosk/directories/{directory_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKioskDirectoriesDirectoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKioskDirectoriesDirectoryIDNoContent), nil
}

/*
PatchKioskEnclosuresEnclosureID updates an enclosure

Request update of an enclosure from JSON data in the request body.
*/
func (a *Client) PatchKioskEnclosuresEnclosureID(params *PatchKioskEnclosuresEnclosureIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchKioskEnclosuresEnclosureIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchKioskEnclosuresEnclosureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchKioskEnclosuresEnclosureID",
		Method:             "PATCH",
		PathPattern:        "/kiosk/enclosures/{enclosure_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKioskEnclosuresEnclosureIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKioskEnclosuresEnclosureIDNoContent), nil
}

/*
PatchKioskKioskCentresKioskCentreID updates a kiosk centre

Request update of a kiosk centre from JSON data in the request body.
*/
func (a *Client) PatchKioskKioskCentresKioskCentreID(params *PatchKioskKioskCentresKioskCentreIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchKioskKioskCentresKioskCentreIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchKioskKioskCentresKioskCentreIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchKioskKioskCentresKioskCentreID",
		Method:             "PATCH",
		PathPattern:        "/kiosk/kiosk_centres/{kiosk_centre_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchKioskKioskCentresKioskCentreIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchKioskKioskCentresKioskCentreIDNoContent), nil
}

/*
PostKioskDirectories creates a directory

Request creation of a directory from JSON data in the request body.
*/
func (a *Client) PostKioskDirectories(params *PostKioskDirectoriesParams, authInfo runtime.ClientAuthInfoWriter) (*PostKioskDirectoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKioskDirectoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostKioskDirectories",
		Method:             "POST",
		PathPattern:        "/kiosk/directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKioskDirectoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKioskDirectoriesCreated), nil
}

/*
PostKioskEnclosures creates an enclosure

Request creation of an enclosure from JSON data in the request body.
*/
func (a *Client) PostKioskEnclosures(params *PostKioskEnclosuresParams, authInfo runtime.ClientAuthInfoWriter) (*PostKioskEnclosuresCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKioskEnclosuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostKioskEnclosures",
		Method:             "POST",
		PathPattern:        "/kiosk/enclosures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKioskEnclosuresReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKioskEnclosuresCreated), nil
}

/*
PostKioskKioskCentres creates a kiosk centre

Request creation of a kiosk centre from JSON data in the request body.
*/
func (a *Client) PostKioskKioskCentres(params *PostKioskKioskCentresParams, authInfo runtime.ClientAuthInfoWriter) (*PostKioskKioskCentresCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostKioskKioskCentresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostKioskKioskCentres",
		Method:             "POST",
		PathPattern:        "/kiosk/kiosk_centres",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostKioskKioskCentresReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostKioskKioskCentresCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
