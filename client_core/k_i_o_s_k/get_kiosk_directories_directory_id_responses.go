package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// GetKioskDirectoriesDirectoryIDReader is a Reader for the GetKioskDirectoriesDirectoryID structure.
type GetKioskDirectoriesDirectoryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetKioskDirectoriesDirectoryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetKioskDirectoriesDirectoryIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetKioskDirectoriesDirectoryIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetKioskDirectoriesDirectoryIDOK creates a GetKioskDirectoriesDirectoryIDOK with default headers values
func NewGetKioskDirectoriesDirectoryIDOK() *GetKioskDirectoriesDirectoryIDOK {
	return &GetKioskDirectoriesDirectoryIDOK{}
}

/*GetKioskDirectoriesDirectoryIDOK handles this case with default header values.

Successfully retrieved the individual directory.
*/
type GetKioskDirectoriesDirectoryIDOK struct {
	Payload *models_core.DirectoryResponse
}

func (o *GetKioskDirectoriesDirectoryIDOK) Error() string {
	return fmt.Sprintf("[GET /kiosk/directories/{directory_id}][%d] getKioskDirectoriesDirectoryIdOK  %+v", 200, o.Payload)
}

func (o *GetKioskDirectoriesDirectoryIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.DirectoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKioskDirectoriesDirectoryIDNotFound creates a GetKioskDirectoriesDirectoryIDNotFound with default headers values
func NewGetKioskDirectoriesDirectoryIDNotFound() *GetKioskDirectoriesDirectoryIDNotFound {
	return &GetKioskDirectoriesDirectoryIDNotFound{}
}

/*GetKioskDirectoriesDirectoryIDNotFound handles this case with default header values.

Directory not found.
*/
type GetKioskDirectoriesDirectoryIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *GetKioskDirectoriesDirectoryIDNotFound) Error() string {
	return fmt.Sprintf("[GET /kiosk/directories/{directory_id}][%d] getKioskDirectoriesDirectoryIdNotFound  %+v", 404, o.Payload)
}

func (o *GetKioskDirectoriesDirectoryIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
