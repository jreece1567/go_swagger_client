package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetKioskDirectoriesDirectoryIDParams creates a new GetKioskDirectoriesDirectoryIDParams object
// with the default values initialized.
func NewGetKioskDirectoriesDirectoryIDParams() *GetKioskDirectoriesDirectoryIDParams {
	var ()
	return &GetKioskDirectoriesDirectoryIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetKioskDirectoriesDirectoryIDParamsWithTimeout creates a new GetKioskDirectoriesDirectoryIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetKioskDirectoriesDirectoryIDParamsWithTimeout(timeout time.Duration) *GetKioskDirectoriesDirectoryIDParams {
	var ()
	return &GetKioskDirectoriesDirectoryIDParams{

		timeout: timeout,
	}
}

/*GetKioskDirectoriesDirectoryIDParams contains all the parameters to send to the API endpoint
for the get kiosk directories directory ID operation typically these are written to a http.Request
*/
type GetKioskDirectoriesDirectoryIDParams struct {

	/*DirectoryID
	  Directory identifier. Request the directory with directory_id.

	*/
	DirectoryID int64

	timeout time.Duration
}

// WithDirectoryID adds the directoryId to the get kiosk directories directory ID params
func (o *GetKioskDirectoriesDirectoryIDParams) WithDirectoryID(DirectoryID int64) *GetKioskDirectoriesDirectoryIDParams {
	o.DirectoryID = DirectoryID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetKioskDirectoriesDirectoryIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param directory_id
	if err := r.SetPathParam("directory_id", swag.FormatInt64(o.DirectoryID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
