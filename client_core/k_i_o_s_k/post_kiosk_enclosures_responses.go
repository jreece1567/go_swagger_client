package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PostKioskEnclosuresReader is a Reader for the PostKioskEnclosures structure.
type PostKioskEnclosuresReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostKioskEnclosuresReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostKioskEnclosuresCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostKioskEnclosuresUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostKioskEnclosuresUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostKioskEnclosuresCreated creates a PostKioskEnclosuresCreated with default headers values
func NewPostKioskEnclosuresCreated() *PostKioskEnclosuresCreated {
	return &PostKioskEnclosuresCreated{}
}

/*PostKioskEnclosuresCreated handles this case with default header values.

Successfully created the enclosure.
*/
type PostKioskEnclosuresCreated struct {
	Payload *models_core.EnclosureResponse
}

func (o *PostKioskEnclosuresCreated) Error() string {
	return fmt.Sprintf("[POST /kiosk/enclosures][%d] postKioskEnclosuresCreated  %+v", 201, o.Payload)
}

func (o *PostKioskEnclosuresCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.EnclosureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKioskEnclosuresUnauthorized creates a PostKioskEnclosuresUnauthorized with default headers values
func NewPostKioskEnclosuresUnauthorized() *PostKioskEnclosuresUnauthorized {
	return &PostKioskEnclosuresUnauthorized{}
}

/*PostKioskEnclosuresUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PostKioskEnclosuresUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PostKioskEnclosuresUnauthorized) Error() string {
	return fmt.Sprintf("[POST /kiosk/enclosures][%d] postKioskEnclosuresUnauthorized  %+v", 401, o.Payload)
}

func (o *PostKioskEnclosuresUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostKioskEnclosuresUnprocessableEntity creates a PostKioskEnclosuresUnprocessableEntity with default headers values
func NewPostKioskEnclosuresUnprocessableEntity() *PostKioskEnclosuresUnprocessableEntity {
	return &PostKioskEnclosuresUnprocessableEntity{}
}

/*PostKioskEnclosuresUnprocessableEntity handles this case with default header values.

Enclosure not created. Returns an array of error messages explaining the problems with the provided attributes.
*/
type PostKioskEnclosuresUnprocessableEntity struct {
	Payload *models_core.Enclosure422Response
}

func (o *PostKioskEnclosuresUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /kiosk/enclosures][%d] postKioskEnclosuresUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostKioskEnclosuresUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Enclosure422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
