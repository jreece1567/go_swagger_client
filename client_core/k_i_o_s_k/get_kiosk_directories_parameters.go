package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetKioskDirectoriesParams creates a new GetKioskDirectoriesParams object
// with the default values initialized.
func NewGetKioskDirectoriesParams() *GetKioskDirectoriesParams {
	var ()
	return &GetKioskDirectoriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetKioskDirectoriesParamsWithTimeout creates a new GetKioskDirectoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetKioskDirectoriesParamsWithTimeout(timeout time.Duration) *GetKioskDirectoriesParams {
	var ()
	return &GetKioskDirectoriesParams{

		timeout: timeout,
	}
}

/*GetKioskDirectoriesParams contains all the parameters to send to the API endpoint
for the get kiosk directories operation typically these are written to a http.Request
*/
type GetKioskDirectoriesParams struct {

	/*EnclosureID
	  Enclosure identifier. Request directories associated with a kiosk_centre that has enclosure_id.

	*/
	EnclosureID *string

	timeout time.Duration
}

// WithEnclosureID adds the enclosureId to the get kiosk directories params
func (o *GetKioskDirectoriesParams) WithEnclosureID(EnclosureID *string) *GetKioskDirectoriesParams {
	o.EnclosureID = EnclosureID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetKioskDirectoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.EnclosureID != nil {

		// query param enclosure_id
		var qrEnclosureID string
		if o.EnclosureID != nil {
			qrEnclosureID = *o.EnclosureID
		}
		qEnclosureID := qrEnclosureID
		if qEnclosureID != "" {
			if err := r.SetQueryParam("enclosure_id", qEnclosureID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
