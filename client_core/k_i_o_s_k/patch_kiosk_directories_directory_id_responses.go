package k_i_o_s_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PatchKioskDirectoriesDirectoryIDReader is a Reader for the PatchKioskDirectoriesDirectoryID structure.
type PatchKioskDirectoriesDirectoryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchKioskDirectoriesDirectoryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchKioskDirectoriesDirectoryIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchKioskDirectoriesDirectoryIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchKioskDirectoriesDirectoryIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPatchKioskDirectoriesDirectoryIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchKioskDirectoriesDirectoryIDNoContent creates a PatchKioskDirectoriesDirectoryIDNoContent with default headers values
func NewPatchKioskDirectoriesDirectoryIDNoContent() *PatchKioskDirectoriesDirectoryIDNoContent {
	return &PatchKioskDirectoriesDirectoryIDNoContent{}
}

/*PatchKioskDirectoriesDirectoryIDNoContent handles this case with default header values.

Successfully updated the directory.
*/
type PatchKioskDirectoriesDirectoryIDNoContent struct {
}

func (o *PatchKioskDirectoriesDirectoryIDNoContent) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/directories/{directory_id}][%d] patchKioskDirectoriesDirectoryIdNoContent ", 204)
}

func (o *PatchKioskDirectoriesDirectoryIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchKioskDirectoriesDirectoryIDUnauthorized creates a PatchKioskDirectoriesDirectoryIDUnauthorized with default headers values
func NewPatchKioskDirectoriesDirectoryIDUnauthorized() *PatchKioskDirectoriesDirectoryIDUnauthorized {
	return &PatchKioskDirectoriesDirectoryIDUnauthorized{}
}

/*PatchKioskDirectoriesDirectoryIDUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PatchKioskDirectoriesDirectoryIDUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PatchKioskDirectoriesDirectoryIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/directories/{directory_id}][%d] patchKioskDirectoriesDirectoryIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchKioskDirectoriesDirectoryIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKioskDirectoriesDirectoryIDNotFound creates a PatchKioskDirectoriesDirectoryIDNotFound with default headers values
func NewPatchKioskDirectoriesDirectoryIDNotFound() *PatchKioskDirectoriesDirectoryIDNotFound {
	return &PatchKioskDirectoriesDirectoryIDNotFound{}
}

/*PatchKioskDirectoriesDirectoryIDNotFound handles this case with default header values.

Directory not found.
*/
type PatchKioskDirectoriesDirectoryIDNotFound struct {
	Payload *models_core.Http404Response
}

func (o *PatchKioskDirectoriesDirectoryIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/directories/{directory_id}][%d] patchKioskDirectoriesDirectoryIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchKioskDirectoriesDirectoryIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http404Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchKioskDirectoriesDirectoryIDUnprocessableEntity creates a PatchKioskDirectoriesDirectoryIDUnprocessableEntity with default headers values
func NewPatchKioskDirectoriesDirectoryIDUnprocessableEntity() *PatchKioskDirectoriesDirectoryIDUnprocessableEntity {
	return &PatchKioskDirectoriesDirectoryIDUnprocessableEntity{}
}

/*PatchKioskDirectoriesDirectoryIDUnprocessableEntity handles this case with default header values.

Directory not updated. Returns an array of error messages explaining the problems with the provided attributes.
*/
type PatchKioskDirectoriesDirectoryIDUnprocessableEntity struct {
	Payload *models_core.Directory422Response
}

func (o *PatchKioskDirectoriesDirectoryIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /kiosk/directories/{directory_id}][%d] patchKioskDirectoriesDirectoryIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchKioskDirectoriesDirectoryIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Directory422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
