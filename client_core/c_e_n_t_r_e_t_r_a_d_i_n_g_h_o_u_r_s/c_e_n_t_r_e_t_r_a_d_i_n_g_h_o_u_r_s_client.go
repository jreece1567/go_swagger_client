package c_e_n_t_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c e n t r e t r a d i n g h o u r s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c e n t r e t r a d i n g h o u r s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCentresCentreIDTradingHoursTradingHourID deletes a centre trading hour

Request deletion of a trading-hour for a centre.
*/
func (a *Client) DeleteCentresCentreIDTradingHoursTradingHourID(params *DeleteCentresCentreIDTradingHoursTradingHourIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCentresCentreIDTradingHoursTradingHourIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCentresCentreIDTradingHoursTradingHourIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCentresCentreIDTradingHoursTradingHourID",
		Method:             "DELETE",
		PathPattern:        "/centres/{centre_id}/trading-hours/{trading_hour_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCentresCentreIDTradingHoursTradingHourIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCentresCentreIDTradingHoursTradingHourIDNoContent), nil
}

/*
GetCentreTradingHours lists trading hours for all centres

Request an array of centre trading-hours.
*/
func (a *Client) GetCentreTradingHours(params *GetCentreTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentreTradingHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentreTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentreTradingHours",
		Method:             "GET",
		PathPattern:        "/centre_trading_hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentreTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentreTradingHoursOK), nil
}

/*
GetCentresCentreIDTradingHours lists trading hours for a centre

Request an array of centre trading-hours.
*/
func (a *Client) GetCentresCentreIDTradingHours(params *GetCentresCentreIDTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresCentreIDTradingHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresCentreIDTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresCentreIDTradingHours",
		Method:             "GET",
		PathPattern:        "/centres/{centre_id}/trading-hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresCentreIDTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresCentreIDTradingHoursOK), nil
}

/*
GetCentresCentreIDTradingHoursRange lists centre trading hours for a date range

Request an array of centre trading hours filtered by allowed parameters.
*/
func (a *Client) GetCentresCentreIDTradingHoursRange(params *GetCentresCentreIDTradingHoursRangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresCentreIDTradingHoursRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresCentreIDTradingHoursRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresCentreIDTradingHoursRange",
		Method:             "GET",
		PathPattern:        "/centres/{centre_id}/trading-hours/range",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresCentreIDTradingHoursRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresCentreIDTradingHoursRangeOK), nil
}

/*
PostCentresCentreIDTradingHours creates a centre trading hours

Request creation of centre trading-hours from JSON data in the request body.
*/
func (a *Client) PostCentresCentreIDTradingHours(params *PostCentresCentreIDTradingHoursParams, authInfo runtime.ClientAuthInfoWriter) (*PostCentresCentreIDTradingHoursCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCentresCentreIDTradingHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCentresCentreIDTradingHours",
		Method:             "POST",
		PathPattern:        "/centres/{centre_id}/trading-hours",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCentresCentreIDTradingHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCentresCentreIDTradingHoursCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
