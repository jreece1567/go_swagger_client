package c_e_n_t_r_e_t_r_a_d_i_n_g_h_o_u_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteCentresCentreIDTradingHoursTradingHourIDParams creates a new DeleteCentresCentreIDTradingHoursTradingHourIDParams object
// with the default values initialized.
func NewDeleteCentresCentreIDTradingHoursTradingHourIDParams() *DeleteCentresCentreIDTradingHoursTradingHourIDParams {
	var (
		centreIdDefault string = string("sanfrancisco")
	)
	return &DeleteCentresCentreIDTradingHoursTradingHourIDParams{
		CentreID: centreIdDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteCentresCentreIDTradingHoursTradingHourIDParamsWithTimeout creates a new DeleteCentresCentreIDTradingHoursTradingHourIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteCentresCentreIDTradingHoursTradingHourIDParamsWithTimeout(timeout time.Duration) *DeleteCentresCentreIDTradingHoursTradingHourIDParams {
	var (
		centreIdDefault string = string("sanfrancisco")
	)
	return &DeleteCentresCentreIDTradingHoursTradingHourIDParams{
		CentreID: centreIdDefault,

		timeout: timeout,
	}
}

/*DeleteCentresCentreIDTradingHoursTradingHourIDParams contains all the parameters to send to the API endpoint
for the delete centres centre ID trading hours trading hour ID operation typically these are written to a http.Request
*/
type DeleteCentresCentreIDTradingHoursTradingHourIDParams struct {

	/*Authorization
	  Staff Access token.

	*/
	Authorization string
	/*CentreID
	  Centre identifier. Request to delete the centre trading-hours with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID string
	/*TradingHourID
	  Trading-hour identifier. Request to delete the trading-hour with trading_hour_id.

	*/
	TradingHourID int64

	timeout time.Duration
}

// WithAuthorization adds the authorization to the delete centres centre ID trading hours trading hour ID params
func (o *DeleteCentresCentreIDTradingHoursTradingHourIDParams) WithAuthorization(Authorization string) *DeleteCentresCentreIDTradingHoursTradingHourIDParams {
	o.Authorization = Authorization
	return o
}

// WithCentreID adds the centreId to the delete centres centre ID trading hours trading hour ID params
func (o *DeleteCentresCentreIDTradingHoursTradingHourIDParams) WithCentreID(CentreID string) *DeleteCentresCentreIDTradingHoursTradingHourIDParams {
	o.CentreID = CentreID
	return o
}

// WithTradingHourID adds the tradingHourId to the delete centres centre ID trading hours trading hour ID params
func (o *DeleteCentresCentreIDTradingHoursTradingHourIDParams) WithTradingHourID(TradingHourID int64) *DeleteCentresCentreIDTradingHoursTradingHourIDParams {
	o.TradingHourID = TradingHourID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteCentresCentreIDTradingHoursTradingHourIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param centre_id
	if err := r.SetPathParam("centre_id", o.CentreID); err != nil {
		return err
	}

	// path param trading_hour_id
	if err := r.SetPathParam("trading_hour_id", swag.FormatInt64(o.TradingHourID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
