package c_e_n_t_r_e_n_o_t_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c e n t r e n o t i c e s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c e n t r e n o t i c e s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNoticesNoticeID deletes a notice

Request deletion of a notice.
*/
func (a *Client) DeleteNoticesNoticeID(params *DeleteNoticesNoticeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNoticesNoticeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNoticesNoticeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNoticesNoticeID",
		Method:             "DELETE",
		PathPattern:        "/notices/{notice_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNoticesNoticeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNoticesNoticeIDNoContent), nil
}

/*
GetNotices lists centre notices

Request an array of notices filtered by allowed parameters.
*/
func (a *Client) GetNotices(params *GetNoticesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNoticesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNoticesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNotices",
		Method:             "GET",
		PathPattern:        "/notices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNoticesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNoticesOK), nil
}

/*
GetNoticesNoticeID individuals notice

Request a single notice.
*/
func (a *Client) GetNoticesNoticeID(params *GetNoticesNoticeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNoticesNoticeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNoticesNoticeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNoticesNoticeID",
		Method:             "GET",
		PathPattern:        "/notices/{notice_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNoticesNoticeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNoticesNoticeIDOK), nil
}

/*
PatchNoticesNoticeID updates a notice

Request update of a notice from JSON data in the request body.
*/
func (a *Client) PatchNoticesNoticeID(params *PatchNoticesNoticeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchNoticesNoticeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNoticesNoticeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchNoticesNoticeID",
		Method:             "PATCH",
		PathPattern:        "/notices/{notice_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchNoticesNoticeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchNoticesNoticeIDNoContent), nil
}

/*
PostNotices creates a notice

Request creation of a notice from JSON data in the request body.
*/
func (a *Client) PostNotices(params *PostNoticesParams, authInfo runtime.ClientAuthInfoWriter) (*PostNoticesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNoticesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNotices",
		Method:             "POST",
		PathPattern:        "/notices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostNoticesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNoticesCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
