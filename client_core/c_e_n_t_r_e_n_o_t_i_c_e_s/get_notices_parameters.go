package c_e_n_t_r_e_n_o_t_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNoticesParams creates a new GetNoticesParams object
// with the default values initialized.
func NewGetNoticesParams() *GetNoticesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetNoticesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNoticesParamsWithTimeout creates a new GetNoticesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNoticesParamsWithTimeout(timeout time.Duration) *GetNoticesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetNoticesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetNoticesParams contains all the parameters to send to the API endpoint
for the get notices operation typically these are written to a http.Request
*/
type GetNoticesParams struct {

	/*CentreID
	  Centre identifier. Request the centre notices with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Featured
	  Featured notices. Request to include only featured (true) or not featured (false) notices.

	*/
	Featured *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Sort
	  Sort results by one or more fields. Change sort order by adding desc or asc after field name.

	*/
	Sort []string
	/*Status
	  Filter by status

	*/
	Status *string
	/*Statuses
	  Statuses. Requests notices that include one of the listed statuses.

	*/
	Statuses []string
	/*Type
	  Type

	*/
	Type *string
	/*UpdatedSince
	  Updated since. Request the centre notices updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCentreID adds the centreId to the get notices params
func (o *GetNoticesParams) WithCentreID(CentreID *string) *GetNoticesParams {
	o.CentreID = CentreID
	return o
}

// WithFeatured adds the featured to the get notices params
func (o *GetNoticesParams) WithFeatured(Featured *bool) *GetNoticesParams {
	o.Featured = Featured
	return o
}

// WithFields adds the fields to the get notices params
func (o *GetNoticesParams) WithFields(Fields []string) *GetNoticesParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get notices params
func (o *GetNoticesParams) WithPage(Page *int64) *GetNoticesParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get notices params
func (o *GetNoticesParams) WithPerPage(PerPage *int64) *GetNoticesParams {
	o.PerPage = PerPage
	return o
}

// WithSort adds the sort to the get notices params
func (o *GetNoticesParams) WithSort(Sort []string) *GetNoticesParams {
	o.Sort = Sort
	return o
}

// WithStatus adds the status to the get notices params
func (o *GetNoticesParams) WithStatus(Status *string) *GetNoticesParams {
	o.Status = Status
	return o
}

// WithStatuses adds the statuses to the get notices params
func (o *GetNoticesParams) WithStatuses(Statuses []string) *GetNoticesParams {
	o.Statuses = Statuses
	return o
}

// WithType adds the type to the get notices params
func (o *GetNoticesParams) WithType(Type *string) *GetNoticesParams {
	o.Type = Type
	return o
}

// WithUpdatedSince adds the updatedSince to the get notices params
func (o *GetNoticesParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetNoticesParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetNoticesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Featured != nil {

		// query param featured
		var qrFeatured bool
		if o.Featured != nil {
			qrFeatured = *o.Featured
		}
		qFeatured := swag.FormatBool(qrFeatured)
		if qFeatured != "" {
			if err := r.SetQueryParam("featured", qFeatured); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "csv")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
