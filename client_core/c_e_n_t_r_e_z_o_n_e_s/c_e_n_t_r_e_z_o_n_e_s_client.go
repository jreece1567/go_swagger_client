package c_e_n_t_r_e_z_o_n_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c e n t r e z o n e s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c e n t r e z o n e s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCentresZonesZoneID deletes a centre zone

Request deletion of a centre zone.
*/
func (a *Client) DeleteCentresZonesZoneID(params *DeleteCentresZonesZoneIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCentresZonesZoneIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCentresZonesZoneIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCentresZonesZoneID",
		Method:             "DELETE",
		PathPattern:        "/centres/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCentresZonesZoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCentresZonesZoneIDNoContent), nil
}

/*
GetCentresZones lists centre zones

Request an array of zones filtered by allowed parameters.
*/
func (a *Client) GetCentresZones(params *GetCentresZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresZones",
		Method:             "GET",
		PathPattern:        "/centres/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresZonesOK), nil
}

/*
GetCentresZonesZoneID individuals centre zone

Request single-centre zone.
*/
func (a *Client) GetCentresZonesZoneID(params *GetCentresZonesZoneIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresZonesZoneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresZonesZoneIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresZonesZoneID",
		Method:             "GET",
		PathPattern:        "/centres/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresZonesZoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresZonesZoneIDOK), nil
}

/*
PatchCentresZonesZoneID updates centre zone

Request update of a centre zone from JSON data in the request body.
*/
func (a *Client) PatchCentresZonesZoneID(params *PatchCentresZonesZoneIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchCentresZonesZoneIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCentresZonesZoneIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchCentresZonesZoneID",
		Method:             "PATCH",
		PathPattern:        "/centres/zones/{zone_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCentresZonesZoneIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchCentresZonesZoneIDNoContent), nil
}

/*
PostCentresZones creates centre zone

Request creation of a zone from JSON data in the request body.
*/
func (a *Client) PostCentresZones(params *PostCentresZonesParams) (*PostCentresZonesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCentresZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCentresZones",
		Method:             "POST",
		PathPattern:        "/centres/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCentresZonesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCentresZonesCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
