package c_e_n_t_r_e_z_o_n_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresZonesParams creates a new GetCentresZonesParams object
// with the default values initialized.
func NewGetCentresZonesParams() *GetCentresZonesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresZonesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresZonesParamsWithTimeout creates a new GetCentresZonesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresZonesParamsWithTimeout(timeout time.Duration) *GetCentresZonesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(10)
	)
	return &GetCentresZonesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetCentresZonesParams contains all the parameters to send to the API endpoint
for the get centres zones operation typically these are written to a http.Request
*/
type GetCentresZonesParams struct {

	/*CentreID
	  Centre identifier. Request the centre zones with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Status
	  Status. Request the centre zones with status.

	*/
	Status *string

	timeout time.Duration
}

// WithCentreID adds the centreId to the get centres zones params
func (o *GetCentresZonesParams) WithCentreID(CentreID *string) *GetCentresZonesParams {
	o.CentreID = CentreID
	return o
}

// WithFields adds the fields to the get centres zones params
func (o *GetCentresZonesParams) WithFields(Fields []string) *GetCentresZonesParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get centres zones params
func (o *GetCentresZonesParams) WithPage(Page *int64) *GetCentresZonesParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get centres zones params
func (o *GetCentresZonesParams) WithPerPage(PerPage *int64) *GetCentresZonesParams {
	o.PerPage = PerPage
	return o
}

// WithStatus adds the status to the get centres zones params
func (o *GetCentresZonesParams) WithStatus(Status *string) *GetCentresZonesParams {
	o.Status = Status
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresZonesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
