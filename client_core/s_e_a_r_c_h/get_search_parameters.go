package s_e_a_r_c_h

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchParams creates a new GetSearchParams object
// with the default values initialized.
func NewGetSearchParams() *GetSearchParams {
	var (
		debugDefault             bool  = bool(false)
		limitDefault             int64 = int64(5)
		maxValuesPerFacetDefault int64 = int64(10)
		pageDefault              int64 = int64(1)
	)
	return &GetSearchParams{
		Debug:             &debugDefault,
		Limit:             &limitDefault,
		MaxValuesPerFacet: &maxValuesPerFacetDefault,
		Page:              &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchParamsWithTimeout creates a new GetSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSearchParamsWithTimeout(timeout time.Duration) *GetSearchParams {
	var (
		debugDefault             bool  = bool(false)
		limitDefault             int64 = int64(5)
		maxValuesPerFacetDefault int64 = int64(10)
		pageDefault              int64 = int64(1)
	)
	return &GetSearchParams{
		Debug:             &debugDefault,
		Limit:             &limitDefault,
		MaxValuesPerFacet: &maxValuesPerFacetDefault,
		Page:              &pageDefault,

		timeout: timeout,
	}
}

/*GetSearchParams contains all the parameters to send to the API endpoint
for the get search operation typically these are written to a http.Request
*/
type GetSearchParams struct {

	/*Brand
	  brand. Facet by brand.

	*/
	Brand *string
	/*CategoryHierarchy
	  category_hierarchy. Facet by category_hierarchy.

	*/
	CategoryHierarchy *string
	/*CategoryIds
	  category_ids. Facet by category_ids.

	*/
	CategoryIds *string
	/*CategoryPathHierarchy
	  category_path_hierarchy. Facet by category_path_hierarchy.

	*/
	CategoryPathHierarchy *string
	/*CategoryPaths
	  category_paths. Facet by category_paths.

	*/
	CategoryPaths *string
	/*CentreID
	  centre_id. Facet by centre_id.

	*/
	CentreID *string
	/*Country
	  country. Facet by country.

	*/
	Country *string
	/*Debug
	  Include debug information (such as ranking and analytics data) in the response

	*/
	Debug *bool
	/*DiningCuisine
	  dining_cuisine. Facet by dining_cuisine.

	*/
	DiningCuisine *string
	/*DiningPriceGuide
	  dining_price_guide. Facet by dining_price_guide.

	*/
	DiningPriceGuide *string
	/*ExcludeFromSearch
	  List of attributes you do not want to use for search

	*/
	ExcludeFromSearch []string
	/*Fields
	  Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*HasDining
	  has_dining. Facet by has_dining.

	*/
	HasDining *string
	/*IsDiscounted
	  is_discounted. Facet by is_discounted.

	*/
	IsDiscounted *string
	/*IsFeatured
	  is_featured. Facet by is_featured.

	*/
	IsFeatured *string
	/*Limit
	  Limit. Maximum number of results to return per result type.

	*/
	Limit *int64
	/*LocationLevels
	  location_levels. Facet by location_levels.

	*/
	LocationLevels *string
	/*MaxValuesPerFacet
	  Maximum Values Per Facet. Maximum number of values to return per facet.

	*/
	MaxValuesPerFacet *int64
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*Price
	  price. Facet by price.

	*/
	Price *string
	/*PrimaryCategory
	  primary_category. Facet by primary_category.

	*/
	PrimaryCategory *string
	/*RetailerCode
	  retailer_code. Facet by retailer_code.

	*/
	RetailerCode *string
	/*SalePrice
	  sale_price. Facet by sale_price.

	*/
	SalePrice *string
	/*ServiceCategoryIds
	  service_category_ids. Facet by service_category_ids.

	*/
	ServiceCategoryIds *string
	/*Sort
	  Sort results. Order of results (product results only)

	*/
	Sort *string
	/*Term
	  Search term. Contents of search term.

	*/
	Term *string
	/*Types
	  Types of results. Request search limited to specified types. Default is all types. Example: movies

	*/
	Types []string
	/*UpdatedSince
	  updated_since. Facet by updated_since.

	*/
	UpdatedSince *string
	/*VariantsAttributesColor
	  variants.attributes.color. Facet by variants.attributes.color.

	*/
	VariantsAttributesColor *string

	timeout time.Duration
}

// WithBrand adds the brand to the get search params
func (o *GetSearchParams) WithBrand(Brand *string) *GetSearchParams {
	o.Brand = Brand
	return o
}

// WithCategoryHierarchy adds the categoryHierarchy to the get search params
func (o *GetSearchParams) WithCategoryHierarchy(CategoryHierarchy *string) *GetSearchParams {
	o.CategoryHierarchy = CategoryHierarchy
	return o
}

// WithCategoryIds adds the categoryIds to the get search params
func (o *GetSearchParams) WithCategoryIds(CategoryIds *string) *GetSearchParams {
	o.CategoryIds = CategoryIds
	return o
}

// WithCategoryPathHierarchy adds the categoryPathHierarchy to the get search params
func (o *GetSearchParams) WithCategoryPathHierarchy(CategoryPathHierarchy *string) *GetSearchParams {
	o.CategoryPathHierarchy = CategoryPathHierarchy
	return o
}

// WithCategoryPaths adds the categoryPaths to the get search params
func (o *GetSearchParams) WithCategoryPaths(CategoryPaths *string) *GetSearchParams {
	o.CategoryPaths = CategoryPaths
	return o
}

// WithCentreID adds the centreId to the get search params
func (o *GetSearchParams) WithCentreID(CentreID *string) *GetSearchParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get search params
func (o *GetSearchParams) WithCountry(Country *string) *GetSearchParams {
	o.Country = Country
	return o
}

// WithDebug adds the debug to the get search params
func (o *GetSearchParams) WithDebug(Debug *bool) *GetSearchParams {
	o.Debug = Debug
	return o
}

// WithDiningCuisine adds the diningCuisine to the get search params
func (o *GetSearchParams) WithDiningCuisine(DiningCuisine *string) *GetSearchParams {
	o.DiningCuisine = DiningCuisine
	return o
}

// WithDiningPriceGuide adds the diningPriceGuide to the get search params
func (o *GetSearchParams) WithDiningPriceGuide(DiningPriceGuide *string) *GetSearchParams {
	o.DiningPriceGuide = DiningPriceGuide
	return o
}

// WithExcludeFromSearch adds the excludeFromSearch to the get search params
func (o *GetSearchParams) WithExcludeFromSearch(ExcludeFromSearch []string) *GetSearchParams {
	o.ExcludeFromSearch = ExcludeFromSearch
	return o
}

// WithFields adds the fields to the get search params
func (o *GetSearchParams) WithFields(Fields []string) *GetSearchParams {
	o.Fields = Fields
	return o
}

// WithHasDining adds the hasDining to the get search params
func (o *GetSearchParams) WithHasDining(HasDining *string) *GetSearchParams {
	o.HasDining = HasDining
	return o
}

// WithIsDiscounted adds the isDiscounted to the get search params
func (o *GetSearchParams) WithIsDiscounted(IsDiscounted *string) *GetSearchParams {
	o.IsDiscounted = IsDiscounted
	return o
}

// WithIsFeatured adds the isFeatured to the get search params
func (o *GetSearchParams) WithIsFeatured(IsFeatured *string) *GetSearchParams {
	o.IsFeatured = IsFeatured
	return o
}

// WithLimit adds the limit to the get search params
func (o *GetSearchParams) WithLimit(Limit *int64) *GetSearchParams {
	o.Limit = Limit
	return o
}

// WithLocationLevels adds the locationLevels to the get search params
func (o *GetSearchParams) WithLocationLevels(LocationLevels *string) *GetSearchParams {
	o.LocationLevels = LocationLevels
	return o
}

// WithMaxValuesPerFacet adds the maxValuesPerFacet to the get search params
func (o *GetSearchParams) WithMaxValuesPerFacet(MaxValuesPerFacet *int64) *GetSearchParams {
	o.MaxValuesPerFacet = MaxValuesPerFacet
	return o
}

// WithPage adds the page to the get search params
func (o *GetSearchParams) WithPage(Page *int64) *GetSearchParams {
	o.Page = Page
	return o
}

// WithPrice adds the price to the get search params
func (o *GetSearchParams) WithPrice(Price *string) *GetSearchParams {
	o.Price = Price
	return o
}

// WithPrimaryCategory adds the primaryCategory to the get search params
func (o *GetSearchParams) WithPrimaryCategory(PrimaryCategory *string) *GetSearchParams {
	o.PrimaryCategory = PrimaryCategory
	return o
}

// WithRetailerCode adds the retailerCode to the get search params
func (o *GetSearchParams) WithRetailerCode(RetailerCode *string) *GetSearchParams {
	o.RetailerCode = RetailerCode
	return o
}

// WithSalePrice adds the salePrice to the get search params
func (o *GetSearchParams) WithSalePrice(SalePrice *string) *GetSearchParams {
	o.SalePrice = SalePrice
	return o
}

// WithServiceCategoryIds adds the serviceCategoryIds to the get search params
func (o *GetSearchParams) WithServiceCategoryIds(ServiceCategoryIds *string) *GetSearchParams {
	o.ServiceCategoryIds = ServiceCategoryIds
	return o
}

// WithSort adds the sort to the get search params
func (o *GetSearchParams) WithSort(Sort *string) *GetSearchParams {
	o.Sort = Sort
	return o
}

// WithTerm adds the term to the get search params
func (o *GetSearchParams) WithTerm(Term *string) *GetSearchParams {
	o.Term = Term
	return o
}

// WithTypes adds the types to the get search params
func (o *GetSearchParams) WithTypes(Types []string) *GetSearchParams {
	o.Types = Types
	return o
}

// WithUpdatedSince adds the updatedSince to the get search params
func (o *GetSearchParams) WithUpdatedSince(UpdatedSince *string) *GetSearchParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WithVariantsAttributesColor adds the variantsAttributesColor to the get search params
func (o *GetSearchParams) WithVariantsAttributesColor(VariantsAttributesColor *string) *GetSearchParams {
	o.VariantsAttributesColor = VariantsAttributesColor
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Brand != nil {

		// query param brand
		var qrBrand string
		if o.Brand != nil {
			qrBrand = *o.Brand
		}
		qBrand := qrBrand
		if qBrand != "" {
			if err := r.SetQueryParam("brand", qBrand); err != nil {
				return err
			}
		}

	}

	if o.CategoryHierarchy != nil {

		// query param category_hierarchy
		var qrCategoryHierarchy string
		if o.CategoryHierarchy != nil {
			qrCategoryHierarchy = *o.CategoryHierarchy
		}
		qCategoryHierarchy := qrCategoryHierarchy
		if qCategoryHierarchy != "" {
			if err := r.SetQueryParam("category_hierarchy", qCategoryHierarchy); err != nil {
				return err
			}
		}

	}

	if o.CategoryIds != nil {

		// query param category_ids
		var qrCategoryIds string
		if o.CategoryIds != nil {
			qrCategoryIds = *o.CategoryIds
		}
		qCategoryIds := qrCategoryIds
		if qCategoryIds != "" {
			if err := r.SetQueryParam("category_ids", qCategoryIds); err != nil {
				return err
			}
		}

	}

	if o.CategoryPathHierarchy != nil {

		// query param category_path_hierarchy
		var qrCategoryPathHierarchy string
		if o.CategoryPathHierarchy != nil {
			qrCategoryPathHierarchy = *o.CategoryPathHierarchy
		}
		qCategoryPathHierarchy := qrCategoryPathHierarchy
		if qCategoryPathHierarchy != "" {
			if err := r.SetQueryParam("category_path_hierarchy", qCategoryPathHierarchy); err != nil {
				return err
			}
		}

	}

	if o.CategoryPaths != nil {

		// query param category_paths
		var qrCategoryPaths string
		if o.CategoryPaths != nil {
			qrCategoryPaths = *o.CategoryPaths
		}
		qCategoryPaths := qrCategoryPaths
		if qCategoryPaths != "" {
			if err := r.SetQueryParam("category_paths", qCategoryPaths); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Debug != nil {

		// query param debug
		var qrDebug bool
		if o.Debug != nil {
			qrDebug = *o.Debug
		}
		qDebug := swag.FormatBool(qrDebug)
		if qDebug != "" {
			if err := r.SetQueryParam("debug", qDebug); err != nil {
				return err
			}
		}

	}

	if o.DiningCuisine != nil {

		// query param dining_cuisine
		var qrDiningCuisine string
		if o.DiningCuisine != nil {
			qrDiningCuisine = *o.DiningCuisine
		}
		qDiningCuisine := qrDiningCuisine
		if qDiningCuisine != "" {
			if err := r.SetQueryParam("dining_cuisine", qDiningCuisine); err != nil {
				return err
			}
		}

	}

	if o.DiningPriceGuide != nil {

		// query param dining_price_guide
		var qrDiningPriceGuide string
		if o.DiningPriceGuide != nil {
			qrDiningPriceGuide = *o.DiningPriceGuide
		}
		qDiningPriceGuide := qrDiningPriceGuide
		if qDiningPriceGuide != "" {
			if err := r.SetQueryParam("dining_price_guide", qDiningPriceGuide); err != nil {
				return err
			}
		}

	}

	valuesExcludeFromSearch := o.ExcludeFromSearch

	joinedExcludeFromSearch := swag.JoinByFormat(valuesExcludeFromSearch, "csv")
	// query array param excludeFromSearch
	if err := r.SetQueryParam("excludeFromSearch", joinedExcludeFromSearch...); err != nil {
		return err
	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.HasDining != nil {

		// query param has_dining
		var qrHasDining string
		if o.HasDining != nil {
			qrHasDining = *o.HasDining
		}
		qHasDining := qrHasDining
		if qHasDining != "" {
			if err := r.SetQueryParam("has_dining", qHasDining); err != nil {
				return err
			}
		}

	}

	if o.IsDiscounted != nil {

		// query param is_discounted
		var qrIsDiscounted string
		if o.IsDiscounted != nil {
			qrIsDiscounted = *o.IsDiscounted
		}
		qIsDiscounted := qrIsDiscounted
		if qIsDiscounted != "" {
			if err := r.SetQueryParam("is_discounted", qIsDiscounted); err != nil {
				return err
			}
		}

	}

	if o.IsFeatured != nil {

		// query param is_featured
		var qrIsFeatured string
		if o.IsFeatured != nil {
			qrIsFeatured = *o.IsFeatured
		}
		qIsFeatured := qrIsFeatured
		if qIsFeatured != "" {
			if err := r.SetQueryParam("is_featured", qIsFeatured); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LocationLevels != nil {

		// query param location_levels
		var qrLocationLevels string
		if o.LocationLevels != nil {
			qrLocationLevels = *o.LocationLevels
		}
		qLocationLevels := qrLocationLevels
		if qLocationLevels != "" {
			if err := r.SetQueryParam("location_levels", qLocationLevels); err != nil {
				return err
			}
		}

	}

	if o.MaxValuesPerFacet != nil {

		// query param maxValuesPerFacet
		var qrMaxValuesPerFacet int64
		if o.MaxValuesPerFacet != nil {
			qrMaxValuesPerFacet = *o.MaxValuesPerFacet
		}
		qMaxValuesPerFacet := swag.FormatInt64(qrMaxValuesPerFacet)
		if qMaxValuesPerFacet != "" {
			if err := r.SetQueryParam("maxValuesPerFacet", qMaxValuesPerFacet); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Price != nil {

		// query param price
		var qrPrice string
		if o.Price != nil {
			qrPrice = *o.Price
		}
		qPrice := qrPrice
		if qPrice != "" {
			if err := r.SetQueryParam("price", qPrice); err != nil {
				return err
			}
		}

	}

	if o.PrimaryCategory != nil {

		// query param primary_category
		var qrPrimaryCategory string
		if o.PrimaryCategory != nil {
			qrPrimaryCategory = *o.PrimaryCategory
		}
		qPrimaryCategory := qrPrimaryCategory
		if qPrimaryCategory != "" {
			if err := r.SetQueryParam("primary_category", qPrimaryCategory); err != nil {
				return err
			}
		}

	}

	if o.RetailerCode != nil {

		// query param retailer_code
		var qrRetailerCode string
		if o.RetailerCode != nil {
			qrRetailerCode = *o.RetailerCode
		}
		qRetailerCode := qrRetailerCode
		if qRetailerCode != "" {
			if err := r.SetQueryParam("retailer_code", qRetailerCode); err != nil {
				return err
			}
		}

	}

	if o.SalePrice != nil {

		// query param sale_price
		var qrSalePrice string
		if o.SalePrice != nil {
			qrSalePrice = *o.SalePrice
		}
		qSalePrice := qrSalePrice
		if qSalePrice != "" {
			if err := r.SetQueryParam("sale_price", qSalePrice); err != nil {
				return err
			}
		}

	}

	if o.ServiceCategoryIds != nil {

		// query param service_category_ids
		var qrServiceCategoryIds string
		if o.ServiceCategoryIds != nil {
			qrServiceCategoryIds = *o.ServiceCategoryIds
		}
		qServiceCategoryIds := qrServiceCategoryIds
		if qServiceCategoryIds != "" {
			if err := r.SetQueryParam("service_category_ids", qServiceCategoryIds); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Term != nil {

		// query param term
		var qrTerm string
		if o.Term != nil {
			qrTerm = *o.Term
		}
		qTerm := qrTerm
		if qTerm != "" {
			if err := r.SetQueryParam("term", qTerm); err != nil {
				return err
			}
		}

	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "csv")
	// query array param types
	if err := r.SetQueryParam("types", joinedTypes...); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince string
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if o.VariantsAttributesColor != nil {

		// query param variants.attributes.color
		var qrVariantsAttributesColor string
		if o.VariantsAttributesColor != nil {
			qrVariantsAttributesColor = *o.VariantsAttributesColor
		}
		qVariantsAttributesColor := qrVariantsAttributesColor
		if qVariantsAttributesColor != "" {
			if err := r.SetQueryParam("variants.attributes.color", qVariantsAttributesColor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
