package p_r_o_d_u_c_t_r_e_c_o_m_m_e_n_d_a_t_i_o_n_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProductsProductIDRelatedParams creates a new GetProductsProductIDRelatedParams object
// with the default values initialized.
func NewGetProductsProductIDRelatedParams() *GetProductsProductIDRelatedParams {
	var (
		limitDefault int64 = int64(4)
	)
	return &GetProductsProductIDRelatedParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductsProductIDRelatedParamsWithTimeout creates a new GetProductsProductIDRelatedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductsProductIDRelatedParamsWithTimeout(timeout time.Duration) *GetProductsProductIDRelatedParams {
	var (
		limitDefault int64 = int64(4)
	)
	return &GetProductsProductIDRelatedParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

/*GetProductsProductIDRelatedParams contains all the parameters to send to the API endpoint
for the get products product ID related operation typically these are written to a http.Request
*/
type GetProductsProductIDRelatedParams struct {

	/*CentreID
	  Centre identifier. Request products with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Country
	  Country code. Request products with country code. Lowercase two-character code for country.

	*/
	Country *string
	/*Limit
	  Limit the number of results returned

	*/
	Limit *int64
	/*ProductID
	  Product identifier. Request products related to with product_id.

	*/
	ProductID string

	timeout time.Duration
}

// WithCentreID adds the centreId to the get products product ID related params
func (o *GetProductsProductIDRelatedParams) WithCentreID(CentreID *string) *GetProductsProductIDRelatedParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get products product ID related params
func (o *GetProductsProductIDRelatedParams) WithCountry(Country *string) *GetProductsProductIDRelatedParams {
	o.Country = Country
	return o
}

// WithLimit adds the limit to the get products product ID related params
func (o *GetProductsProductIDRelatedParams) WithLimit(Limit *int64) *GetProductsProductIDRelatedParams {
	o.Limit = Limit
	return o
}

// WithProductID adds the productId to the get products product ID related params
func (o *GetProductsProductIDRelatedParams) WithProductID(ProductID string) *GetProductsProductIDRelatedParams {
	o.ProductID = ProductID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductsProductIDRelatedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param product_id
	if err := r.SetPathParam("product_id", o.ProductID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
