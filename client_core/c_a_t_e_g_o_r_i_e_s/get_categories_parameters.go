package c_a_t_e_g_o_r_i_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCategoriesParams creates a new GetCategoriesParams object
// with the default values initialized.
func NewGetCategoriesParams() *GetCategoriesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(25)
	)
	return &GetCategoriesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCategoriesParamsWithTimeout creates a new GetCategoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCategoriesParamsWithTimeout(timeout time.Duration) *GetCategoriesParams {
	var (
		pageDefault    int64 = int64(1)
		perPageDefault int64 = int64(25)
	)
	return &GetCategoriesParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,

		timeout: timeout,
	}
}

/*GetCategoriesParams contains all the parameters to send to the API endpoint
for the get categories operation typically these are written to a http.Request
*/
type GetCategoriesParams struct {

	/*Depth
	  Category depth. Request categories with depth.

	*/
	Depth *int64
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Name
	  Category name. Request categories with name.

	*/
	Name *string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*Path
	  Category path. Request categories with path.

	*/
	Path *string
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Statuses
	  Statuses. Requests categories that include one of the listed statuses.

	*/
	Statuses []string

	timeout time.Duration
}

// WithDepth adds the depth to the get categories params
func (o *GetCategoriesParams) WithDepth(Depth *int64) *GetCategoriesParams {
	o.Depth = Depth
	return o
}

// WithFields adds the fields to the get categories params
func (o *GetCategoriesParams) WithFields(Fields []string) *GetCategoriesParams {
	o.Fields = Fields
	return o
}

// WithName adds the name to the get categories params
func (o *GetCategoriesParams) WithName(Name *string) *GetCategoriesParams {
	o.Name = Name
	return o
}

// WithPage adds the page to the get categories params
func (o *GetCategoriesParams) WithPage(Page *int64) *GetCategoriesParams {
	o.Page = Page
	return o
}

// WithPath adds the path to the get categories params
func (o *GetCategoriesParams) WithPath(Path *string) *GetCategoriesParams {
	o.Path = Path
	return o
}

// WithPerPage adds the perPage to the get categories params
func (o *GetCategoriesParams) WithPerPage(PerPage *int64) *GetCategoriesParams {
	o.PerPage = PerPage
	return o
}

// WithStatuses adds the statuses to the get categories params
func (o *GetCategoriesParams) WithStatuses(Statuses []string) *GetCategoriesParams {
	o.Statuses = Statuses
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCategoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Depth != nil {

		// query param depth
		var qrDepth int64
		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := swag.FormatInt64(qrDepth)
		if qDepth != "" {
			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
