package c_a_t_e_g_o_r_i_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// NewPatchCategoriesGroupsGroupIDParams creates a new PatchCategoriesGroupsGroupIDParams object
// with the default values initialized.
func NewPatchCategoriesGroupsGroupIDParams() *PatchCategoriesGroupsGroupIDParams {
	var ()
	return &PatchCategoriesGroupsGroupIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchCategoriesGroupsGroupIDParamsWithTimeout creates a new PatchCategoriesGroupsGroupIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchCategoriesGroupsGroupIDParamsWithTimeout(timeout time.Duration) *PatchCategoriesGroupsGroupIDParams {
	var ()
	return &PatchCategoriesGroupsGroupIDParams{

		timeout: timeout,
	}
}

/*PatchCategoriesGroupsGroupIDParams contains all the parameters to send to the API endpoint
for the patch categories groups group ID operation typically these are written to a http.Request
*/
type PatchCategoriesGroupsGroupIDParams struct {

	/*Authorization
	  Staff Access token.

	*/
	Authorization string
	/*GroupData
	  Data to update a group.

	*/
	GroupData *models_core.GroupUpdateBody
	/*GroupID
	  Group identifier. Request to update the group with group_id.

	*/
	GroupID int64

	timeout time.Duration
}

// WithAuthorization adds the authorization to the patch categories groups group ID params
func (o *PatchCategoriesGroupsGroupIDParams) WithAuthorization(Authorization string) *PatchCategoriesGroupsGroupIDParams {
	o.Authorization = Authorization
	return o
}

// WithGroupData adds the groupData to the patch categories groups group ID params
func (o *PatchCategoriesGroupsGroupIDParams) WithGroupData(GroupData *models_core.GroupUpdateBody) *PatchCategoriesGroupsGroupIDParams {
	o.GroupData = GroupData
	return o
}

// WithGroupID adds the groupId to the patch categories groups group ID params
func (o *PatchCategoriesGroupsGroupIDParams) WithGroupID(GroupID int64) *PatchCategoriesGroupsGroupIDParams {
	o.GroupID = GroupID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PatchCategoriesGroupsGroupIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.GroupData == nil {
		o.GroupData = new(models_core.GroupUpdateBody)
	}

	if err := r.SetBodyParam(o.GroupData); err != nil {
		return err
	}

	// path param group_id
	if err := r.SetPathParam("group_id", swag.FormatInt64(o.GroupID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
