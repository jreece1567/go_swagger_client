package c_e_n_t_r_e_s_e_r_v_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetServicesServiceIDParams creates a new GetServicesServiceIDParams object
// with the default values initialized.
func NewGetServicesServiceIDParams() *GetServicesServiceIDParams {
	var ()
	return &GetServicesServiceIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServicesServiceIDParamsWithTimeout creates a new GetServicesServiceIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServicesServiceIDParamsWithTimeout(timeout time.Duration) *GetServicesServiceIDParams {
	var ()
	return &GetServicesServiceIDParams{

		timeout: timeout,
	}
}

/*GetServicesServiceIDParams contains all the parameters to send to the API endpoint
for the get services service ID operation typically these are written to a http.Request
*/
type GetServicesServiceIDParams struct {

	/*ServiceID
	  Service identifier. Request the service with service_id.

	*/
	ServiceID int64

	timeout time.Duration
}

// WithServiceID adds the serviceId to the get services service ID params
func (o *GetServicesServiceIDParams) WithServiceID(ServiceID int64) *GetServicesServiceIDParams {
	o.ServiceID = ServiceID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetServicesServiceIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param service_id
	if err := r.SetPathParam("service_id", swag.FormatInt64(o.ServiceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
