package c_e_n_t_r_e_s_e_r_v_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"restclient/models_core"
)

// PostServicesTypesReader is a Reader for the PostServicesTypes structure.
type PostServicesTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostServicesTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostServicesTypesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPostServicesTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewPostServicesTypesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostServicesTypesCreated creates a PostServicesTypesCreated with default headers values
func NewPostServicesTypesCreated() *PostServicesTypesCreated {
	return &PostServicesTypesCreated{}
}

/*PostServicesTypesCreated handles this case with default header values.

Successfully created the service-type.
*/
type PostServicesTypesCreated struct {
	/*URI of created service-type.
	 */
	Location string

	Payload *models_core.ServiceTypeResponse
}

func (o *PostServicesTypesCreated) Error() string {
	return fmt.Sprintf("[POST /services/types][%d] postServicesTypesCreated  %+v", 201, o.Payload)
}

func (o *PostServicesTypesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header location
	o.Location = response.GetHeader("location")

	o.Payload = new(models_core.ServiceTypeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesTypesUnauthorized creates a PostServicesTypesUnauthorized with default headers values
func NewPostServicesTypesUnauthorized() *PostServicesTypesUnauthorized {
	return &PostServicesTypesUnauthorized{}
}

/*PostServicesTypesUnauthorized handles this case with default header values.

Unauthorized request.
*/
type PostServicesTypesUnauthorized struct {
	Payload *models_core.Http401Response
}

func (o *PostServicesTypesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /services/types][%d] postServicesTypesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostServicesTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.Http401Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesTypesUnprocessableEntity creates a PostServicesTypesUnprocessableEntity with default headers values
func NewPostServicesTypesUnprocessableEntity() *PostServicesTypesUnprocessableEntity {
	return &PostServicesTypesUnprocessableEntity{}
}

/*PostServicesTypesUnprocessableEntity handles this case with default header values.

URI of created service-type.
*/
type PostServicesTypesUnprocessableEntity struct {
	Payload *models_core.ServiceType422Response
}

func (o *PostServicesTypesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /services/types][%d] postServicesTypesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostServicesTypesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_core.ServiceType422Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
