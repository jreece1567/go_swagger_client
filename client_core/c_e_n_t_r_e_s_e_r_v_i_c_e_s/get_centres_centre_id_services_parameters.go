package c_e_n_t_r_e_s_e_r_v_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCentresCentreIDServicesParams creates a new GetCentresCentreIDServicesParams object
// with the default values initialized.
func NewGetCentresCentreIDServicesParams() *GetCentresCentreIDServicesParams {
	var (
		deletedDefault      bool   = bool(false)
		pageDefault         int64  = int64(1)
		perPageDefault      int64  = int64(10)
		serviceClassDefault string = string("physical")
	)
	return &GetCentresCentreIDServicesParams{
		Deleted:      &deletedDefault,
		Page:         &pageDefault,
		PerPage:      &perPageDefault,
		ServiceClass: &serviceClassDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCentresCentreIDServicesParamsWithTimeout creates a new GetCentresCentreIDServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCentresCentreIDServicesParamsWithTimeout(timeout time.Duration) *GetCentresCentreIDServicesParams {
	var (
		deletedDefault      bool   = bool(false)
		pageDefault         int64  = int64(1)
		perPageDefault      int64  = int64(10)
		serviceClassDefault string = string("physical")
	)
	return &GetCentresCentreIDServicesParams{
		Deleted:      &deletedDefault,
		Page:         &pageDefault,
		PerPage:      &perPageDefault,
		ServiceClass: &serviceClassDefault,

		timeout: timeout,
	}
}

/*GetCentresCentreIDServicesParams contains all the parameters to send to the API endpoint
for the get centres centre ID services operation typically these are written to a http.Request
*/
type GetCentresCentreIDServicesParams struct {

	/*CentreID
	  Centre identifier. Request services with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID string
	/*Deleted
	  Deleted services. Request to include (true) or not include (false) services that are deleted.

	*/
	Deleted *bool
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*ServiceClass
	  Filter services by service class

	*/
	ServiceClass *string
	/*UpdatedSince
	  Updated since. Request the services updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCentreID adds the centreId to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithCentreID(CentreID string) *GetCentresCentreIDServicesParams {
	o.CentreID = CentreID
	return o
}

// WithDeleted adds the deleted to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithDeleted(Deleted *bool) *GetCentresCentreIDServicesParams {
	o.Deleted = Deleted
	return o
}

// WithFields adds the fields to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithFields(Fields []string) *GetCentresCentreIDServicesParams {
	o.Fields = Fields
	return o
}

// WithPage adds the page to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithPage(Page *int64) *GetCentresCentreIDServicesParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithPerPage(PerPage *int64) *GetCentresCentreIDServicesParams {
	o.PerPage = PerPage
	return o
}

// WithServiceClass adds the serviceClass to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithServiceClass(ServiceClass *string) *GetCentresCentreIDServicesParams {
	o.ServiceClass = ServiceClass
	return o
}

// WithUpdatedSince adds the updatedSince to the get centres centre ID services params
func (o *GetCentresCentreIDServicesParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetCentresCentreIDServicesParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCentresCentreIDServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param centre_id
	if err := r.SetPathParam("centre_id", o.CentreID); err != nil {
		return err
	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.ServiceClass != nil {

		// query param service_class
		var qrServiceClass string
		if o.ServiceClass != nil {
			qrServiceClass = *o.ServiceClass
		}
		qServiceClass := qrServiceClass
		if qServiceClass != "" {
			if err := r.SetQueryParam("service_class", qServiceClass); err != nil {
				return err
			}
		}

	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
