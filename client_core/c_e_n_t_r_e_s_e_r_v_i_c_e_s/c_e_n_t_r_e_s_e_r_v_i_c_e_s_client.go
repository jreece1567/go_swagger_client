package c_e_n_t_r_e_s_e_r_v_i_c_e_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new c e n t r e s e r v i c e s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c e n t r e s e r v i c e s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteServicesServiceID deletes a service

Request deletion of a service.
*/
func (a *Client) DeleteServicesServiceID(params *DeleteServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesServiceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesServiceID",
		Method:             "DELETE",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServicesServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesServiceIDNoContent), nil
}

/*
DeleteServicesTypesServiceTypeID deletes a service type

Request deletion of a service-type.
*/
func (a *Client) DeleteServicesTypesServiceTypeID(params *DeleteServicesTypesServiceTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesTypesServiceTypeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesTypesServiceTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesTypesServiceTypeID",
		Method:             "DELETE",
		PathPattern:        "/services/types/{service_type_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServicesTypesServiceTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesTypesServiceTypeIDNoContent), nil
}

/*
GetCentresCentreIDServices lists services

Request an array of services, outside of those provided by the retailers, filtered by allowed parameters.
*/
func (a *Client) GetCentresCentreIDServices(params *GetCentresCentreIDServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCentresCentreIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentresCentreIDServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCentresCentreIDServices",
		Method:             "GET",
		PathPattern:        "/centres/{centre_id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentresCentreIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCentresCentreIDServicesOK), nil
}

/*
GetServices lists services alternative endpoint

Request an array of services, outside of those provided by the retailers, filtered by allowed parameters.
*/
func (a *Client) GetServices(params *GetServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServices",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesOK), nil
}

/*
GetServicesServiceID individuals service

Request a single service.
*/
func (a *Client) GetServicesServiceID(params *GetServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceID",
		Method:             "GET",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesServiceIDOK), nil
}

/*
GetServicesTypes lists service types

Request an array of service-types filtered by allowed parameters.
*/
func (a *Client) GetServicesTypes(params *GetServicesTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesTypes",
		Method:             "GET",
		PathPattern:        "/services/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesTypesOK), nil
}

/*
GetServicesTypesServiceTypeID individuals service type

Request a single service-type.
*/
func (a *Client) GetServicesTypesServiceTypeID(params *GetServicesTypesServiceTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesTypesServiceTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesTypesServiceTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesTypesServiceTypeID",
		Method:             "GET",
		PathPattern:        "/services/types/{service_type_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServicesTypesServiceTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesTypesServiceTypeIDOK), nil
}

/*
PatchServicesServiceID updates a service

Request update of a service from JSON data in the request body.
*/
func (a *Client) PatchServicesServiceID(params *PatchServicesServiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchServicesServiceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchServicesServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchServicesServiceID",
		Method:             "PATCH",
		PathPattern:        "/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchServicesServiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchServicesServiceIDNoContent), nil
}

/*
PatchServicesTypesServiceTypeID updates a service type

Request update of a service-type from JSON data in the request body.
*/
func (a *Client) PatchServicesTypesServiceTypeID(params *PatchServicesTypesServiceTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchServicesTypesServiceTypeIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchServicesTypesServiceTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchServicesTypesServiceTypeID",
		Method:             "PATCH",
		PathPattern:        "/services/types/{service_type_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchServicesTypesServiceTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchServicesTypesServiceTypeIDNoContent), nil
}

/*
PostServices creates a service

Request creation of a service from JSON data in the request body.
*/
func (a *Client) PostServices(params *PostServicesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServices",
		Method:             "POST",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostServicesCreated), nil
}

/*
PostServicesTypes creates a service type

Request creation of a service-type from JSON data in the request body.
*/
func (a *Client) PostServicesTypes(params *PostServicesTypesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesTypesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServicesTypes",
		Method:             "POST",
		PathPattern:        "/services/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostServicesTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostServicesTypesCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
