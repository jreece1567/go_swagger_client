package r_e_t_a_i_l_e_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new r e t a i l e r s API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for r e t a i l e r s API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetRetailers lists retailers

Request an array of retailers filtered by allowed parameters.
*/
func (a *Client) GetRetailers(params *GetRetailersParams, authInfo runtime.ClientAuthInfoWriter) (*GetRetailersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetailersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRetailers",
		Method:             "GET",
		PathPattern:        "/retailers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRetailersReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRetailersOK), nil
}

/*
GetRetailersRetailerCode individuals retailer

Request a single retailer.
*/
func (a *Client) GetRetailersRetailerCode(params *GetRetailersRetailerCodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetRetailersRetailerCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetailersRetailerCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRetailersRetailerCode",
		Method:             "GET",
		PathPattern:        "/retailers/{retailer_code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRetailersRetailerCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRetailersRetailerCodeOK), nil
}

/*
PatchRetailersRetailerCode updates a retailer

Request update of a retailer from JSON data in the request body.
*/
func (a *Client) PatchRetailersRetailerCode(params *PatchRetailersRetailerCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PatchRetailersRetailerCodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRetailersRetailerCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchRetailersRetailerCode",
		Method:             "PATCH",
		PathPattern:        "/retailers/{retailer_code}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRetailersRetailerCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRetailersRetailerCodeNoContent), nil
}

/*
PostRetailers creates a retailer

Request creation of a retailer from JSON data in the request body.
*/
func (a *Client) PostRetailers(params *PostRetailersParams, authInfo runtime.ClientAuthInfoWriter) (*PostRetailersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRetailersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRetailers",
		Method:             "POST",
		PathPattern:        "/retailers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRetailersReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRetailersCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
