package r_e_t_a_i_l_e_r_s

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRetailersParams creates a new GetRetailersParams object
// with the default values initialized.
func NewGetRetailersParams() *GetRetailersParams {
	var (
		centreIdDefault string = string("sanfrancisco")
		countryDefault  string = string("us")
		deletedDefault  bool   = bool(false)
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(25)
	)
	return &GetRetailersParams{
		CentreID: &centreIdDefault,
		Country:  &countryDefault,
		Deleted:  &deletedDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRetailersParamsWithTimeout creates a new GetRetailersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRetailersParamsWithTimeout(timeout time.Duration) *GetRetailersParams {
	var (
		centreIdDefault string = string("sanfrancisco")
		countryDefault  string = string("us")
		deletedDefault  bool   = bool(false)
		pageDefault     int64  = int64(1)
		perPageDefault  int64  = int64(25)
	)
	return &GetRetailersParams{
		CentreID: &centreIdDefault,
		Country:  &countryDefault,
		Deleted:  &deletedDefault,
		Page:     &pageDefault,
		PerPage:  &perPageDefault,

		timeout: timeout,
	}
}

/*GetRetailersParams contains all the parameters to send to the API endpoint
for the get retailers operation typically these are written to a http.Request
*/
type GetRetailersParams struct {

	/*CampaignID
	  Campaign identifier. Request retailers with campaign_id.

	*/
	CampaignID *int64
	/*CategoryID
	  Category identifier. Request the retailers with category_id.

	*/
	CategoryID *int64
	/*CentreID
	  Centre identifier. Request the retailers with centre_id. Lowercase code name for a specific centre.

	*/
	CentreID *string
	/*Country
	  Country code. Request the retailers with country code. Lowercase two-character code for country. Current valid values are: au, nz, uk or us.

	*/
	Country *string
	/*Deleted
	  Deleted retailers. Request to include (true) or not include (false) retailers that are deleted.

	*/
	Deleted *bool
	/*Enabled
	  Select enabled retailers. Request to include only enabled (true) or not enabled (false) retailers.

	*/
	Enabled *bool
	/*Features
	  Retailer features. Request the retailers with features.

	*/
	Features []string
	/*Fields
	  Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.

	*/
	Fields []string
	/*Name
	  Retailer name. Request the retailers with a partial name match with wildcards.

	*/
	Name *string
	/*Page
	  Results page number. Specific page of results to request when paginating.

	*/
	Page *int64
	/*PerPage
	  Results per page. Number of items per result set when paginating.

	*/
	PerPage *int64
	/*Q
	  Query. Request retailers based on partial match of name or retailer code.

	*/
	Q *string
	/*RetailerCode
	  Retailer code. Request the list of retailers with retailer_codes.

	*/
	RetailerCode []string
	/*RetailerID
	  Retailer identifier. Request the list of retailers with retailer_id.

	*/
	RetailerID []int64
	/*Statuses
	  Statuses. Request retailers that include the listed statuses.

	*/
	Statuses []string
	/*UpdatedSince
	  Updated since. Request the retailers updated since a specific date and time. ISO-8601 format.

	*/
	UpdatedSince *strfmt.DateTime

	timeout time.Duration
}

// WithCampaignID adds the campaignId to the get retailers params
func (o *GetRetailersParams) WithCampaignID(CampaignID *int64) *GetRetailersParams {
	o.CampaignID = CampaignID
	return o
}

// WithCategoryID adds the categoryId to the get retailers params
func (o *GetRetailersParams) WithCategoryID(CategoryID *int64) *GetRetailersParams {
	o.CategoryID = CategoryID
	return o
}

// WithCentreID adds the centreId to the get retailers params
func (o *GetRetailersParams) WithCentreID(CentreID *string) *GetRetailersParams {
	o.CentreID = CentreID
	return o
}

// WithCountry adds the country to the get retailers params
func (o *GetRetailersParams) WithCountry(Country *string) *GetRetailersParams {
	o.Country = Country
	return o
}

// WithDeleted adds the deleted to the get retailers params
func (o *GetRetailersParams) WithDeleted(Deleted *bool) *GetRetailersParams {
	o.Deleted = Deleted
	return o
}

// WithEnabled adds the enabled to the get retailers params
func (o *GetRetailersParams) WithEnabled(Enabled *bool) *GetRetailersParams {
	o.Enabled = Enabled
	return o
}

// WithFeatures adds the features to the get retailers params
func (o *GetRetailersParams) WithFeatures(Features []string) *GetRetailersParams {
	o.Features = Features
	return o
}

// WithFields adds the fields to the get retailers params
func (o *GetRetailersParams) WithFields(Fields []string) *GetRetailersParams {
	o.Fields = Fields
	return o
}

// WithName adds the name to the get retailers params
func (o *GetRetailersParams) WithName(Name *string) *GetRetailersParams {
	o.Name = Name
	return o
}

// WithPage adds the page to the get retailers params
func (o *GetRetailersParams) WithPage(Page *int64) *GetRetailersParams {
	o.Page = Page
	return o
}

// WithPerPage adds the perPage to the get retailers params
func (o *GetRetailersParams) WithPerPage(PerPage *int64) *GetRetailersParams {
	o.PerPage = PerPage
	return o
}

// WithQ adds the q to the get retailers params
func (o *GetRetailersParams) WithQ(Q *string) *GetRetailersParams {
	o.Q = Q
	return o
}

// WithRetailerCode adds the retailerCode to the get retailers params
func (o *GetRetailersParams) WithRetailerCode(RetailerCode []string) *GetRetailersParams {
	o.RetailerCode = RetailerCode
	return o
}

// WithRetailerID adds the retailerId to the get retailers params
func (o *GetRetailersParams) WithRetailerID(RetailerID []int64) *GetRetailersParams {
	o.RetailerID = RetailerID
	return o
}

// WithStatuses adds the statuses to the get retailers params
func (o *GetRetailersParams) WithStatuses(Statuses []string) *GetRetailersParams {
	o.Statuses = Statuses
	return o
}

// WithUpdatedSince adds the updatedSince to the get retailers params
func (o *GetRetailersParams) WithUpdatedSince(UpdatedSince *strfmt.DateTime) *GetRetailersParams {
	o.UpdatedSince = UpdatedSince
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetRetailersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CampaignID != nil {

		// query param campaign_id
		var qrCampaignID int64
		if o.CampaignID != nil {
			qrCampaignID = *o.CampaignID
		}
		qCampaignID := swag.FormatInt64(qrCampaignID)
		if qCampaignID != "" {
			if err := r.SetQueryParam("campaign_id", qCampaignID); err != nil {
				return err
			}
		}

	}

	if o.CategoryID != nil {

		// query param category_id
		var qrCategoryID int64
		if o.CategoryID != nil {
			qrCategoryID = *o.CategoryID
		}
		qCategoryID := swag.FormatInt64(qrCategoryID)
		if qCategoryID != "" {
			if err := r.SetQueryParam("category_id", qCategoryID); err != nil {
				return err
			}
		}

	}

	if o.CentreID != nil {

		// query param centre_id
		var qrCentreID string
		if o.CentreID != nil {
			qrCentreID = *o.CentreID
		}
		qCentreID := qrCentreID
		if qCentreID != "" {
			if err := r.SetQueryParam("centre_id", qCentreID); err != nil {
				return err
			}
		}

	}

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	valuesFeatures := o.Features

	joinedFeatures := swag.JoinByFormat(valuesFeatures, "csv")
	// query array param features
	if err := r.SetQueryParam("features", joinedFeatures...); err != nil {
		return err
	}

	valuesFields := o.Fields

	joinedFields := swag.JoinByFormat(valuesFields, "csv")
	// query array param fields
	if err := r.SetQueryParam("fields", joinedFields...); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	valuesRetailerCode := o.RetailerCode

	joinedRetailerCode := swag.JoinByFormat(valuesRetailerCode, "csv")
	// query array param retailer_code
	if err := r.SetQueryParam("retailer_code", joinedRetailerCode...); err != nil {
		return err
	}

	var valuesRetailerID []string
	for _, v := range o.RetailerID {
		valuesRetailerID = append(valuesRetailerID, swag.FormatInt64(v))
	}

	joinedRetailerID := swag.JoinByFormat(valuesRetailerID, "csv")
	// query array param retailer_id
	if err := r.SetQueryParam("retailer_id", joinedRetailerID...); err != nil {
		return err
	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "csv")
	// query array param statuses
	if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
		return err
	}

	if o.UpdatedSince != nil {

		// query param updated_since
		var qrUpdatedSince strfmt.DateTime
		if o.UpdatedSince != nil {
			qrUpdatedSince = *o.UpdatedSince
		}
		qUpdatedSince := qrUpdatedSince.String()
		if qUpdatedSince != "" {
			if err := r.SetQueryParam("updated_since", qUpdatedSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
