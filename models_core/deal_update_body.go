package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*DealUpdateBody Data to update a deal.

swagger:model dealUpdateBody
*/
type DealUpdateBody struct {

	/* Campaign identifiers. List of identifiers to retrieve the campaigns related to this deal.
	 */
	CampaignIds []int64 `json:"campaign_ids,omitempty"`

	/* Category identifiers. List of identifiers to retrieve the categories related to this deal.
	 */
	CategoryIds []int64 `json:"category_ids,omitempty"`

	/* comments
	 */
	Comments *DealComment `json:"comments,omitempty"`

	/* Description of deal.
	 */
	Description string `json:"description,omitempty"`

	/* Date-time that the deal ends.
	 */
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	/* Featured deals. Deal is featured (true) or not featured (false) deals. Default is false.
	 */
	Featured bool `json:"featured,omitempty"`

	/* Image reference use internally to retrieve the related image file.
	 */
	ImageRef string `json:"image_ref,omitempty"`

	/* Date-time the deal is published.
	 */
	PublishedAt strfmt.DateTime `json:"published_at,omitempty"`

	/* Date-time the deal starts.
	 */
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	/* Event to set the state of the deal.
	 */
	StateEvent string `json:"state_event,omitempty"`

	/* stores
	 */
	Stores *DealStores `json:"stores,omitempty"`

	/* Subtitle of the deal.
	 */
	Subtitle string `json:"subtitle,omitempty"`

	/* Deal terms and conditions.
	 */
	TermsAndConditions string `json:"terms_and_conditions,omitempty"`

	/* Title of the deal.

	Max Length: 100
	*/
	Title string `json:"title,omitempty"`
}

// Validate validates this deal update body
func (m *DealUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStateEvent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DealUpdateBody) validateCampaignIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CampaignIds) { // not required
		return nil
	}

	return nil
}

func (m *DealUpdateBody) validateCategoryIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryIds) { // not required
		return nil
	}

	return nil
}

func (m *DealUpdateBody) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	if m.Comments != nil {

		if err := m.Comments.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var dealUpdateBodyTypeStateEventPropEnum []interface{}

// prop value enum
func (m *DealUpdateBody) validateStateEventEnum(path, location string, value string) error {
	if dealUpdateBodyTypeStateEventPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["submit","approve","reject","withdraw"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			dealUpdateBodyTypeStateEventPropEnum = append(dealUpdateBodyTypeStateEventPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, dealUpdateBodyTypeStateEventPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DealUpdateBody) validateStateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.StateEvent) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEventEnum("state_event", "body", m.StateEvent); err != nil {
		return err
	}

	return nil
}

func (m *DealUpdateBody) validateStores(formats strfmt.Registry) error {

	if swag.IsZero(m.Stores) { // not required
		return nil
	}

	if m.Stores != nil {

		if err := m.Stores.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DealUpdateBody) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 100); err != nil {
		return err
	}

	return nil
}
