package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StoreLinks Relevant links for the store

swagger:model storeLinks
*/
type StoreLinks struct {

	/* The link to deals associated with this store

	Required: true
	*/
	Deals *GenericLink `json:"deals"`

	/* Links for stores that provide dining facilities

	Required: true
	*/
	Dining *DiningLinks `json:"dining"`

	/* The link to events associated with this store

	Required: true
	*/
	Events *GenericLink `json:"events"`

	/* The link to the logo image of the store's retailer

	Required: true
	*/
	Logo *GenericLink `json:"logo"`

	/* The link for details about this store

	Required: true
	*/
	Self *GenericLink `json:"self"`

	/* The link to the store front image of the store

	Required: true
	*/
	StoreFront *GenericLink `json:"store_front"`
}

// Validate validates this store links
func (m *StoreLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeals(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDining(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStoreFront(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreLinks) validateDeals(formats strfmt.Registry) error {

	if err := validate.Required("deals", "body", m.Deals); err != nil {
		return err
	}

	if m.Deals != nil {

		if err := m.Deals.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *StoreLinks) validateDining(formats strfmt.Registry) error {

	if err := validate.Required("dining", "body", m.Dining); err != nil {
		return err
	}

	if m.Dining != nil {

		if err := m.Dining.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *StoreLinks) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	if m.Events != nil {

		if err := m.Events.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *StoreLinks) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("logo", "body", m.Logo); err != nil {
		return err
	}

	if m.Logo != nil {

		if err := m.Logo.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *StoreLinks) validateSelf(formats strfmt.Registry) error {

	if err := validate.Required("self", "body", m.Self); err != nil {
		return err
	}

	if m.Self != nil {

		if err := m.Self.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *StoreLinks) validateStoreFront(formats strfmt.Registry) error {

	if err := validate.Required("store_front", "body", m.StoreFront); err != nil {
		return err
	}

	if m.StoreFront != nil {

		if err := m.StoreFront.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
