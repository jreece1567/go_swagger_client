package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*KioskCentreInstance Kiosk centre.

swagger:model kioskCentreInstance
*/
type KioskCentreInstance struct {

	/* category ids

	Required: true
	*/
	CategoryIds []int64 `json:"category_ids"`

	/* Centre identifier.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Created at. Date-time that the kiosk centre was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Kiosk centre is enabled.

	Required: true
	*/
	Enabled *bool `json:"enabled"`

	/* features

	Required: true
	*/
	Features []string `json:"features"`

	/* Kiosk centre identifier.
	 */
	KioskCentreID int64 `json:"kiosk_centre_id,omitempty"`

	/* Kiosk centre landing page.

	Required: true
	*/
	LandingPage *string `json:"landing_page"`

	/* languages

	Required: true
	*/
	Languages []string `json:"languages"`

	/* Date-time the kiosk centre was last updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this kiosk centre instance
func (m *KioskCentreInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLandingPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KioskCentreInstance) validateCategoryIds(formats strfmt.Registry) error {

	if err := validate.Required("category_ids", "body", m.CategoryIds); err != nil {
		return err
	}

	return nil
}

func (m *KioskCentreInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *KioskCentreInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *KioskCentreInstance) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *KioskCentreInstance) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	return nil
}

func (m *KioskCentreInstance) validateLandingPage(formats strfmt.Registry) error {

	if err := validate.Required("landing_page", "body", m.LandingPage); err != nil {
		return err
	}

	return nil
}

var kioskCentreInstanceLanguagesItemsEnum []interface{}

func (m *KioskCentreInstance) validateLanguagesItemsEnum(path, location string, value string) error {
	if kioskCentreInstanceLanguagesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["en_US","en_GB","es_ES","fr_FR","it_IT","de_DE","pt_PT","ja_JP","zh_CN","ar_SA","he_IL","ru_RU"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			kioskCentreInstanceLanguagesItemsEnum = append(kioskCentreInstanceLanguagesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, kioskCentreInstanceLanguagesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *KioskCentreInstance) validateLanguages(formats strfmt.Registry) error {

	if err := validate.Required("languages", "body", m.Languages); err != nil {
		return err
	}

	for i := 0; i < len(m.Languages); i++ {

		// value enum
		if err := m.validateLanguagesItemsEnum("languages"+"."+strconv.Itoa(i), "body", m.Languages[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *KioskCentreInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
