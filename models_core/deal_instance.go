package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*DealInstance Deal

swagger:model dealInstance
*/
type DealInstance struct {

	/* links

	Required: true
	*/
	Links *DealLinks `json:"_links"`

	/* Category identifiers. Array of identifiers to retrieve categories this deal is related to.

	Required: true
	*/
	CategoryIds []int64 `json:"category_ids"`

	/* Deal identifier. Identifier to retrieve this deal.

	Required: true
	*/
	DealID *int64 `json:"deal_id"`

	/* Date-time the deal was marked as deleted.
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Description of deal.

	Required: true
	*/
	Description *string `json:"description"`

	/* Date-time the deal ends.

	Required: true
	*/
	EndsAt *strfmt.DateTime `json:"ends_at"`

	/* Deal is featured (true) or not featured (false).

	Required: true
	*/
	Featured *bool `json:"featured"`

	/* Date-time the deal is published.

	Required: true
	*/
	PublishedAt *strfmt.DateTime `json:"published_at"`

	/* Date-time the deal starts.

	Required: true
	*/
	StartsAt *strfmt.DateTime `json:"starts_at"`

	/* Current state of the deal. Applied broadly when stores are in multiple time zones.

	Required: true
	*/
	State *string `json:"state"`

	/* Events available from the current state to transition to a new state.

	Required: true
	*/
	StateEvents []string `json:"state_events"`

	/* Deal stores. Array of stores where the deal is available.

	Required: true
	*/
	Stores []*DealStore `json:"stores"`

	/* Deal subtitle.

	Required: true
	*/
	Subtitle *string `json:"subtitle"`

	/* Terms and Conditions.

	Required: true
	*/
	TermsAndConditions *string `json:"terms_and_conditions"`

	/* Deal title.

	Required: true
	*/
	Title *string `json:"title"`

	/* Date-time the deal was last updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this deal instance
func (m *DealInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDealID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatured(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubtitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTermsAndConditions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DealInstance) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *DealInstance) validateCategoryIds(formats strfmt.Registry) error {

	if err := validate.Required("category_ids", "body", m.CategoryIds); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateDealID(formats strfmt.Registry) error {

	if err := validate.Required("deal_id", "body", m.DealID); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.Required("ends_at", "body", m.EndsAt); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateFeatured(formats strfmt.Registry) error {

	if err := validate.Required("featured", "body", m.Featured); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validatePublishedAt(formats strfmt.Registry) error {

	if err := validate.Required("published_at", "body", m.PublishedAt); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.Required("starts_at", "body", m.StartsAt); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var dealInstanceStateEventsItemsEnum []interface{}

func (m *DealInstance) validateStateEventsItemsEnum(path, location string, value string) error {
	if dealInstanceStateEventsItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["submit","approve","reject","withdraw"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			dealInstanceStateEventsItemsEnum = append(dealInstanceStateEventsItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, dealInstanceStateEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *DealInstance) validateStateEvents(formats strfmt.Registry) error {

	if err := validate.Required("state_events", "body", m.StateEvents); err != nil {
		return err
	}

	for i := 0; i < len(m.StateEvents); i++ {

		// value enum
		if err := m.validateStateEventsItemsEnum("state_events"+"."+strconv.Itoa(i), "body", m.StateEvents[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DealInstance) validateStores(formats strfmt.Registry) error {

	if err := validate.Required("stores", "body", m.Stores); err != nil {
		return err
	}

	for i := 0; i < len(m.Stores); i++ {

		if swag.IsZero(m.Stores[i]) { // not required
			continue
		}

		if m.Stores[i] != nil {

			if err := m.Stores[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *DealInstance) validateSubtitle(formats strfmt.Registry) error {

	if err := validate.Required("subtitle", "body", m.Subtitle); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateTermsAndConditions(formats strfmt.Registry) error {

	if err := validate.Required("terms_and_conditions", "body", m.TermsAndConditions); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *DealInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
