package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NewsletterInfoInstance A list of countries and centre_ids for a list of newsletters.

swagger:model newsletterInfoInstance
*/
type NewsletterInfoInstance struct {

	/* List of centre identifiers. Unique identifiers of centres.
	 */
	CentreIds []string `json:"centre_ids,omitempty"`

	/* Country codes. Request states with country codes. Lowercase two-character code for countries.
	 */
	Countries []string `json:"countries,omitempty"`
}

// Validate validates this newsletter info instance
func (m *NewsletterInfoInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountries(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewsletterInfoInstance) validateCentreIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CentreIds) { // not required
		return nil
	}

	return nil
}

var newsletterInfoInstanceCountriesItemsEnum []interface{}

func (m *NewsletterInfoInstance) validateCountriesItemsEnum(path, location string, value string) error {
	if newsletterInfoInstanceCountriesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["AU","NZ","UK","US"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			newsletterInfoInstanceCountriesItemsEnum = append(newsletterInfoInstanceCountriesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, newsletterInfoInstanceCountriesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewsletterInfoInstance) validateCountries(formats strfmt.Registry) error {

	if swag.IsZero(m.Countries) { // not required
		return nil
	}

	for i := 0; i < len(m.Countries); i++ {

		// value enum
		if err := m.validateCountriesItemsEnum("countries"+"."+strconv.Itoa(i), "body", m.Countries[i]); err != nil {
			return err
		}

	}

	return nil
}
