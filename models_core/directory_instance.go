package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*DirectoryInstance Directory.

swagger:model directoryInstance
*/
type DirectoryInstance struct {

	/* Category identifiers. List of identifiers to retrieve categories related to the centre identified by centre_id.

	Required: true
	*/
	CategoryIds []int64 `json:"category_ids"`

	/* Centre identifier. Identifier to retrieve the centre related to this kiosk_centre directory.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Directory is enabled (true) or not enabled (false).

	Required: true
	*/
	Enabled *bool `json:"enabled"`

	/* Enclosure identifier. Identifier to retrieve the enclosure related to this kiosk_centre directory.

	Required: true
	*/
	EnclosureID *int64 `json:"enclosure_id"`

	/* List of features available on this kiosk_centre directory for the centre identified by centre_id.

	Required: true
	*/
	Features []string `json:"features"`

	/* Directory heading number.

	Required: true
	*/
	Heading *int64 `json:"heading"`

	/* Landing page for this kiosk_centre directory.

	Required: true
	*/
	LandingPage *string `json:"landing_page"`

	/* List of languages available on this kiosk_centre directory.

	Required: true
	*/
	Languages []string `json:"languages"`

	/* Directory name.

	Required: true
	*/
	Name *string `json:"name"`

	/* Directory template.

	Required: true
	*/
	Template *string `json:"template"`

	/* Waypoint identifier. Identifier to retrieve the waypoint related to the enclosure for this kiosk-centre directory.

	Required: true
	*/
	WaypointID *string `json:"waypoint_id"`
}

// Validate validates this directory instance
func (m *DirectoryInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnclosureID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHeading(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLandingPage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWaypointID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryInstance) validateCategoryIds(formats strfmt.Registry) error {

	if err := validate.Required("category_ids", "body", m.CategoryIds); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateEnclosureID(formats strfmt.Registry) error {

	if err := validate.Required("enclosure_id", "body", m.EnclosureID); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateHeading(formats strfmt.Registry) error {

	if err := validate.Required("heading", "body", m.Heading); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateLandingPage(formats strfmt.Registry) error {

	if err := validate.Required("landing_page", "body", m.LandingPage); err != nil {
		return err
	}

	return nil
}

var directoryInstanceLanguagesItemsEnum []interface{}

func (m *DirectoryInstance) validateLanguagesItemsEnum(path, location string, value string) error {
	if directoryInstanceLanguagesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["en_US","en_GB","es_ES","fr_FR","it_IT","de_DE","pt_PT","ja_JP","zh_CN","ar_SA","he_IL","ru_RU"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			directoryInstanceLanguagesItemsEnum = append(directoryInstanceLanguagesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, directoryInstanceLanguagesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *DirectoryInstance) validateLanguages(formats strfmt.Registry) error {

	if err := validate.Required("languages", "body", m.Languages); err != nil {
		return err
	}

	for i := 0; i < len(m.Languages); i++ {

		// value enum
		if err := m.validateLanguagesItemsEnum("languages"+"."+strconv.Itoa(i), "body", m.Languages[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DirectoryInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	return nil
}

func (m *DirectoryInstance) validateWaypointID(formats strfmt.Registry) error {

	if err := validate.Required("waypoint_id", "body", m.WaypointID); err != nil {
		return err
	}

	return nil
}
