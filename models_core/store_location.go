package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StoreLocation Location identifiers and metadata

swagger:model storeLocation
*/
type StoreLocation struct {

	/* Datetime location is disabled

	Required: true
	*/
	DisabledAt *strfmt.DateTime `json:"disabled_at"`

	/* Datetime location is enabled

	Required: true
	*/
	EnabledAt *strfmt.DateTime `json:"enabled_at"`

	/* Floor description

	Required: true
	*/
	LevelDescription *string `json:"level_description"`

	/* Floor identifier

	Required: true
	*/
	LevelID *string `json:"level_id"`

	/* Floor name

	Required: true
	*/
	LevelName *string `json:"level_name"`

	/* Location identifier

	Required: true
	*/
	LocationID *string `json:"location_id"`

	/* Location description

	Required: true
	*/
	Name *string `json:"name"`

	/* Primary level

	Required: true
	*/
	Primary *bool `json:"primary"`

	/* Datetime location is published

	Required: true
	*/
	PublishedAt *strfmt.DateTime `json:"published_at"`
}

// Validate validates this store location
func (m *StoreLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisabledAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabledAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLevelDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLevelID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLevelName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublishedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoreLocation) validateDisabledAt(formats strfmt.Registry) error {

	if err := validate.Required("disabled_at", "body", m.DisabledAt); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateEnabledAt(formats strfmt.Registry) error {

	if err := validate.Required("enabled_at", "body", m.EnabledAt); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateLevelDescription(formats strfmt.Registry) error {

	if err := validate.Required("level_description", "body", m.LevelDescription); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateLevelID(formats strfmt.Registry) error {

	if err := validate.Required("level_id", "body", m.LevelID); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateLevelName(formats strfmt.Registry) error {

	if err := validate.Required("level_name", "body", m.LevelName); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", m.Primary); err != nil {
		return err
	}

	return nil
}

func (m *StoreLocation) validatePublishedAt(formats strfmt.Registry) error {

	if err := validate.Required("published_at", "body", m.PublishedAt); err != nil {
		return err
	}

	return nil
}
