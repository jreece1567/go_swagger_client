package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*OccurrenceInstance Occurrence instance.

swagger:model occurrenceInstance
*/
type OccurrenceInstance struct {

	/* Date-time the occurrence ends.

	Required: true
	*/
	EndsAt *strfmt.DateTime `json:"ends_at"`

	/* Date-time the occurrence starts.

	Required: true
	*/
	StartsAt *strfmt.DateTime `json:"starts_at"`

	/* Summary of the occurrence's event.

	Required: true
	*/
	Summary *string `json:"summary"`

	/* Type of the occurrence.

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this occurrence instance
func (m *OccurrenceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OccurrenceInstance) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.Required("ends_at", "body", m.EndsAt); err != nil {
		return err
	}

	return nil
}

func (m *OccurrenceInstance) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.Required("starts_at", "body", m.StartsAt); err != nil {
		return err
	}

	return nil
}

func (m *OccurrenceInstance) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

var occurrenceInstanceTypeTypePropEnum []interface{}

// prop value enum
func (m *OccurrenceInstance) validateTypeEnum(path, location string, value string) error {
	if occurrenceInstanceTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["open","closed","overnight"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			occurrenceInstanceTypeTypePropEnum = append(occurrenceInstanceTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, occurrenceInstanceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OccurrenceInstance) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
