package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParticipantInstance Participant instance.

swagger:model participantInstance
*/
type ParticipantInstance struct {

	/* Whether participant is connected with its followee.
	 */
	Connected bool `json:"connected,omitempty"`

	/* Followee of participant.
	 */
	Followee *ParticipantInstance `json:"followee,omitempty"`

	/* Followers of participant.
	 */
	Followers []*ParticipantInstance `json:"followers,omitempty"`

	/* Participant type

	Required: true
	*/
	Kind *string `json:"kind"`

	/* Participant key

	Required: true
	*/
	KindID *string `json:"kind_id"`

	/* Participant Identifier
	 */
	ParticipantID int64 `json:"participant_id,omitempty"`
}

// Validate validates this participant instance
func (m *ParticipantInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFollowee(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFollowers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKindID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParticipantInstance) validateFollowee(formats strfmt.Registry) error {

	if swag.IsZero(m.Followee) { // not required
		return nil
	}

	if m.Followee != nil {

		if err := m.Followee.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ParticipantInstance) validateFollowers(formats strfmt.Registry) error {

	if swag.IsZero(m.Followers) { // not required
		return nil
	}

	for i := 0; i < len(m.Followers); i++ {

		if swag.IsZero(m.Followers[i]) { // not required
			continue
		}

		if m.Followers[i] != nil {

			if err := m.Followers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var participantInstanceTypeKindPropEnum []interface{}

// prop value enum
func (m *ParticipantInstance) validateKindEnum(path, location string, value string) error {
	if participantInstanceTypeKindPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Centre","Store"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			participantInstanceTypeKindPropEnum = append(participantInstanceTypeKindPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, participantInstanceTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParticipantInstance) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantInstance) validateKindID(formats strfmt.Registry) error {

	if err := validate.Required("kind_id", "body", m.KindID); err != nil {
		return err
	}

	return nil
}
