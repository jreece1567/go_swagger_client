package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Product Product

swagger:model product
*/
type Product struct {

	/* URI to obtain this record
	 */
	Links *ProductLinks `json:"_links,omitempty"`

	/* Product Brand
	 */
	Brand string `json:"brand,omitempty"`

	/* categories
	 */
	Categories []string `json:"categories,omitempty"`

	/* category ids
	 */
	CategoryIds []int64 `json:"category_ids,omitempty"`

	/* category paths
	 */
	CategoryPaths []string `json:"category_paths,omitempty"`

	/* centres
	 */
	Centres []*RetailerCentre `json:"centres,omitempty"`

	/* Date product was created
	 */
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	/* Detailed product description
	 */
	DetailedDescription string `json:"detailed_description,omitempty"`

	/* Date product was disabled
	 */
	DisabledAt strfmt.DateTime `json:"disabled_at,omitempty"`

	/* Indicates that at least one of the variants is discounted
	 */
	IsDiscounted bool `json:"is_discounted,omitempty"`

	/* Product featured flag
	 */
	IsFeatured bool `json:"is_featured,omitempty"`

	/* Retailer product id
	 */
	ItemCode string `json:"item_code,omitempty"`

	/* Product name
	 */
	Name string `json:"name,omitempty"`

	/* Product name, transliterated and formatted to ASCII
	 */
	NameSlug string `json:"name_slug,omitempty"`

	/* RRP for the most expensive variant in cents
	 */
	Price int64 `json:"price,omitempty"`

	/* Product primary category
	 */
	PrimaryCategory string `json:"primary_category,omitempty"`

	/* Product primary category id
	 */
	PrimaryCategoryID int64 `json:"primary_category_id,omitempty"`

	/* Auto generated ID
	 */
	ProductID string `json:"product_id,omitempty"`

	/* Information about the product's retailer
	 */
	Retailer *ProductRetailer `json:"retailer,omitempty"`

	/* Westfield retailer code
	 */
	RetailerCode string `json:"retailer_code,omitempty"`

	/* Sale price for the most expensive variant in cents
	 */
	SalePrice int64 `json:"sale_price,omitempty"`

	/* Short product description
	 */
	ShortDescription string `json:"short_description,omitempty"`

	/* All the stores associated with the product's retailer
	 */
	Stores []*RetailerStore `json:"stores,omitempty"`

	/* Date product was updated
	 */
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	/* variants
	 */
	Variants []*ProductVariant `json:"variants,omitempty"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryPaths(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentres(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetailer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVariants(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Product) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	return nil
}

func (m *Product) validateCategoryIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryIds) { // not required
		return nil
	}

	return nil
}

func (m *Product) validateCategoryPaths(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryPaths) { // not required
		return nil
	}

	return nil
}

func (m *Product) validateCentres(formats strfmt.Registry) error {

	if swag.IsZero(m.Centres) { // not required
		return nil
	}

	for i := 0; i < len(m.Centres); i++ {

		if swag.IsZero(m.Centres[i]) { // not required
			continue
		}

		if m.Centres[i] != nil {

			if err := m.Centres[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Product) validateRetailer(formats strfmt.Registry) error {

	if swag.IsZero(m.Retailer) { // not required
		return nil
	}

	if m.Retailer != nil {

		if err := m.Retailer.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Product) validateStores(formats strfmt.Registry) error {

	if swag.IsZero(m.Stores) { // not required
		return nil
	}

	for i := 0; i < len(m.Stores); i++ {

		if swag.IsZero(m.Stores[i]) { // not required
			continue
		}

		if m.Stores[i] != nil {

			if err := m.Stores[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Product) validateVariants(formats strfmt.Registry) error {

	if swag.IsZero(m.Variants) { // not required
		return nil
	}

	for i := 0; i < len(m.Variants); i++ {

		if swag.IsZero(m.Variants[i]) { // not required
			continue
		}

		if m.Variants[i] != nil {

			if err := m.Variants[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
