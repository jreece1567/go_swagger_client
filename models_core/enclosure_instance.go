package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*EnclosureInstance Enclosure.

swagger:model enclosureInstance
*/
type EnclosureInstance struct {

	/* Centre identifier.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Date-time the enclosure was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Enclosure is enabled (true) or not enabled (false).

	Required: true
	*/
	Enabled *bool `json:"enabled"`

	/* Enclosure identifier.

	Required: true
	*/
	EnclosureID *int64 `json:"enclosure_id"`

	/* Enclosure name.

	Required: true
	*/
	Name *string `json:"name"`

	/* Date-time the enclosure was last updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	/* Waypoint identifier.

	Required: true
	*/
	WaypointID *string `json:"waypoint_id"`
}

// Validate validates this enclosure instance
func (m *EnclosureInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnclosureID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWaypointID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnclosureInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateEnclosureID(formats strfmt.Registry) error {

	if err := validate.Required("enclosure_id", "body", m.EnclosureID); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *EnclosureInstance) validateWaypointID(formats strfmt.Registry) error {

	if err := validate.Required("waypoint_id", "body", m.WaypointID); err != nil {
		return err
	}

	return nil
}
