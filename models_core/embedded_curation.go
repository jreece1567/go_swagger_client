package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*EmbeddedCuration Curations embedded within a parent

swagger:model embeddedCuration
*/
type EmbeddedCuration struct {

	/* links

	Required: true
	*/
	Links *EmbeddedCurationLinks `json:"_links"`

	/* Curation code

	Required: true
	*/
	Code *string `json:"code"`

	/* Auto generated identifier

	Required: true
	*/
	CurationID *int64 `json:"curation_id"`

	/* Description of curation

	Required: true
	*/
	Description *string `json:"description"`

	/* Curation name

	Required: true
	*/
	Name *string `json:"name"`

	/* Relationship to parent curation

	Required: true
	*/
	Relationship *string `json:"relationship"`
}

// Validate validates this embedded curation
func (m *EmbeddedCuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelationship(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbeddedCuration) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EmbeddedCuration) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddedCuration) validateCurationID(formats strfmt.Registry) error {

	if err := validate.Required("curation_id", "body", m.CurationID); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddedCuration) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddedCuration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddedCuration) validateRelationship(formats strfmt.Registry) error {

	if err := validate.Required("relationship", "body", m.Relationship); err != nil {
		return err
	}

	return nil
}
