package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ServiceCreateBody Service create parameters in message body

swagger:model serviceCreateBody
*/
type ServiceCreateBody struct {

	/* Whether the service is currently available
	 */
	Active bool `json:"active,omitempty"`

	/* Centre this service is available in

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Full description of the service
	 */
	Description string `json:"description,omitempty"`

	/* Email for the service
	 */
	Email string `json:"email,omitempty"`

	/* hours
	 */
	Hours []*ServiceHourBody `json:"hours,omitempty"`

	/* Image file name
	 */
	ImageRef string `json:"image_ref,omitempty"`

	/* locations
	 */
	Locations []*ServiceLocationBody `json:"locations,omitempty"`

	/* Long title for the service
	 */
	LongTitle string `json:"long_title,omitempty"`

	/* Phone number for the service
	 */
	PhoneNumber string `json:"phone_number,omitempty"`

	/* rates
	 */
	Rates []*ServiceRateBody `json:"rates,omitempty"`

	/* Type of service

	Required: true
	*/
	ServiceType *string `json:"service_type"`

	/* Short title for the service
	 */
	ShortTitle string `json:"short_title,omitempty"`

	/* Order in which the service should appear in lists
	 */
	SortOrder int64 `json:"sort_order,omitempty"`

	/* URL for the service
	 */
	URL string `json:"url,omitempty"`
}

// Validate validates this service create body
func (m *ServiceCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateBody) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateBody) validateHours(formats strfmt.Registry) error {

	if swag.IsZero(m.Hours) { // not required
		return nil
	}

	for i := 0; i < len(m.Hours); i++ {

		if swag.IsZero(m.Hours[i]) { // not required
			continue
		}

		if m.Hours[i] != nil {

			if err := m.Hours[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServiceCreateBody) validateLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {

		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {

			if err := m.Locations[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServiceCreateBody) validateRates(formats strfmt.Registry) error {

	if swag.IsZero(m.Rates) { // not required
		return nil
	}

	for i := 0; i < len(m.Rates); i++ {

		if swag.IsZero(m.Rates[i]) { // not required
			continue
		}

		if m.Rates[i] != nil {

			if err := m.Rates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServiceCreateBody) validateServiceType(formats strfmt.Registry) error {

	if err := validate.Required("service_type", "body", m.ServiceType); err != nil {
		return err
	}

	return nil
}
