package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ScheduleUpdateBody Data to update a schedule.

swagger:model scheduleUpdateBody
*/
type ScheduleUpdateBody struct {

	/* days of week
	 */
	DaysOfWeek map[string][]ScheduleEvent `json:"days_of_week,omitempty"`

	/* Date-time that the schedule ends.
	 */
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	/* events
	 */
	Events []*ScheduleEvent `json:"events,omitempty"`

	/* Schedule name.
	 */
	Name string `json:"name,omitempty"`

	/* Date-time that the schedule starts.
	 */
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	/* Schedule time zone.

	Required: true
	*/
	TimeZone *string `json:"time_zone"`
}

// Validate validates this schedule update body
func (m *ScheduleUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaysOfWeek(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleUpdateBody) validateDaysOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	if err := validate.Required("days_of_week", "body", m.DaysOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleUpdateBody) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {

			if err := m.Events[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleUpdateBody) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("time_zone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}
