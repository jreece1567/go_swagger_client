package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*GeofenceList geofence list

swagger:model geofenceList
*/
type GeofenceList struct {

	/* area
	 */
	Area *GeofenceInstance `json:"area,omitempty"`

	/* building
	 */
	Building *GeofenceInstance `json:"building,omitempty"`

	/* parking
	 */
	Parking *GeofenceInstance `json:"parking,omitempty"`
}

// Validate validates this geofence list
func (m *GeofenceList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBuilding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParking(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeofenceList) validateArea(formats strfmt.Registry) error {

	if swag.IsZero(m.Area) { // not required
		return nil
	}

	if m.Area != nil {

		if err := m.Area.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GeofenceList) validateBuilding(formats strfmt.Registry) error {

	if swag.IsZero(m.Building) { // not required
		return nil
	}

	if m.Building != nil {

		if err := m.Building.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GeofenceList) validateParking(formats strfmt.Registry) error {

	if swag.IsZero(m.Parking) { // not required
		return nil
	}

	if m.Parking != nil {

		if err := m.Parking.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
