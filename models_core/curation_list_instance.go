package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CurationListInstance Information about a curation

swagger:model curationListInstance
*/
type CurationListInstance struct {

	/* links

	Required: true
	*/
	Links *CurationLinks `json:"_links"`

	/* List of category identifiers

	Required: true
	*/
	CategoryIds []int64 `json:"category_ids"`

	/* List of centres this curation is available for

	Required: true
	*/
	CentreIds []string `json:"centre_ids"`

	/* Curation code

	Required: true
	*/
	Code *string `json:"code"`

	/* Auto generated identifier

	Required: true
	*/
	CurationID *int64 `json:"curation_id"`

	/* Description of the curation

	Required: true
	*/
	Description *string `json:"description"`

	/* When this curation expires

	Required: true
	*/
	EndsAt *strfmt.DateTime `json:"ends_at"`

	/* Featured

	Required: true
	*/
	Featured *bool `json:"featured"`

	/* Curation name

	Required: true
	*/
	Name *string `json:"name"`

	/* List of product category identifiers

	Required: true
	*/
	ProductCategoryIds []int64 `json:"product_category_ids"`

	/* List of product identifiers in this curation

	Required: true
	*/
	ProductIds []string `json:"product_ids"`

	/* SEO title

	Required: true
	*/
	SeoTitle *string `json:"seo_title"`

	/* When the curation is available

	Required: true
	*/
	StartsAt *strfmt.DateTime `json:"starts_at"`

	/* State of curation

	Required: true
	*/
	State *string `json:"state"`

	/* The last time this curation was updated

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this curation list instance
func (m *CurationListInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEndsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatured(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSeoTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurationListInstance) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CurationListInstance) validateCategoryIds(formats strfmt.Registry) error {

	if err := validate.Required("category_ids", "body", m.CategoryIds); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateCentreIds(formats strfmt.Registry) error {

	if err := validate.Required("centre_ids", "body", m.CentreIds); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateCurationID(formats strfmt.Registry) error {

	if err := validate.Required("curation_id", "body", m.CurationID); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.Required("ends_at", "body", m.EndsAt); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateFeatured(formats strfmt.Registry) error {

	if err := validate.Required("featured", "body", m.Featured); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateProductCategoryIds(formats strfmt.Registry) error {

	if err := validate.Required("product_category_ids", "body", m.ProductCategoryIds); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateProductIds(formats strfmt.Registry) error {

	if err := validate.Required("product_ids", "body", m.ProductIds); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateSeoTitle(formats strfmt.Registry) error {

	if err := validate.Required("seo_title", "body", m.SeoTitle); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.Required("starts_at", "body", m.StartsAt); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *CurationListInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
