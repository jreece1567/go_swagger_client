package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*ParkingUpdateBody Parking update parameters in message body

swagger:model parkingUpdateBody
*/
type ParkingUpdateBody struct {

	/* Additional parking information
	 */
	AdditionalParkingInformation string `json:"additional_parking_information,omitempty"`

	/* Centre identifier
	 */
	CentreID string `json:"centre_id,omitempty"`

	/* Credit card surcharge amount
	 */
	CreditCardSurchargeAmount string `json:"credit_card_surcharge_amount,omitempty"`

	/* Fee when parking is not hourly
	 */
	FlatRate string `json:"flat_rate,omitempty"`

	/* Maximum daily rate on weekdays
	 */
	MaximumDailyRateWeekday string `json:"maximum_daily_rate_weekday,omitempty"`

	/* Maximum daily rate on weekends
	 */
	MaximumDailyRateWeekend string `json:"maximum_daily_rate_weekend,omitempty"`

	/* Overnight fee on weekdays
	 */
	OvernightFeeWeekday string `json:"overnight_fee_weekday,omitempty"`

	/* Overnight fee on weekends
	 */
	OvernightFeeWeekend string `json:"overnight_fee_weekend,omitempty"`

	/* parking rates
	 */
	ParkingRates []*ParkingRates `json:"parking_rates,omitempty"`

	/* PDF filename for terms and conditions
	 */
	PdfRef string `json:"pdf_ref,omitempty"`

	/* Fee (true) or complimentary (false) parking
	 */
	RatesApply bool `json:"rates_apply,omitempty"`

	/* Type of rate
	 */
	TypeOfRate string `json:"type_of_rate,omitempty"`

	/* Valet parking instructions
	 */
	ValetParkingInstructions string `json:"valet_parking_instructions,omitempty"`
}

// Validate validates this parking update body
func (m *ParkingUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParkingRates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingUpdateBody) validateParkingRates(formats strfmt.Registry) error {

	if swag.IsZero(m.ParkingRates) { // not required
		return nil
	}

	for i := 0; i < len(m.ParkingRates); i++ {

		if swag.IsZero(m.ParkingRates[i]) { // not required
			continue
		}

		if m.ParkingRates[i] != nil {

			if err := m.ParkingRates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
