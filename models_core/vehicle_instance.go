package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*VehicleInstance vehicle instance

swagger:model vehicleInstance
*/
type VehicleInstance struct {

	/* Payment method associated with the account.

	Required: true
	*/
	AccountPaymentType *string `json:"account_payment_type"`

	/* Centre dependent user type.

	Required: true
	*/
	ArticleID *int64 `json:"article_id"`

	/* Carpark identifier.
	 */
	CarParkID int64 `json:"car_park_id,omitempty"`

	/* Carpark name.
	 */
	CarParkName string `json:"car_park_name,omitempty"`

	/* Centre identifier.
	 */
	CentreID string `json:"centre_id,omitempty"`

	/* List of currently applied discounts.

	Required: true
	*/
	Discounts []*DiscountInstance `json:"discounts"`

	/* The date-time the vehicle entered the carpark.

	Required: true
	*/
	EntryDateTime *strfmt.DateTime `json:"entry_date_time"`

	/* Entry device identifier.
	 */
	EntryDeviceID int64 `json:"entry_device_id,omitempty"`

	/* Entry device name.
	 */
	EntryDeviceName string `json:"entry_device_name,omitempty"`

	/* Parking-transaction identifier.
	 */
	ParkingTransactionID int64 `json:"parking_transaction_id,omitempty"`

	/* Is the vehicle present in carpark.

	Required: true
	*/
	PresentInCarPark *bool `json:"present_in_car_park"`

	/* Is the vehicle registered.

	Required: true
	*/
	RegisteredOnline *bool `json:"registered_online"`

	/* Vehicle registration plate.

	Required: true
	*/
	RegistrationNumber *string `json:"registration_number"`

	/* The currently applied tariff.

	Required: true
	*/
	Tariff *TariffInstance `json:"tariff"`
}

// Validate validates this vehicle instance
func (m *VehicleInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountPaymentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateArticleID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiscounts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryDateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePresentInCarPark(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegisteredOnline(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistrationNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTariff(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vehicleInstanceTypeAccountPaymentTypePropEnum []interface{}

// prop value enum
func (m *VehicleInstance) validateAccountPaymentTypeEnum(path, location string, value string) error {
	if vehicleInstanceTypeAccountPaymentTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Auto_Payment","Pay_At_Paystation",""]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			vehicleInstanceTypeAccountPaymentTypePropEnum = append(vehicleInstanceTypeAccountPaymentTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, vehicleInstanceTypeAccountPaymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VehicleInstance) validateAccountPaymentType(formats strfmt.Registry) error {

	if err := validate.Required("account_payment_type", "body", m.AccountPaymentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountPaymentTypeEnum("account_payment_type", "body", *m.AccountPaymentType); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validateArticleID(formats strfmt.Registry) error {

	if err := validate.Required("article_id", "body", m.ArticleID); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validateDiscounts(formats strfmt.Registry) error {

	if err := validate.Required("discounts", "body", m.Discounts); err != nil {
		return err
	}

	for i := 0; i < len(m.Discounts); i++ {

		if swag.IsZero(m.Discounts[i]) { // not required
			continue
		}

		if m.Discounts[i] != nil {

			if err := m.Discounts[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VehicleInstance) validateEntryDateTime(formats strfmt.Registry) error {

	if err := validate.Required("entry_date_time", "body", m.EntryDateTime); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validatePresentInCarPark(formats strfmt.Registry) error {

	if err := validate.Required("present_in_car_park", "body", m.PresentInCarPark); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validateRegisteredOnline(formats strfmt.Registry) error {

	if err := validate.Required("registered_online", "body", m.RegisteredOnline); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validateRegistrationNumber(formats strfmt.Registry) error {

	if err := validate.Required("registration_number", "body", m.RegistrationNumber); err != nil {
		return err
	}

	return nil
}

func (m *VehicleInstance) validateTariff(formats strfmt.Registry) error {

	if err := validate.Required("tariff", "body", m.Tariff); err != nil {
		return err
	}

	if m.Tariff != nil {

		if err := m.Tariff.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
