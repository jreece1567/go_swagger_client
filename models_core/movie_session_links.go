package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*MovieSessionLinks movie session links

swagger:model movieSessionLinks
*/
type MovieSessionLinks struct {

	/* URL for making a booking for this session

	Required: true
	*/
	BookingURL *GenericLink `json:"booking_url"`

	/* URL for the centre this session belongs to

	Required: true
	*/
	Centre *CentreLink `json:"centre"`

	/* URL for the store this session will be shown at

	Required: true
	*/
	Store *GenericLink `json:"store"`
}

// Validate validates this movie session links
func (m *MovieSessionLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookingURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentre(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MovieSessionLinks) validateBookingURL(formats strfmt.Registry) error {

	if err := validate.Required("booking_url", "body", m.BookingURL); err != nil {
		return err
	}

	if m.BookingURL != nil {

		if err := m.BookingURL.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MovieSessionLinks) validateCentre(formats strfmt.Registry) error {

	if err := validate.Required("centre", "body", m.Centre); err != nil {
		return err
	}

	if m.Centre != nil {

		if err := m.Centre.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *MovieSessionLinks) validateStore(formats strfmt.Registry) error {

	if err := validate.Required("store", "body", m.Store); err != nil {
		return err
	}

	if m.Store != nil {

		if err := m.Store.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
