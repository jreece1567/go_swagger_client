package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CentreTradingHour centre trading hour

swagger:model centreTradingHour
*/
type CentreTradingHour struct {

	/* links
	 */
	Links *TradingHourLinks `json:"_links,omitempty"`

	/* Identifier for centre

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Whether the centre is open
	 */
	Closed bool `json:"closed,omitempty"`

	/* When the centre closes
	 */
	ClosingTime string `json:"closing_time,omitempty"`

	/* Date the trading hour is for
	 */
	Date string `json:"date,omitempty"`

	/* 0-indexed day of the week (e.g. 0: Mon, 1: Tue)
	 */
	DayOfWeek int64 `json:"day_of_week,omitempty"`

	/* Description of trading hour
	 */
	Description string `json:"description,omitempty"`

	/* Type of trading hour (special or standard)

	Required: true
	*/
	HourType *string `json:"hour_type"`

	/* Auto generated identifier

	Required: true
	*/
	ID *int64 `json:"id"`

	/* When the centre opens
	 */
	OpeningTime string `json:"opening_time,omitempty"`
}

// Validate validates this centre trading hour
func (m *CentreTradingHour) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHourType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CentreTradingHour) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CentreTradingHour) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *CentreTradingHour) validateHourType(formats strfmt.Registry) error {

	if err := validate.Required("hour_type", "body", m.HourType); err != nil {
		return err
	}

	return nil
}

func (m *CentreTradingHour) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}
