package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*RetailerUpdateBody Parameters for updating a retailer

swagger:model retailerUpdateBody
*/
type RetailerUpdateBody struct {

	/* List of affiliate fields for a retailer
	 */
	AffiliateFields []*RetailerAffiliateField `json:"affiliate_fields,omitempty"`

	/* Conversion tracking provider ID
	 */
	CamRef string `json:"cam_ref,omitempty"`

	/* Identifier of a Westfield campaign for the retailer
	 */
	CampaignID string `json:"campaign_id,omitempty"`

	/* List of Category IDs associated with the retailer
	 */
	CategoryIds []int64 `json:"category_ids,omitempty"`

	/* Two letter code of the country the retailer operates in
	 */
	Country string `json:"country,omitempty"`

	/* Three letter code of the currency the retailer uses
	 */
	CurrencyCode string `json:"currency_code,omitempty"`

	/* E-mail address of the retailer
	 */
	EmailAddress string `json:"email_address,omitempty"`

	/* Flag indicating if the retailer is enabled in the Westfield system
	 */
	Enabled bool `json:"enabled,omitempty"`

	/* List of features the retailer has. If 'products' is present the retailer can upload products to the Westfield system. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.
	 */
	Features []string `json:"features,omitempty"`

	/* Identifier of the retailer's lease with Westfield
	 */
	LeaseID string `json:"lease_id,omitempty"`

	/* Storage provider ID of the retailer's logo image
	 */
	LogoRef string `json:"logo_ref,omitempty"`

	/* Name of the retailer
	 */
	Name string `json:"name,omitempty"`

	/* Tiers for grouping similar retailers
	 */
	ProductTier int64 `json:"product_tier,omitempty"`

	/* URL of the retailer's website
	 */
	RetailerWebsite string `json:"retailer_website,omitempty"`

	/* List of Service Category identifiers associated with the retailer
	 */
	ServiceCategoryIds []int64 `json:"service_category_ids,omitempty"`

	/* Long description of the retailer

	Max Length: 1000
	*/
	StoreProfile string `json:"store_profile,omitempty"`

	/* Storage provider ID of the image of a store front of the retailer
	 */
	StorefrontRef string `json:"storefront_ref,omitempty"`
}

// Validate validates this retailer update body
func (m *RetailerUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProductTier(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceCategoryIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStoreProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetailerUpdateBody) validateAffiliateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.AffiliateFields) { // not required
		return nil
	}

	for i := 0; i < len(m.AffiliateFields); i++ {

		if swag.IsZero(m.AffiliateFields[i]) { // not required
			continue
		}

		if m.AffiliateFields[i] != nil {

			if err := m.AffiliateFields[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *RetailerUpdateBody) validateCategoryIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryIds) { // not required
		return nil
	}

	return nil
}

var retailerUpdateBodyFeaturesItemsEnum []interface{}

func (m *RetailerUpdateBody) validateFeaturesItemsEnum(path, location string, value string) error {
	if retailerUpdateBodyFeaturesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["products","can_syndicate"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			retailerUpdateBodyFeaturesItemsEnum = append(retailerUpdateBodyFeaturesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, retailerUpdateBodyFeaturesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *RetailerUpdateBody) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {

		// value enum
		if err := m.validateFeaturesItemsEnum("features"+"."+strconv.Itoa(i), "body", m.Features[i]); err != nil {
			return err
		}

	}

	return nil
}

var retailerUpdateBodyTypeProductTierPropEnum []interface{}

// prop value enum
func (m *RetailerUpdateBody) validateProductTierEnum(path, location string, value int64) error {
	if retailerUpdateBodyTypeProductTierPropEnum == nil {
		var res []int64
		if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			retailerUpdateBodyTypeProductTierPropEnum = append(retailerUpdateBodyTypeProductTierPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, retailerUpdateBodyTypeProductTierPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RetailerUpdateBody) validateProductTier(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateProductTierEnum("product_tier", "body", m.ProductTier); err != nil {
		return err
	}

	return nil
}

func (m *RetailerUpdateBody) validateServiceCategoryIds(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceCategoryIds) { // not required
		return nil
	}

	return nil
}

func (m *RetailerUpdateBody) validateStoreProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreProfile) { // not required
		return nil
	}

	if err := validate.MaxLength("store_profile", "body", string(m.StoreProfile), 1000); err != nil {
		return err
	}

	return nil
}
