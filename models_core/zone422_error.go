package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Zone422Error zone422 error

swagger:model zone422Error
*/
type Zone422Error struct {

	/* A list of errors that do not apply to an attribute.
	 */
	Base ValidationError `json:"base,omitempty"`

	/* centre id
	 */
	CentreID ValidationError `json:"centre_id,omitempty"`

	/* color
	 */
	Color []*ColorError `json:"color,omitempty"`

	/* name
	 */
	Name ValidationError `json:"name,omitempty"`

	/* status
	 */
	Status ValidationError `json:"status,omitempty"`

	/* waypoints
	 */
	Waypoints ValidationError `json:"waypoints,omitempty"`
}

// Validate validates this zone422 error
func (m *Zone422Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Zone422Error) validateColor(formats strfmt.Registry) error {

	if swag.IsZero(m.Color) { // not required
		return nil
	}

	for i := 0; i < len(m.Color); i++ {

		if swag.IsZero(m.Color[i]) { // not required
			continue
		}

		if m.Color[i] != nil {

			if err := m.Color[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
