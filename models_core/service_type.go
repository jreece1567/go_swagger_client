package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ServiceType service type

swagger:model serviceType
*/
type ServiceType struct {

	/* links

	Required: true
	*/
	Links *ServiceTypeLinks `json:"_links"`

	/* Country in which the service type is available

	Required: true
	*/
	Country *string `json:"country"`

	/* Date and time the service type was marked as deleted
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Service type name

	Required: true
	*/
	Name *string `json:"name"`

	/* Class of the service type

	Required: true
	*/
	ServiceClass *string `json:"service_class"`

	/* Service type identifier

	Required: true
	*/
	ServiceTypeID *int64 `json:"service_type_id"`

	/* Date and time the service type was last updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this service type
func (m *ServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceClass(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceType) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var serviceTypeTypeCountryPropEnum []interface{}

// prop value enum
func (m *ServiceType) validateCountryEnum(path, location string, value string) error {
	if serviceTypeTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["au","nz","uk","us"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			serviceTypeTypeCountryPropEnum = append(serviceTypeTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, serviceTypeTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceType) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", *m.Country); err != nil {
		return err
	}

	return nil
}

func (m *ServiceType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var serviceTypeTypeServiceClassPropEnum []interface{}

// prop value enum
func (m *ServiceType) validateServiceClassEnum(path, location string, value string) error {
	if serviceTypeTypeServiceClassPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["physical","digital"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			serviceTypeTypeServiceClassPropEnum = append(serviceTypeTypeServiceClassPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, serviceTypeTypeServiceClassPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceType) validateServiceClass(formats strfmt.Registry) error {

	if err := validate.Required("service_class", "body", m.ServiceClass); err != nil {
		return err
	}

	// value enum
	if err := m.validateServiceClassEnum("service_class", "body", *m.ServiceClass); err != nil {
		return err
	}

	return nil
}

func (m *ServiceType) validateServiceTypeID(formats strfmt.Registry) error {

	if err := validate.Required("service_type_id", "body", m.ServiceTypeID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceType) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
