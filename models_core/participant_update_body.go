package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParticipantUpdateBody Data to update a participant.

swagger:model participantUpdateBody
*/
type ParticipantUpdateBody struct {

	/* Participant type
	 */
	Kind string `json:"kind,omitempty"`

	/* Identifier for participant.
	 */
	KindID string `json:"kind_id,omitempty"`

	/* link participants
	 */
	LinkParticipants []string `json:"link_participants,omitempty"`

	/* unlink participants
	 */
	UnlinkParticipants []string `json:"unlink_participants,omitempty"`
}

// Validate validates this participant update body
func (m *ParticipantUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinkParticipants(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnlinkParticipants(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var participantUpdateBodyTypeKindPropEnum []interface{}

// prop value enum
func (m *ParticipantUpdateBody) validateKindEnum(path, location string, value string) error {
	if participantUpdateBodyTypeKindPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["Centre","Store"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			participantUpdateBodyTypeKindPropEnum = append(participantUpdateBodyTypeKindPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, participantUpdateBodyTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParticipantUpdateBody) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantUpdateBody) validateLinkParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkParticipants) { // not required
		return nil
	}

	return nil
}

func (m *ParticipantUpdateBody) validateUnlinkParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.UnlinkParticipants) { // not required
		return nil
	}

	return nil
}
