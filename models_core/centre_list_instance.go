package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CentreListInstance centre list instance

swagger:model centreListInstance
*/
type CentreListInstance struct {

	/* Hash of links

	Required: true
	*/
	Links *CentreListLinks `json:"_links"`

	/* Centre identifier

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Country

	Required: true
	*/
	Country *string `json:"country"`

	/* Deleted date
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Enabled flag (true/false)

	Required: true
	*/
	Enabled *bool `json:"enabled"`

	/* features

	Required: true
	*/
	Features []string `json:"features"`

	/* Hash of geofence information with possible keys 'building', 'parking', or 'area'

	Required: true
	*/
	Geofences *GeofenceList `json:"geofences"`

	/* Latitude

	Required: true
	*/
	Latitude *float64 `json:"latitude"`

	/* Longitude

	Required: true
	*/
	Longitude *float64 `json:"longitude"`

	/* Map location identifier

	Required: true
	*/
	MapID *string `json:"map_id"`

	/* Name

	Required: true
	*/
	Name *string `json:"name"`

	/* Short name

	Required: true
	*/
	ShortName *string `json:"short_name"`

	/* State

	Required: true
	*/
	State *string `json:"state"`

	/* City/Suburb

	Required: true
	*/
	Suburb *string `json:"suburb"`

	/* Updated date

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`
}

// Validate validates this centre list instance
func (m *CentreListInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGeofences(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMapID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShortName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSuburb(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CentreListInstance) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CentreListInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

var centreListInstanceTypeCountryPropEnum []interface{}

// prop value enum
func (m *CentreListInstance) validateCountryEnum(path, location string, value string) error {
	if centreListInstanceTypeCountryPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["AU","NZ","UK","US"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			centreListInstanceTypeCountryPropEnum = append(centreListInstanceTypeCountryPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, centreListInstanceTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CentreListInstance) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", *m.Country); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateGeofences(formats strfmt.Registry) error {

	if err := validate.Required("geofences", "body", m.Geofences); err != nil {
		return err
	}

	if m.Geofences != nil {

		if err := m.Geofences.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *CentreListInstance) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateMapID(formats strfmt.Registry) error {

	if err := validate.Required("map_id", "body", m.MapID); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateShortName(formats strfmt.Registry) error {

	if err := validate.Required("short_name", "body", m.ShortName); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateSuburb(formats strfmt.Registry) error {

	if err := validate.Required("suburb", "body", m.Suburb); err != nil {
		return err
	}

	return nil
}

func (m *CentreListInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}
