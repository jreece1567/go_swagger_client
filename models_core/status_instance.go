package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StatusInstance Status information for a store.

swagger:model statusInstance
*/
type StatusInstance struct {

	/* Date-time this store is retired or disabled.
	 */
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	/* Date-time this store is in preview status mode.
	 */
	PublishAt strfmt.DateTime `json:"publish_at,omitempty"`

	/* Date-time this store is opening.
	 */
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	/* State of the store. Valid states include: [pending, preview, live, disabled].

	Required: true
	*/
	State *string `json:"state"`
}

// Validate validates this status instance
func (m *StatusInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusInstanceTypeStatePropEnum []interface{}

// prop value enum
func (m *StatusInstance) validateStateEnum(path, location string, value string) error {
	if statusInstanceTypeStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["pending","preview","live","disabled"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			statusInstanceTypeStatePropEnum = append(statusInstanceTypeStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, statusInstanceTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusInstance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}
