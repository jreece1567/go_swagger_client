package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*StateListInstance State

swagger:model stateListInstance
*/
type StateListInstance struct {

	/* State abbreviation

	Required: true
	*/
	Abbreviation *string `json:"abbreviation"`

	/* Two-letter state code

	Required: true
	*/
	CountryCode *string `json:"country_code"`

	/* Date when state was enabled

	Required: true
	*/
	EnabledAt *strfmt.DateTime `json:"enabled_at"`

	/* State name

	Required: true
	*/
	Name *string `json:"name"`
}

// Validate validates this state list instance
func (m *StateListInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbbreviation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabledAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateListInstance) validateAbbreviation(formats strfmt.Registry) error {

	if err := validate.Required("abbreviation", "body", m.Abbreviation); err != nil {
		return err
	}

	return nil
}

func (m *StateListInstance) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *StateListInstance) validateEnabledAt(formats strfmt.Registry) error {

	if err := validate.Required("enabled_at", "body", m.EnabledAt); err != nil {
		return err
	}

	return nil
}

func (m *StateListInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
