package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*GeofenceInstance A circular region around a GPS point

swagger:model geofenceInstance
*/
type GeofenceInstance struct {

	/* Latitude in degrees (-90 to +90)

	Maximum: 90
	Minimum: -90
	*/
	Latitude *float64 `json:"latitude,omitempty"`

	/* Longitude in degrees (-180 to +180)

	Maximum: 180
	Minimum: -180
	*/
	Longitude *float64 `json:"longitude,omitempty"`

	/* Radius in metres (1 to 50,000)

	Maximum: 50000
	Minimum: 1
	*/
	Radius float64 `json:"radius,omitempty"`
}

// Validate validates this geofence instance
func (m *GeofenceInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatitude(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRadius(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GeofenceInstance) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("latitude", "body", float64(*m.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", float64(*m.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (m *GeofenceInstance) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("longitude", "body", float64(*m.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", float64(*m.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

func (m *GeofenceInstance) validateRadius(formats strfmt.Registry) error {

	if swag.IsZero(m.Radius) { // not required
		return nil
	}

	if err := validate.Minimum("radius", "body", float64(m.Radius), 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("radius", "body", float64(m.Radius), 50000, false); err != nil {
		return err
	}

	return nil
}
