package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CommentInstance Comment

swagger:model commentInstance
*/
type CommentInstance struct {

	/* Comment identifier. Identifier to retrieve this comment.

	Required: true
	*/
	CommentID *int64 `json:"comment_id"`

	/* Created at. Date-time that the comment was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Deal identifier. Identifier to retrieve the deal related to this comment.

	Required: true
	*/
	DealID *int64 `json:"deal_id"`

	/* Date-time that the comment was marked as deleted.
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Content of comment.

	Required: true
	*/
	Text *string `json:"text"`

	/* Date-time the comment was last updated.

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	/* User identifier.

	Required: true
	*/
	UserID *int64 `json:"user_id"`
}

// Validate validates this comment instance
func (m *CommentInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDealID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommentInstance) validateCommentID(formats strfmt.Registry) error {

	if err := validate.Required("comment_id", "body", m.CommentID); err != nil {
		return err
	}

	return nil
}

func (m *CommentInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *CommentInstance) validateDealID(formats strfmt.Registry) error {

	if err := validate.Required("deal_id", "body", m.DealID); err != nil {
		return err
	}

	return nil
}

func (m *CommentInstance) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *CommentInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *CommentInstance) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}
