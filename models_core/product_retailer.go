package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ProductRetailer Information about the product's retailer

swagger:model productRetailer
*/
type ProductRetailer struct {

	/* List of affiliate fields

	Required: true
	*/
	AffiliateFields []*RetailerAffiliateField `json:"affiliate_fields"`

	/* Retailer country short code

	Required: true
	*/
	Country *string `json:"country"`

	/* List of features the retailer has. If 'products' is present the retailer has products on the website. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.

	Required: true
	*/
	Features []string `json:"features"`

	/* Retailer name

	Required: true
	*/
	Name *string `json:"name"`

	/* Retailer code

	Required: true
	*/
	RetailerCode *string `json:"retailer_code"`
}

// Validate validates this product retailer
func (m *ProductRetailer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliateFields(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetailerCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductRetailer) validateAffiliateFields(formats strfmt.Registry) error {

	if err := validate.Required("affiliate_fields", "body", m.AffiliateFields); err != nil {
		return err
	}

	for i := 0; i < len(m.AffiliateFields); i++ {

		if swag.IsZero(m.AffiliateFields[i]) { // not required
			continue
		}

		if m.AffiliateFields[i] != nil {

			if err := m.AffiliateFields[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ProductRetailer) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

var productRetailerFeaturesItemsEnum []interface{}

func (m *ProductRetailer) validateFeaturesItemsEnum(path, location string, value string) error {
	if productRetailerFeaturesItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["products","can_syndicate"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			productRetailerFeaturesItemsEnum = append(productRetailerFeaturesItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, productRetailerFeaturesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProductRetailer) validateFeatures(formats strfmt.Registry) error {

	if err := validate.Required("features", "body", m.Features); err != nil {
		return err
	}

	for i := 0; i < len(m.Features); i++ {

		// value enum
		if err := m.validateFeaturesItemsEnum("features"+"."+strconv.Itoa(i), "body", m.Features[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProductRetailer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProductRetailer) validateRetailerCode(formats strfmt.Registry) error {

	if err := validate.Required("retailer_code", "body", m.RetailerCode); err != nil {
		return err
	}

	return nil
}
