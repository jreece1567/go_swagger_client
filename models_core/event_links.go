package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*EventLinks event links

swagger:model eventLinks
*/
type EventLinks struct {

	/* Canonical link to the event's centre

	Required: true
	*/
	Centre *CentreLink `json:"centre"`

	/* Canonical link to the event image

	Required: true
	*/
	Image *GenericLink `json:"image"`

	/* Canonical links to retailers

	Required: true
	*/
	Retailers []*GenericLink `json:"retailers"`

	/* Canonical link to this event

	Required: true
	*/
	Self *GenericLink `json:"self"`
}

// Validate validates this event links
func (m *EventLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentre(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetailers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventLinks) validateCentre(formats strfmt.Registry) error {

	if err := validate.Required("centre", "body", m.Centre); err != nil {
		return err
	}

	if m.Centre != nil {

		if err := m.Centre.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventLinks) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	if m.Image != nil {

		if err := m.Image.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventLinks) validateRetailers(formats strfmt.Registry) error {

	if err := validate.Required("retailers", "body", m.Retailers); err != nil {
		return err
	}

	for i := 0; i < len(m.Retailers); i++ {

		if swag.IsZero(m.Retailers[i]) { // not required
			continue
		}

		if m.Retailers[i] != nil {

			if err := m.Retailers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EventLinks) validateSelf(formats strfmt.Registry) error {

	if err := validate.Required("self", "body", m.Self); err != nil {
		return err
	}

	if m.Self != nil {

		if err := m.Self.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
