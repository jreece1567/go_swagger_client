package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*CarparkReportDiscountInstance carpark report discount instance

swagger:model carparkReportDiscountInstance
*/
type CarparkReportDiscountInstance struct {

	/* Centre identifier.

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Created at. Date-time that the discount was created.

	Required: true
	*/
	CreatedAt *strfmt.DateTime `json:"created_at"`

	/* Discount amount recieved at POS terminal, in cents.
	 */
	DiscountAmount int64 `json:"discount_amount,omitempty"`

	/* Reportable discount identifier.

	Required: true
	*/
	DiscountID *int64 `json:"discount_id"`

	/* Type of Skidata discount.

	Required: true
	*/
	DiscountType *string `json:"discount_type"`

	/* The original parking fee before validation was applied at POS, in cents.
	 */
	OriginalOwed int64 `json:"original_owed,omitempty"`

	/* Expiry date of Disability parking permit.
	 */
	PermitExpiryDate strfmt.Date `json:"permit_expiry_date,omitempty"`

	/* Disability parking permit identifier.
	 */
	PermitNumber string `json:"permit_number,omitempty"`

	/* Amount charged at POS terminal, in cents.
	 */
	PosCharged int64 `json:"pos_charged,omitempty"`

	/* Justification for a discount.
	 */
	Reason string `json:"reason,omitempty"`

	/* Vehicle registration plate.

	Required: true
	*/
	RegistrationNumber *string `json:"registration_number"`

	/* Retailer associated with a RetailerStaffDiscount.
	 */
	RetailerName string `json:"retailer_name,omitempty"`

	/* Cinema ticket number for CinemaDiscount.
	 */
	TicketNumber string `json:"ticket_number,omitempty"`

	/* Type of discount.
	 */
	Type string `json:"type,omitempty"`

	/* Is the vehicle registered.

	Required: true
	*/
	VehicleIsRegisteredOnline *bool `json:"vehicle_is_registered_online"`
}

// Validate validates this carpark report discount instance
func (m *CarparkReportDiscountInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiscountID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiscountType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistrationNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVehicleIsRegisteredOnline(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CarparkReportDiscountInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *CarparkReportDiscountInstance) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *CarparkReportDiscountInstance) validateDiscountID(formats strfmt.Registry) error {

	if err := validate.Required("discount_id", "body", m.DiscountID); err != nil {
		return err
	}

	return nil
}

func (m *CarparkReportDiscountInstance) validateDiscountType(formats strfmt.Registry) error {

	if err := validate.Required("discount_type", "body", m.DiscountType); err != nil {
		return err
	}

	return nil
}

func (m *CarparkReportDiscountInstance) validateRegistrationNumber(formats strfmt.Registry) error {

	if err := validate.Required("registration_number", "body", m.RegistrationNumber); err != nil {
		return err
	}

	return nil
}

func (m *CarparkReportDiscountInstance) validateVehicleIsRegisteredOnline(formats strfmt.Registry) error {

	if err := validate.Required("vehicle_is_registered_online", "body", m.VehicleIsRegisteredOnline); err != nil {
		return err
	}

	return nil
}
