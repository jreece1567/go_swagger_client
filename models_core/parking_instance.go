package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ParkingInstance Parking record

swagger:model parkingInstance
*/
type ParkingInstance struct {

	/* Hash of links

	Required: true
	*/
	Links *ParkingLinks `json:"_links"`

	/* Additional parking information

	Required: true
	*/
	AdditionalParkingInformation *string `json:"additional_parking_information"`

	/* Centre identifier

	Required: true
	*/
	CentreID *string `json:"centre_id"`

	/* Credit card surcharge amount

	Required: true
	*/
	CreditCardSurchargeAmount *string `json:"credit_card_surcharge_amount"`

	/* Deleted date
	 */
	DeletedAt strfmt.DateTime `json:"deleted_at,omitempty"`

	/* Fee when parking is not hourly

	Required: true
	*/
	FlatRate *string `json:"flat_rate"`

	/* Maximum daily rate on weekdays

	Required: true
	*/
	MaximumDailyRateWeekday *string `json:"maximum_daily_rate_weekday"`

	/* Maximum daily rate on weekends

	Required: true
	*/
	MaximumDailyRateWeekend *string `json:"maximum_daily_rate_weekend"`

	/* Overnight fee on weekdays

	Required: true
	*/
	OvernightFeeWeekday *string `json:"overnight_fee_weekday"`

	/* Overnight fee on weekends

	Required: true
	*/
	OvernightFeeWeekend *string `json:"overnight_fee_weekend"`

	/* Parking identifier

	Required: true
	*/
	ParkingID *int64 `json:"parking_id"`

	/* parking rates

	Required: true
	*/
	ParkingRates []*ParkingRates `json:"parking_rates"`

	/* Fee (true) or complimentary (false) parking

	Required: true
	*/
	RatesApply *bool `json:"rates_apply"`

	/* Rate type

	Required: true
	*/
	TypeOfRate *string `json:"type_of_rate"`

	/* Update date

	Required: true
	*/
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	/* Valet parking instructions

	Required: true
	*/
	ValetParkingInstructions *string `json:"valet_parking_instructions"`
}

// Validate validates this parking instance
func (m *ParkingInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAdditionalParkingInformation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCentreID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditCardSurchargeAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlatRate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaximumDailyRateWeekday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaximumDailyRateWeekend(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvernightFeeWeekday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvernightFeeWeekend(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParkingRates(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRatesApply(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTypeOfRate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValetParkingInstructions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingInstance) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ParkingInstance) validateAdditionalParkingInformation(formats strfmt.Registry) error {

	if err := validate.Required("additional_parking_information", "body", m.AdditionalParkingInformation); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateCentreID(formats strfmt.Registry) error {

	if err := validate.Required("centre_id", "body", m.CentreID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateCreditCardSurchargeAmount(formats strfmt.Registry) error {

	if err := validate.Required("credit_card_surcharge_amount", "body", m.CreditCardSurchargeAmount); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateFlatRate(formats strfmt.Registry) error {

	if err := validate.Required("flat_rate", "body", m.FlatRate); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateMaximumDailyRateWeekday(formats strfmt.Registry) error {

	if err := validate.Required("maximum_daily_rate_weekday", "body", m.MaximumDailyRateWeekday); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateMaximumDailyRateWeekend(formats strfmt.Registry) error {

	if err := validate.Required("maximum_daily_rate_weekend", "body", m.MaximumDailyRateWeekend); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateOvernightFeeWeekday(formats strfmt.Registry) error {

	if err := validate.Required("overnight_fee_weekday", "body", m.OvernightFeeWeekday); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateOvernightFeeWeekend(formats strfmt.Registry) error {

	if err := validate.Required("overnight_fee_weekend", "body", m.OvernightFeeWeekend); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateParkingID(formats strfmt.Registry) error {

	if err := validate.Required("parking_id", "body", m.ParkingID); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateParkingRates(formats strfmt.Registry) error {

	if err := validate.Required("parking_rates", "body", m.ParkingRates); err != nil {
		return err
	}

	for i := 0; i < len(m.ParkingRates); i++ {

		if swag.IsZero(m.ParkingRates[i]) { // not required
			continue
		}

		if m.ParkingRates[i] != nil {

			if err := m.ParkingRates[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ParkingInstance) validateRatesApply(formats strfmt.Registry) error {

	if err := validate.Required("rates_apply", "body", m.RatesApply); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateTypeOfRate(formats strfmt.Registry) error {

	if err := validate.Required("type_of_rate", "body", m.TypeOfRate); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ParkingInstance) validateValetParkingInstructions(formats strfmt.Registry) error {

	if err := validate.Required("valet_parking_instructions", "body", m.ValetParkingInstructions); err != nil {
		return err
	}

	return nil
}
