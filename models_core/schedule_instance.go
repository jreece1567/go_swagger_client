package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ScheduleInstance Schedule instance.

swagger:model scheduleInstance
*/
type ScheduleInstance struct {

	/* days of week
	 */
	DaysOfWeek map[string][]ScheduleEvent `json:"days_of_week,omitempty"`

	/* Date-time the schedule was marked as deleted.

	Required: true
	*/
	DeletedAt *strfmt.DateTime `json:"deleted_at"`

	/* Date-time the schedule ends.
	 */
	EndsAt strfmt.DateTime `json:"ends_at,omitempty"`

	/* events

	Required: true
	*/
	Events []*ScheduleEvent `json:"events"`

	/* Schedule name.

	Required: true
	*/
	Name *string `json:"name"`

	/* Schedule participants.
	 */
	Participant *ParticipantInstance `json:"participant,omitempty"`

	/* Schedule participants.
	 */
	Participants []*ParticipantInstance `json:"participants,omitempty"`

	/* Schedule identifier. Identifier to retrieve this schedule.

	Required: true
	*/
	ScheduleID *int64 `json:"schedule_id"`

	/* Date-time the schedule starts.
	 */
	StartsAt strfmt.DateTime `json:"starts_at,omitempty"`

	/* Schedule time zone.

	Required: true
	*/
	TimeZone *string `json:"time_zone"`

	/* Schedule type.

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this schedule instance
func (m *ScheduleInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaysOfWeek(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParticipant(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParticipants(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScheduleID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleInstance) validateDaysOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	if err := validate.Required("days_of_week", "body", m.DaysOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInstance) validateDeletedAt(formats strfmt.Registry) error {

	if err := validate.Required("deleted_at", "body", m.DeletedAt); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInstance) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {

		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {

			if err := m.Events[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInstance) validateParticipant(formats strfmt.Registry) error {

	if swag.IsZero(m.Participant) { // not required
		return nil
	}

	if m.Participant != nil {

		if err := m.Participant.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ScheduleInstance) validateParticipants(formats strfmt.Registry) error {

	if swag.IsZero(m.Participants) { // not required
		return nil
	}

	for i := 0; i < len(m.Participants); i++ {

		if swag.IsZero(m.Participants[i]) { // not required
			continue
		}

		if m.Participants[i] != nil {

			if err := m.Participants[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleInstance) validateScheduleID(formats strfmt.Registry) error {

	if err := validate.Required("schedule_id", "body", m.ScheduleID); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInstance) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("time_zone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

var scheduleInstanceTypeTypePropEnum []interface{}

// prop value enum
func (m *ScheduleInstance) validateTypeEnum(path, location string, value string) error {
	if scheduleInstanceTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["special_trading","standard_trading"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			scheduleInstanceTypeTypePropEnum = append(scheduleInstanceTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, scheduleInstanceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleInstance) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
