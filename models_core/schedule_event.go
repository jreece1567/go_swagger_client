package models_core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ScheduleEvent Schedule event instance that maps closely to an iCal event.

swagger:model scheduleEvent
*/
type ScheduleEvent struct {

	/* Day number in a week. 0 is Sunday, 1 is Monday... and 6 is Saturday.
	 */
	DayOfWeek int64 `json:"day_of_week,omitempty"`

	/* Event end date-time without offset(maps to ical dtend).

	Required: true
	*/
	EndsAt *string `json:"ends_at"`

	/* Event start date-time without offset(maps to ical dtstart).

	Required: true
	*/
	StartsAt *string `json:"starts_at"`

	/* Event summary(maps to ical summary).

	Required: true
	*/
	Summary *string `json:"summary"`

	/* Schedule event time zone.
	 */
	TimeZone string `json:"time_zone,omitempty"`

	/* Type of the event

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this schedule event
func (m *ScheduleEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleEvent) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.Required("ends_at", "body", m.EndsAt); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleEvent) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.Required("starts_at", "body", m.StartsAt); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleEvent) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

var scheduleEventTypeTypePropEnum []interface{}

// prop value enum
func (m *ScheduleEvent) validateTypeEnum(path, location string, value string) error {
	if scheduleEventTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["open","closed","overnight"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			scheduleEventTypeTypePropEnum = append(scheduleEventTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, scheduleEventTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}
