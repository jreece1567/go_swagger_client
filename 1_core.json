{
  "swagger": "2.0",
  "info": {
    "version": "1",
    "title": "Westfield APIs",
    "description": "Summary of Westfield API endpoints."
  },
  "schemes": [
    "https"
  ],
  "basePath": "/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "api_key": {
      "description": "A Westfield API-key",
      "type": "apiKey",
      "name": "api_key",
      "in": "query"
    }
  },
  "paths": {
    "/centres/{centre_id}/vehicles/{vehicle_id}": {
      "get": {
        "summary": "Individual vehicle.",
        "description": "Request a single vehicle at a centre.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier. Request a vehicle at centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "x-wf-example": "miranda"
          },
          {
            "name": "vehicle_id",
            "in": "path",
            "description": "Vehicle identifier, registration plate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the vehicle information.",
            "schema": {
              "$ref": "#/definitions/vehicleResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "502": {
            "description": "Bad Gateway, error or unexpected response received from upstream server.",
            "schema": {
              "$ref": "#/definitions/http502Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Carpark"
      ],
      "x-services": [
        "carpark"
      ]
    },
    "/centres/{centre_id}/vehicles/{vehicle_id}/discounts": {
      "get": {
        "summary": "List discounts on a vehicle.",
        "description": "Request an array of discounts applied to a vehicle at a centre.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier. Request discounts of a vehicle at centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "x-wf-example": "miranda"
          },
          {
            "name": "vehicle_id",
            "in": "path",
            "description": "Vehicle identifier, registration plate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of discounts applied to a vehicle.",
            "schema": {
              "$ref": "#/definitions/discountListResponse"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "502": {
            "description": "Bad Gateway, error or unexpected response received from upstream server.",
            "schema": {
              "$ref": "#/definitions/http502Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Apply a discount to a vehicle.",
        "description": "Request creation of a discount on a vehicle from JSON data in the body.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier. Create a discount on a vehicle at centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "x-wf-example": "miranda"
          },
          {
            "name": "discount_data",
            "in": "body",
            "description": "Data to create a discount.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/discountCreateBody"
            }
          },
          {
            "name": "vehicle_id",
            "in": "path",
            "description": "Vehicle identifier, registration plate.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the discount.",
            "schema": {
              "$ref": "#/definitions/discount201Response"
            }
          },
          "404": {
            "description": "Vehicle not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Discount not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/discount422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Carpark"
      ],
      "x-services": [
        "carpark"
      ]
    },
    "/centres/{centre_id}/carpark-report": {
      "get": {
        "summary": "List of reportable carpark discounts applied at a centre.",
        "description": "Request an array of reportable carpark discounts applied at a centre.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "path",
            "description": "Centre identifier. Request the list of reportable carpark discounts at centre_id. Lowercase code name for a specific centre.",
            "required": true,
            "type": "string",
            "x-wf-example": "miranda"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Request reportable discounts before a specific date.",
            "required": false,
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-04-02"
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Request reportable discounts since a specific date.",
            "required": false,
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of reportable carpark discounts.",
            "schema": {
              "$ref": "#/definitions/carparkReportResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Carpark"
      ],
      "x-services": [
        "carpark"
      ]
    },
    "/centres": {
      "get": {
        "summary": "List centres.",
        "description": "Request an array of centres filtered by allowed parameters.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the centre with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country code. Request centres with country code. Lowercase two-character code for country.",
            "type": "string",
            "enum": [
              "AU",
              "NZ",
              "UK",
              "US"
            ],
            "x-wf-example": "US"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Enabled centres. Request only enabled (true) or not enabled (false) centres.",
            "default": true,
            "type": "boolean",
            "x-wf-example": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "max_distance",
            "in": "query",
            "description": "Distance limit (in kilometers). Combines with 'near_to' centre to set maximum distance to search for up to three centres.",
            "type": "integer",
            "x-wf-example": 100
          },
          {
            "name": "near_to",
            "in": "query",
            "description": "Centre identifier. Request the three closest centres within 'max_distance' of the given centre, sorted by distance from the given centre.",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "state",
            "in": "query",
            "description": "State or region code in uppercase. Request the centres with state. Currently only the AU and US states are available.",
            "type": "string",
            "x-wf-example": "CA"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests centres that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the centres updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of centres.",
            "schema": {
              "$ref": "#/definitions/centreListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a centre.",
        "description": "Request creation of a centre from JSON data in the request body.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data to create a centre.",
            "schema": {
              "$ref": "#/definitions/centreCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the centre.",
            "schema": {
              "$ref": "#/definitions/centreResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created centre.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Centre not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/centre422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/{centre_id}": {
      "get": {
        "summary": "Individual centre.",
        "description": "Request a single centre.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the centre with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual centre.",
            "schema": {
              "$ref": "#/definitions/centreResponse"
            }
          },
          "404": {
            "description": "Centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a centre.",
        "description": "Request update of a centre from JSON data in the request body.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Update the centre with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data to update a centre.",
            "schema": {
              "$ref": "#/definitions/centreUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the centre."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Centre not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/centre422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/newsletters": {
      "get": {
        "summary": "List newsletters.",
        "description": "List of newsletters associated with each centre.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Request the centre newsletters with centre_id. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']",
            "type": "string",
            "required": false,
            "x-wf-example": [
              "parramatta",
              "airportwest"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of newsletters.",
            "schema": {
              "$ref": "#/definitions/newslettersListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/newsletters/info": {
      "get": {
        "summary": "Information about a list of newsletters",
        "description": "Request the centre_ids and countries of a list of newsletters",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "newsletter_ids",
            "in": "query",
            "description": "Newsletter identifiers. Request information about newsletters with newsletter_ids. Lowercase code name for a specific newsletter. Example: ['airportwest_fashion','parramatta_family','belconnen_food']",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "x-wf-example": [
              "belconnen_food",
              "airportwest_fashion"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the information about the newsletters.",
            "schema": {
              "$ref": "#/definitions/newsletterInfoResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/notices": {
      "get": {
        "summary": "List centre notices.",
        "description": "Request an array of notices filtered by allowed parameters.",
        "tags": [
          "CENTRE NOTICES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Request the centre notices with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "required": false,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Featured notices. Request to include only featured (true) or not featured (false) notices.",
            "required": false,
            "type": "boolean",
            "x-wf-example": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by one or more fields. Change sort order by adding desc or asc after field name.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "expires_at asc",
                "expires_at desc",
                "featured asc",
                "featured desc",
                "published_at asc",
                "published_at desc",
                "salience asc",
                "salience desc"
              ]
            },
            "collectionFormat": "csv",
            "x-wf-example": [
              "expires_at asc"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "type": "string",
            "enum": [
              "pending",
              "active",
              "expired",
              "disabled"
            ]
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests notices that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "type": "string",
            "description": "Type",
            "enum": [
              "standard",
              "emergency"
            ],
            "x-wf-example": "standard"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the centre notices updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of notices.",
            "schema": {
              "$ref": "#/definitions/noticeListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a notice.",
        "description": "Request creation of a notice from JSON data in the request body.",
        "tags": [
          "CENTRE NOTICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "notice_data",
            "in": "body",
            "description": "Data to create a notice.",
            "schema": {
              "$ref": "#/definitions/noticeCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the notice.",
            "schema": {
              "$ref": "#/definitions/noticeResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created notice.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Notice not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/notice422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/notices/{notice_id}": {
      "get": {
        "summary": "Individual notice.",
        "description": "Request a single notice.",
        "tags": [
          "CENTRE NOTICES"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "notice_id",
            "in": "path",
            "description": "Notice identifier. Request the notice with notice_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 485
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual notice.",
            "schema": {
              "$ref": "#/definitions/noticeResponse"
            }
          },
          "404": {
            "description": "Notice not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a notice.",
        "description": "Request update of a notice from JSON data in the request body.",
        "tags": [
          "CENTRE NOTICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "notice_id",
            "in": "path",
            "description": "Notice identifier. Update the notice with notice_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 485
          },
          {
            "name": "notice_data",
            "in": "body",
            "description": "Data to update a deal.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/noticeUpdateBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the notice."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Notice not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Notice not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/notice422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a notice.",
        "description": "Request deletion of a notice.",
        "tags": [
          "CENTRE NOTICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "notice_id",
            "in": "path",
            "description": "Notice identifier. Request to delete the notice with notice_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 485
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the notice."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Notice not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/parkings": {
      "x-product": [
        "Carpark"
      ],
      "get": {
        "summary": "List centre parking rates.",
        "description": "Request an array of centre parking rates filtered by allowed parameters.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request centre parking rates with centre_id. Lowercase code name for a specific centre. Must relate to store_id. Examples: ['sanfrancisco','sydney','london']",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Deleted centre parking rates. Request to include (true) or not include (false) centre parking rates that are deleted.",
            "type": "boolean",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the centre parking rates updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of centre parking rates.",
            "schema": {
              "$ref": "#/definitions/parkingListResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created parking.",
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create centre parking rates.",
        "description": "Request creation of centre parking rates from JSON data in the request body.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "parking_data",
            "in": "body",
            "description": "Data to create centre parking rates.",
            "schema": {
              "$ref": "#/definitions/parkingCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the centre parking rates.",
            "schema": {
              "$ref": "#/definitions/parkingResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created parking.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "centre"
      ]
    },
    "/centres/parkings/{parking_id}": {
      "x-product": [
        "Carpark"
      ],
      "get": {
        "summary": "Individual centre parking rates.",
        "description": "Request single-centre parking rates.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "parking_id",
            "in": "path",
            "description": "Parking identifier. Request the centre parking rates with parking_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual centre parking rates.",
            "schema": {
              "$ref": "#/definitions/parkingResponse"
            }
          },
          "404": {
            "description": "Centre parking not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update centre parking rates.",
        "description": "Request update of centre parking rates from JSON data in the request body.",
        "tags": [
          "CENTRE PARKING RATES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "parking_data",
            "in": "body",
            "description": "Data to update a centre parking rates.",
            "schema": {
              "$ref": "#/definitions/parkingUpdateBody"
            },
            "required": true
          },
          {
            "name": "parking_id",
            "in": "path",
            "description": "Parking identifier. Request the centre parking rates with parking_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the centre parking rates."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Centre parking not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "centre"
      ]
    },
    "/countries": {
      "get": {
        "summary": "List countries.",
        "description": "Request an array of countries.",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of countries.",
            "schema": {
              "$ref": "#/definitions/countryListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/states": {
      "get": {
        "summary": "Lists states filtered by allowed parameters.",
        "description": "Returns a list of states",
        "tags": [
          "CENTRE INFORMATION"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Country code. Request states with country code. Lowercase two-character code for country.",
            "type": "string",
            "enum": [
              "au",
              "us",
              "uk",
              "nz"
            ],
            "x-wf-example": "us"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of states.",
            "schema": {
              "$ref": "#/definitions/stateListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/zones": {
      "get": {
        "summary": "List centre zones.",
        "description": "Request an array of zones filtered by allowed parameters.",
        "tags": [
          "CENTRE ZONES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Request the centre zones with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "required": false,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status. Request the centre zones with status.",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "required": false,
            "x-wf-example": [
              "active",
              "inactive"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of zones.",
            "schema": {
              "$ref": "#/definitions/zoneListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create centre zone.",
        "description": "Request creation of a zone from JSON data in the request body.",
        "tags": [
          "CENTRE ZONES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "zone_data",
            "in": "body",
            "description": "Data to create centre zones.",
            "schema": {
              "$ref": "#/definitions/zoneCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the centre zone.",
            "schema": {
              "$ref": "#/definitions/zoneResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created zone.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Centre parking not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/zone422Response"
            }
          }
        }
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/zones/{zone_id}": {
      "get": {
        "summary": "Individual centre zone.",
        "description": "Request single-centre zone.",
        "tags": [
          "CENTRE ZONES"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "zone_id",
            "in": "path",
            "description": "Zone identifier. Request the centre zone with zone_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual centre zone.",
            "schema": {
              "$ref": "#/definitions/zoneResponse"
            }
          },
          "404": {
            "description": "Zone not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update centre zone.",
        "description": "Request update of a centre zone from JSON data in the request body.",
        "tags": [
          "CENTRE ZONES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "zone_data",
            "in": "body",
            "description": "Data to update a centre zone.",
            "schema": {
              "$ref": "#/definitions/zoneUpdateBody"
            },
            "required": true
          },
          {
            "name": "zone_id",
            "in": "path",
            "description": "Zone identifier. Request the centrezone with zone_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the centre zone."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Centre zone not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Zone details could not be updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/zone422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a centre zone.",
        "description": "Request deletion of a centre zone.",
        "tags": [
          "CENTRE ZONES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "zone_id",
            "in": "path",
            "description": "Zone identifier. Request to delete the centre zone with zone_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the centre zone."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Zone not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre"
      ]
    },
    "/centres/{centre_id}/services": {
      "get": {
        "summary": "List services.",
        "description": "Request an array of services, outside of those provided by the retailers, filtered by allowed parameters.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request services with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "deleted",
            "description": "Deleted services. Request to include (true) or not include (false) services that are deleted.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "service_class",
            "in": "query",
            "description": "Filter services by service class",
            "type": "string",
            "enum": [
              "all",
              "physical",
              "digital"
            ],
            "default": "physical",
            "x-wf-example": "digital"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the services updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "in": "query",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of services.",
            "schema": {
              "$ref": "#/definitions/servicesListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre_directory"
      ]
    },
    "/services": {
      "get": {
        "summary": "List services (alternative endpoint).",
        "description": "Request an array of services, outside of those provided by the retailers, filtered by allowed parameters.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request services with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "deleted",
            "description": "Deleted services. Request to include (true) or not include (false) services that are deleted.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "service_class",
            "in": "query",
            "description": "Filter services by service class",
            "type": "string",
            "enum": [
              "all",
              "physical",
              "digital"
            ],
            "default": "physical",
            "x-wf-example": "digital"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the services updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "in": "query",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of services.",
            "schema": {
              "$ref": "#/definitions/servicesListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a service.",
        "description": "Request creation of a service from JSON data in the request body.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_data",
            "in": "body",
            "description": "Data to create a service.",
            "schema": {
              "$ref": "#/definitions/serviceCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service.",
            "schema": {
              "$ref": "#/definitions/serviceResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created service.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Service not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/service422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre_directory"
      ]
    },
    "/services/{service_id}": {
      "get": {
        "summary": "Individual service.",
        "description": "Request a single service.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "description": "Service identifier. Request the service with service_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 485
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual service.",
            "schema": {
              "$ref": "#/definitions/serviceResponse"
            }
          },
          "404": {
            "description": "Service not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a service.",
        "description": "Request update of a service from JSON data in the request body.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_data",
            "in": "body",
            "description": "Data to update a service.",
            "schema": {
              "$ref": "#/definitions/serviceUpdateBody"
            },
            "required": true
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "Service identifier. Request the service with service_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 485
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the service."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Service not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Service not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/service422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a service.",
        "description": "Request deletion of a service.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_id",
            "in": "path",
            "description": "Service identifier. Request the service with service_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 485
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the service."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Service not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre_directory"
      ]
    },
    "/services/types": {
      "get": {
        "summary": "List service-types.",
        "description": "Request an array of service-types filtered by allowed parameters.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "deleted",
            "description": "Deleted service-types. Request to include (true) or not include (false) service types that are deleted.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "service_class",
            "in": "query",
            "description": "Filter service types by service class",
            "type": "string",
            "enum": [
              "physical",
              "digital"
            ],
            "x-wf-example": "digital"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the service-types updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "in": "query",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of service-types.",
            "schema": {
              "$ref": "#/definitions/serviceTypesListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a service type.",
        "description": "Request creation of a service-type from JSON data in the request body.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_type_data",
            "in": "body",
            "description": "Data to create a service-type.",
            "schema": {
              "$ref": "#/definitions/serviceTypeCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the service-type.",
            "schema": {
              "$ref": "#/definitions/serviceTypeResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created service-type.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "URI of created service-type.",
            "schema": {
              "$ref": "#/definitions/serviceType422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre_directory"
      ]
    },
    "/services/types/{service_type_id}": {
      "get": {
        "summary": "Individual service-type.",
        "description": "Request a single service-type.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "service_type_id",
            "in": "path",
            "description": "Service-type identifier. Request the service-type with service_type_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 15
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual service-type.",
            "schema": {
              "$ref": "#/definitions/serviceTypeResponse"
            }
          },
          "404": {
            "description": "Service-type not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a service-type.",
        "description": "Request update of a service-type from JSON data in the request body.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_type_data",
            "in": "body",
            "description": "Data to update a service-type.",
            "schema": {
              "$ref": "#/definitions/serviceTypeUpdateBody"
            },
            "required": true
          },
          {
            "name": "service_type_id",
            "in": "path",
            "description": "Service-type identifier. Request to update the service-type with service_type_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 15
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the service-type."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Service-type not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Service-type not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/serviceType422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a service-type.",
        "description": "Request deletion of a service-type.",
        "tags": [
          "CENTRE SERVICES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "service_type_id",
            "in": "path",
            "description": "Service-type identifier. Request to delete the service-type with service_type_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 15
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the service-type."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Service-type not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "centre_directory"
      ]
    },
    "/curations": {
      "get": {
        "summary": "List curations.",
        "description": "Request an array of curations filtered by allowed parameters.",
        "tags": [
          "CURATIONS"
        ],
        "parameters": [
          {
            "name": "available_on_or_after",
            "in": "query",
            "description": "On or after this date. Request the curations available on or after the date.",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Request the curations with centre_id. Lowercase code name for a specific centre. Must relate to store_id.",
            "type": "string",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country code. Request the curations with country code. Lowercase two-character code for country.",
            "type": "string",
            "x-wf-example": "us",
            "enum": [
              "au",
              "nz",
              "uk",
              "us"
            ]
          },
          {
            "name": "current",
            "in": "query",
            "description": "Current curations. Request to include only current (true) or all (false) curations.",
            "type": "boolean",
            "default": true,
            "x-wf-example": false
          },
          {
            "name": "featured",
            "in": "query",
            "description": "Filter by featured",
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the maximum number of results returned.",
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "product_category_id",
            "in": "query",
            "description": "Filter by product category ids",
            "type": "integer"
          },
          {
            "name": "product_category_path",
            "in": "query",
            "description": "Filter by product category path",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort results by one or more fields. Change sort order by adding desc or asc after field name.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ends_at asc",
                "ends_at desc",
                "starts_at asc",
                "starts_at desc",
                "updated_at asc",
                "updated_at desc"
              ]
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": [
              "updated_at desc",
              "ends_at asc"
            ]
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests curations that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of curations.",
            "schema": {
              "$ref": "#/definitions/curationsListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a curation.",
        "description": "Request creation of a curation from JSON data in the request body.",
        "tags": [
          "CURATIONS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "curation_data",
            "in": "body",
            "description": "Data to create a curation.",
            "schema": {
              "$ref": "#/definitions/curationCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the curation.",
            "schema": {
              "$ref": "#/definitions/curationCreateResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created curation.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Curation not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/curation422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "collection"
      ]
    },
    "/curations/{curation_id}": {
      "get": {
        "summary": "Individual curation.",
        "description": "Request a single curation.",
        "tags": [
          "CURATIONS"
        ],
        "parameters": [
          {
            "name": "curation_id",
            "in": "path",
            "description": "Curation identitier. Request the curation with curation_id.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual curation.",
            "schema": {
              "$ref": "#/definitions/curationResponse"
            }
          },
          "404": {
            "description": "Curation not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a curation.",
        "description": "Request update of a curation from JSON data in the request body.",
        "tags": [
          "CURATIONS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "curation_data",
            "in": "body",
            "description": "Data to update a curation.",
            "schema": {
              "$ref": "#/definitions/curationUpdateBody"
            },
            "required": true
          },
          {
            "name": "curation_id",
            "in": "path",
            "description": "Curation identitier. Request the curation with curation_id.",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the curation."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Curation not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Curation not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/curation422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a curation.",
        "description": "Request deletion of a curation.",
        "tags": [
          "CURATIONS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "curation_id",
            "in": "path",
            "description": "Curation identitier. Request the curation with curation_id.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the curation."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Curation not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "collection"
      ]
    },
    "/products/{product_id}": {
      "get": {
        "summary": "Individual product.",
        "description": "Request a single product.",
        "tags": [
          "PRODUCTS"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product identifier. Request the product with product_id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "brand,categories,created_at,product_id,retailer_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual product.",
            "schema": {
              "$ref": "#/definitions/productResponse"
            }
          },
          "404": {
            "description": "Product not found.",
            "schema": {
              "$ref": "#/definitions/producthttp404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Products"
      ],
      "x-services": [
        "consumption"
      ]
    },
    "/products/multiple/{product_ids}": {
      "get": {
        "summary": "Multiple products.",
        "description": "Request an array of multiple products.",
        "tags": [
          "PRODUCTS"
        ],
        "parameters": [
          {
            "name": "product_ids",
            "description": "Comma delimited list of product IDs to fetch",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "maxItems": 30,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "brand,categories,created_at,product_id,retailer_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested products",
            "schema": {
              "$ref": "#/definitions/productListResponse"
            }
          },
          "404": {
            "description": "Products not found",
            "schema": {
              "$ref": "#/definitions/producthttp404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Products"
      ],
      "x-services": [
        "consumption"
      ]
    },
    "/products/{product_id}/syndicated": {
      "x-product": [
        "Products_Syndicated"
      ],
      "get": {
        "summary": "Individual syndicated product.",
        "description": "Request a single syndicated product.",
        "tags": [
          "PRODUCTS"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product identifier. Request the syndicated product with product_id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "brand,categories,created_at,product_id,retailer_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual syndicated product.",
            "schema": {
              "$ref": "#/definitions/syndicatedProductResponse"
            }
          },
          "404": {
            "description": "Syndicated product not found.",
            "schema": {
              "$ref": "#/definitions/syndicatedProducthttp404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "consumption"
      ]
    },
    "/products/multiple/{product_ids}/syndicated": {
      "x-product": [
        "Products_Syndicated"
      ],
      "get": {
        "summary": "Multiple syndicated products.",
        "description": "Request an array of multiple syndicated products.",
        "tags": [
          "PRODUCTS"
        ],
        "parameters": [
          {
            "name": "product_ids",
            "description": "Comma delimited list of syndicated product IDs to fetch",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "maxItems": 30,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "brand,categories,created_at,product_id,retailer_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested syndicated products",
            "schema": {
              "$ref": "#/definitions/syndicatedProductListResponse"
            }
          },
          "404": {
            "description": "Syndicated products not found",
            "schema": {
              "$ref": "#/definitions/syndicatedProducthttp404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "consumption"
      ]
    },
    "/deals": {
      "get": {
        "summary": "List deals.",
        "description": "Request an array of deals filtered by allowed parameters.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Request all deals or published through available deals.",
            "type": "boolean",
            "default": false
          },
          {
            "name": "campaign_code",
            "description": "Campaign code. Request deals with campaign_code.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "campaign_id",
            "description": "Campaign identifier. Request deals with campaign_id.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request deals with centre_id. Lowercase code name for a specific centre. Must relate to store_id. Examples: ['sanfrancisco','sydney','london']",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "description": "Country code. Request deals with country code. Lowercase two-character code for country. Current valid values are: au, nz, uk or us.",
            "type": "string",
            "in": "query",
            "x-wf-example": "us",
            "enum": [
              "au",
              "nz",
              "uk",
              "us"
            ]
          },
          {
            "name": "deal_ids",
            "description": "List of deal ids to be used for additional filtering of results.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Deleted deals. Request to include (true) or not include (false) deals that are deleted.",
            "type": "boolean",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "featured",
            "description": "Featured deals. Request to include only featured (true) or not featured (false) deals. Default to return all deals.",
            "type": "boolean",
            "in": "query",
            "x-wf-example": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "retailer_id",
            "description": "Retailer identifier. Request the deals with retailer_id.",
            "type": "integer",
            "in": "query",
            "x-wf-example": 926
          },
          {
            "name": "sort",
            "description": "Sort results by one or more fields. Change sort order by adding desc or asc after field name.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ends_at asc",
                "ends_at desc",
                "featured asc",
                "featured desc",
                "published_at asc",
                "published_at desc",
                "starts_at asc",
                "starts_at desc"
              ]
            },
            "collectionFormat": "csv",
            "in": "query",
            "default": "featured desc",
            "x-wf-example": "featured desc, ends_at asc"
          },
          {
            "name": "state",
            "in": "query",
            "description": "State. Request deals with state.",
            "type": "string",
            "enum": [
              "all",
              "archived",
              "draft",
              "expired",
              "live",
              "pending_approval",
              "published",
              "scheduled",
              "withdrawn"
            ],
            "x-wf-example": "live"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests deals that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "store_id",
            "description": "Store identifier. Request the deals with store_id.",
            "type": "integer",
            "in": "query",
            "x-wf-example": 402495
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the deals updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of deals.",
            "schema": {
              "$ref": "#/definitions/dealsListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a deal.",
        "description": "Request creation of a deal from JSON data in the request body.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "deal_data",
            "in": "body",
            "description": "Data to create a deal.",
            "schema": {
              "$ref": "#/definitions/dealCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the deal.",
            "schema": {
              "$ref": "#/definitions/dealResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created deal.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Deal not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/deal422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "deal"
      ]
    },
    "/deals/{deal_id}": {
      "get": {
        "summary": "Individual deal.",
        "description": "Request a single deal.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "deal_id",
            "in": "path",
            "description": "Deal identifier. Request the deal with deal_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual deal.",
            "schema": {
              "$ref": "#/definitions/dealResponse"
            }
          },
          "404": {
            "description": "Deal not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a deal.",
        "description": "Request update of a deal from JSON data in the request body.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "deal_data",
            "in": "body",
            "description": "Data to update a deal.",
            "schema": {
              "$ref": "#/definitions/dealUpdateBody"
            },
            "required": true
          },
          {
            "name": "deal_id",
            "in": "path",
            "description": "Deal identifier. Request to update the deal with deal_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the deal."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Deal not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Deal not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/deal422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a deal.",
        "description": "Request deletion of a deal.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "deal_id",
            "in": "path",
            "description": "Deal identifier. Request to delete the deal with deal_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the deal."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Deal not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "deal"
      ]
    },
    "/deals/{deal_id}/comments": {
      "get": {
        "summary": "List deal comments.",
        "description": "Request an array of deal comments.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "deal_id",
            "in": "path",
            "description": "Deal identifier. Request the deal with deal_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of deal comments.",
            "schema": {
              "$ref": "#/definitions/commentListResponse"
            }
          },
          "404": {
            "description": "Deal not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "deal"
      ]
    },
    "/deals/comments/{comment_id}": {
      "get": {
        "summary": "Individual deal comment.",
        "description": "Request a single deal comment.",
        "tags": [
          "DEALS"
        ],
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "Comment identifier. Request the deal with comment_id.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual deal comment.",
            "schema": {
              "$ref": "#/definitions/commentResponse"
            }
          },
          "404": {
            "description": "Deal comment not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "deal"
      ]
    },
    "/events": {
      "get": {
        "summary": "List events.",
        "description": "Request an array of events filtered by allowed parameters.",
        "tags": [
          "CENTRE EVENTS"
        ],
        "parameters": [
          {
            "name": "available_on_or_after",
            "description": "On or after this date. Request the events available on or after the date. If centre_id is supplied then the date-time is local, otherwise it is UTC.",
            "type": "string",
            "format": "date-time",
            "in": "query"
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the events with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "event_ids",
            "description": "List of event ids to be used for additional filtering of results.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "deleted",
            "description": "Deleted events. Request to include (true) or not include (false) events that are deleted.",
            "type": "boolean",
            "default": false,
            "in": "query",
            "x-wf-example": false
          },
          {
            "name": "featured",
            "description": "Featured events. Request to include only featured (true) or not featured (false) events.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": true
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "x-wf-example": 25
          },
          {
            "name": "published",
            "description": "Published events. Request to include only published (true) or all (false) events.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "retailer_code",
            "description": "Retailer code. Request the events with retailer_code.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Sort results by one or more fields. Change sort order by adding desc or asc after field name.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "disabled_at asc",
                "disabled_at desc",
                "featured asc",
                "featured desc",
                "finishes_at asc",
                "finishes_at desc",
                "published_at asc",
                "published_at desc",
                "starts_at asc",
                "starts_at desc"
              ]
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status. Request events with status.",
            "type": "string",
            "enum": [
              "pending",
              "preview",
              "active",
              "expired",
              "disabled"
            ],
            "x-wf-example": "active"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests events that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the events updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of events.",
            "schema": {
              "$ref": "#/definitions/eventsListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create an event.",
        "description": "Request creation of an event from JSON data in the request body.",
        "tags": [
          "CENTRE EVENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "event_data",
            "description": "Data to create an event.",
            "schema": {
              "$ref": "#/definitions/eventCreateBody"
            },
            "required": true,
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the event.",
            "schema": {
              "$ref": "#/definitions/eventResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created event.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Event not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/event422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "event"
      ]
    },
    "/events/{event_id}": {
      "get": {
        "summary": "Individual event.",
        "description": "Request a single event.",
        "tags": [
          "CENTRE EVENTS"
        ],
        "parameters": [
          {
            "name": "event_id",
            "description": "Event identifier. Request the event with event_id.",
            "type": "integer",
            "required": true,
            "in": "path",
            "x-wf-example": 485
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual event.",
            "schema": {
              "$ref": "#/definitions/eventResponse"
            }
          },
          "404": {
            "description": "Event not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update an event.",
        "description": "Request update of an event from JSON data in the request body.",
        "tags": [
          "CENTRE EVENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "event_data",
            "description": "Data to update an event.",
            "schema": {
              "$ref": "#/definitions/eventUpdateBody"
            },
            "required": true,
            "in": "body"
          },
          {
            "name": "event_id",
            "description": "Event identifier. Request the event with event_id.",
            "type": "integer",
            "required": true,
            "in": "path",
            "x-wf-example": 485
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the event."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Event not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Event not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/event422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an event.",
        "description": "Request deletion of an event.",
        "tags": [
          "CENTRE EVENTS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "event_id",
            "description": "Event identifier. Request the event with event_id.",
            "type": "integer",
            "required": true,
            "in": "path",
            "x-wf-example": 485
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the event."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Event not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "event"
      ]
    },
    "/centres/{centre_id}/movies": {
      "get": {
        "summary": "List movies and session times.",
        "description": "Request an array of movies filtered by allowed parameters.",
        "tags": [
          "MOVIE INFORMATION"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request movies with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "date",
            "description": "Play date. Request the movies playing on play date.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-30"
          },
          {
            "name": "deleted",
            "description": "Deleted movies. Request to include (true) or not include (false) movies that are deleted.",
            "type": "boolean",
            "in": "query",
            "default": false,
            "x-wf-example": false
          },
          {
            "name": "end_date",
            "description": "End date. Request the movies playing on or before end date of a range.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "x-wf-example": 25
          },
          {
            "name": "start_date",
            "description": "Start date. Request the movies playing on or after start date of a range.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the movies updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of movies and session times.",
            "schema": {
              "$ref": "#/definitions/moviesListResponse"
            }
          },
          "404": {
            "description": "Centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Movies"
      ],
      "x-services": [
        "movie"
      ]
    },
    "/centres/{centre_id}/movies/{movie_id}": {
      "get": {
        "summary": "Individual movie and session times.",
        "description": "Request a single movie.",
        "tags": [
          "MOVIE INFORMATION"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the movie with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "end_date",
            "description": "End date. Request the sessions of this movie playing on or before end date of a range.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "movie_id",
            "in": "path",
            "description": "Movie identifier. Request the movie with movie_id.",
            "type": "integer",
            "format": "int64",
            "required": true,
            "x-wf-example": 4592
          },
          {
            "name": "start_date",
            "description": "Start date. Request the sessions of this movie playing on or after start date of a range.",
            "type": "string",
            "format": "date",
            "in": "query",
            "x-wf-example": "2015-07-22"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual movie.",
            "schema": {
              "$ref": "#/definitions/movieResponse"
            }
          },
          "404": {
            "description": "Movie or centre was not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "Movies"
      ],
      "x-services": [
        "movie"
      ]
    },
    "/search": {
      "get": {
        "summary": "Search all content types.",
        "description": "Search results from all APIs.",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results. Order of results (product results only)",
            "type": "string",
            "enum": [
              "price_low_high_sort",
              "price_high_low_sort",
              "store_name_sort",
              "product_name_sort",
              "largest_discount_sort",
              "most_recent_sort"
            ]
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "type": "string"
          },
          {
            "name": "primary_category",
            "in": "query",
            "description": "primary_category. Facet by primary_category.",
            "type": "string"
          },
          {
            "name": "retailer_code",
            "in": "query",
            "description": "retailer_code. Facet by retailer_code.",
            "type": "string"
          },
          {
            "name": "is_discounted",
            "in": "query",
            "description": "is_discounted. Facet by is_discounted.",
            "type": "string"
          },
          {
            "name": "brand",
            "in": "query",
            "description": "brand. Facet by brand.",
            "type": "string"
          },
          {
            "name": "variants.attributes.color",
            "in": "query",
            "description": "variants.attributes.color. Facet by variants.attributes.color.",
            "type": "string"
          },
          {
            "name": "category_hierarchy",
            "in": "query",
            "description": "category_hierarchy. Facet by category_hierarchy.",
            "type": "string"
          },
          {
            "name": "price",
            "in": "query",
            "description": "price. Facet by price.",
            "type": "string"
          },
          {
            "name": "sale_price",
            "in": "query",
            "description": "sale_price. Facet by sale_price.",
            "type": "string"
          },
          {
            "name": "is_featured",
            "in": "query",
            "description": "is_featured. Facet by is_featured.",
            "type": "string"
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "category_ids. Facet by category_ids.",
            "type": "string"
          },
          {
            "name": "category_paths",
            "in": "query",
            "description": "category_paths. Facet by category_paths.",
            "type": "string"
          },
          {
            "name": "category_path_hierarchy",
            "in": "query",
            "description": "category_path_hierarchy. Facet by category_path_hierarchy.",
            "type": "string"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "updated_since. Facet by updated_since.",
            "type": "string"
          },
          {
            "name": "service_category_ids",
            "in": "query",
            "description": "service_category_ids. Facet by service_category_ids.",
            "type": "string"
          },
          {
            "name": "dining_price_guide",
            "in": "query",
            "description": "dining_price_guide. Facet by dining_price_guide.",
            "type": "string"
          },
          {
            "name": "dining_cuisine",
            "in": "query",
            "description": "dining_cuisine. Facet by dining_cuisine.",
            "type": "string"
          },
          {
            "name": "has_dining",
            "in": "query",
            "description": "has_dining. Facet by has_dining.",
            "type": "string"
          },
          {
            "name": "location_levels",
            "in": "query",
            "description": "location_levels. Facet by location_levels.",
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Types of results. Request search limited to specified types. Default is all types. Example: movies",
            "type": "array",
            "collectionFormat": "csv",
            "items": {
              "type": "string",
              "enum": [
                "services",
                "deals",
                "events",
                "movies",
                "notices",
                "products",
                "productcurations",
                "stores"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search response",
            "schema": {
              "$ref": "#/definitions/IndividualSearchResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/services": {
      "get": {
        "summary": "Search 'services'",
        "description": "Search content of the 'services' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchServiceResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/deals": {
      "get": {
        "summary": "Search 'deals'",
        "description": "Search content of the 'deals' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchDealResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/events": {
      "get": {
        "summary": "Search 'events'",
        "description": "Search content of the 'events' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchEventResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/movies": {
      "get": {
        "summary": "Search 'movies'",
        "description": "Search content of the 'movies' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchMovieResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/notices": {
      "get": {
        "summary": "Search 'notices'",
        "description": "Search content of the 'notices' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchNoticeResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/products": {
      "get": {
        "summary": "Search 'products'",
        "description": "Search content of the 'products' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results.",
            "type": "string",
            "enum": [
              "price_low_high_sort",
              "price_high_low_sort",
              "store_name_sort",
              "product_name_sort",
              "largest_discount_sort",
              "most_recent_sort"
            ]
          },
          {
            "name": "primary_category",
            "in": "query",
            "description": "primary_category. Facet by primary_category.",
            "required": false,
            "type": "string"
          },
          {
            "name": "retailer_code",
            "in": "query",
            "description": "retailer_code. Facet by retailer_code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_discounted",
            "in": "query",
            "description": "is_discounted. Facet by is_discounted.",
            "required": false,
            "type": "string"
          },
          {
            "name": "brand",
            "in": "query",
            "description": "brand. Facet by brand.",
            "required": false,
            "type": "string"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "variants.attributes.color",
            "in": "query",
            "description": "variants.attributes.color. Facet by variants.attributes.color.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_hierarchy",
            "in": "query",
            "description": "category_hierarchy. Facet by category_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": true,
            "type": "string"
          },
          {
            "name": "price",
            "in": "query",
            "description": "price. Facet by price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sale_price",
            "in": "query",
            "description": "sale_price. Facet by sale_price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_featured",
            "in": "query",
            "description": "is_featured. Facet by is_featured.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "category_ids. Facet by category_ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_paths",
            "in": "query",
            "description": "category_paths. Facet by category_paths.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_path_hierarchy",
            "in": "query",
            "description": "category_path_hierarchy. Facet by category_path_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "updated_since. Facet by updated_since.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchProductResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/productcurations": {
      "get": {
        "summary": "Search 'productcurations'",
        "description": "Search content of the 'productcurations' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchCollectionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/stores": {
      "get": {
        "summary": "Search 'stores'",
        "description": "Search content of the 'stores' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "country. Facet by country.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "category_ids. Facet by category_ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "service_category_ids",
            "in": "query",
            "description": "service_category_ids. Facet by service_category_ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "dining_price_guide",
            "in": "query",
            "description": "dining_price_guide. Facet by dining_price_guide.",
            "required": false,
            "type": "string"
          },
          {
            "name": "dining_cuisine",
            "in": "query",
            "description": "dining_cuisine. Facet by dining_cuisine.",
            "required": false,
            "type": "string"
          },
          {
            "name": "has_dining",
            "in": "query",
            "description": "has_dining. Facet by has_dining.",
            "required": false,
            "type": "string"
          },
          {
            "name": "location_levels",
            "in": "query",
            "description": "location_levels. Facet by location_levels.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchStoreResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/products/{country}": {
      "get": {
        "summary": "Search 'products' for a specific country",
        "description": "Search content of the 'products' content type for a specific country",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results.",
            "type": "string",
            "enum": [
              "price_low_high_sort",
              "price_high_low_sort",
              "store_name_sort",
              "product_name_sort",
              "largest_discount_sort",
              "most_recent_sort"
            ]
          },
          {
            "name": "primary_category",
            "in": "query",
            "description": "primary_category. Facet by primary_category.",
            "required": false,
            "type": "string"
          },
          {
            "name": "retailer_code",
            "in": "query",
            "description": "retailer_code. Facet by retailer_code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_discounted",
            "in": "query",
            "description": "is_discounted. Facet by is_discounted.",
            "required": false,
            "type": "string"
          },
          {
            "name": "brand",
            "in": "query",
            "description": "brand. Facet by brand.",
            "required": false,
            "type": "string"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "variants.attributes.color",
            "in": "query",
            "description": "variants.attributes.color. Facet by variants.attributes.color.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_hierarchy",
            "in": "query",
            "description": "category_hierarchy. Facet by category_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "description": "country. Facet by country.",
            "required": true,
            "type": "string"
          },
          {
            "name": "price",
            "in": "query",
            "description": "price. Facet by price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sale_price",
            "in": "query",
            "description": "sale_price. Facet by sale_price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_featured",
            "in": "query",
            "description": "is_featured. Facet by is_featured.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "category_ids. Facet by category_ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_paths",
            "in": "query",
            "description": "category_paths. Facet by category_paths.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_path_hierarchy",
            "in": "query",
            "description": "category_path_hierarchy. Facet by category_path_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "updated_since. Facet by updated_since.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchProductResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/productcurations/{country}": {
      "get": {
        "summary": "Search 'productcurations' for a specific country",
        "description": "Search content of the 'productcurations' content type for a specific country",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "description": "country. Facet by country.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchCollectionResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "search"
      ]
    },
    "/search/products/{country}/syndicated": {
      "x-product": [
        "Products_Syndicated"
      ],
      "get": {
        "summary": "Search 'products' that syndicate",
        "description": "Search syndicated content of the 'products' content type",
        "tags": [
          "SEARCH"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "Include debug information (such as ranking and analytics data) in the response",
            "type": "boolean",
            "default": false
          },
          {
            "name": "excludeFromSearch",
            "in": "query",
            "description": "List of attributes you do not want to use for search",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields in 'hits' response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit. Maximum number of results to return per result type.",
            "type": "integer",
            "default": 5,
            "maximum": 100
          },
          {
            "name": "maxValuesPerFacet",
            "in": "query",
            "description": "Maximum Values Per Facet. Maximum number of values to return per facet.",
            "type": "integer",
            "default": 10,
            "maximum": 5000
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term. Contents of search term.",
            "type": "string",
            "x-wf-example": "black shoes"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results.",
            "type": "string",
            "enum": [
              "price_low_high_sort",
              "price_high_low_sort",
              "store_name_sort",
              "product_name_sort",
              "largest_discount_sort",
              "most_recent_sort"
            ]
          },
          {
            "name": "primary_category",
            "in": "query",
            "description": "primary_category. Facet by primary_category.",
            "required": false,
            "type": "string"
          },
          {
            "name": "retailer_code",
            "in": "query",
            "description": "retailer_code. Facet by retailer_code.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_discounted",
            "in": "query",
            "description": "is_discounted. Facet by is_discounted.",
            "required": false,
            "type": "string"
          },
          {
            "name": "brand",
            "in": "query",
            "description": "brand. Facet by brand.",
            "required": false,
            "type": "string"
          },
          {
            "name": "centre_id",
            "in": "query",
            "description": "centre_id. Facet by centre_id.",
            "required": false,
            "type": "string"
          },
          {
            "name": "variants.attributes.color",
            "in": "query",
            "description": "variants.attributes.color. Facet by variants.attributes.color.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_hierarchy",
            "in": "query",
            "description": "category_hierarchy. Facet by category_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "path",
            "description": "country. Facet by country.",
            "required": true,
            "type": "string"
          },
          {
            "name": "price",
            "in": "query",
            "description": "price. Facet by price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sale_price",
            "in": "query",
            "description": "sale_price. Facet by sale_price.",
            "required": false,
            "type": "string"
          },
          {
            "name": "is_featured",
            "in": "query",
            "description": "is_featured. Facet by is_featured.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "category_ids. Facet by category_ids.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_paths",
            "in": "query",
            "description": "category_paths. Facet by category_paths.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_path_hierarchy",
            "in": "query",
            "description": "category_path_hierarchy. Facet by category_path_hierarchy.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "updated_since. Facet by updated_since.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the search results.",
            "schema": {
              "$ref": "#/definitions/SearchProductResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-services": [
        "search"
      ]
    },
    "/retailers": {
      "get": {
        "summary": "List retailers.",
        "description": "Request an array of retailers filtered by allowed parameters.",
        "tags": [
          "RETAILERS"
        ],
        "parameters": [
          {
            "name": "campaign_id",
            "description": "Campaign identifier. Request retailers with campaign_id.",
            "type": "integer",
            "in": "query"
          },
          {
            "name": "category_id",
            "description": "Category identifier. Request the retailers with category_id.",
            "type": "integer",
            "in": "query",
            "x-wf-example": 54
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the retailers with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "description": "Country code. Request the retailers with country code. Lowercase two-character code for country. Current valid values are: au, nz, uk or us.",
            "type": "string",
            "in": "query",
            "default": "us",
            "x-wf-example": "us",
            "enum": [
              "au",
              "nz",
              "uk",
              "us"
            ]
          },
          {
            "name": "deleted",
            "description": "Deleted retailers. Request to include (true) or not include (false) retailers that are deleted.",
            "type": "boolean",
            "default": false,
            "in": "query",
            "x-wf-example": false
          },
          {
            "name": "enabled",
            "description": "Select enabled retailers. Request to include only enabled (true) or not enabled (false) retailers.",
            "type": "boolean",
            "in": "query",
            "x-wf-example": true
          },
          {
            "name": "features",
            "description": "Retailer features. Request the retailers with features.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "products",
                "can_syndicate"
              ]
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": [
              "products"
            ]
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "name",
            "description": "Retailer name. Request the retailers with a partial name match with wildcards.",
            "type": "string",
            "in": "query",
            "x-wf-example": "Nord*"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 100,
            "x-wf-example": 25
          },
          {
            "name": "q",
            "description": "Query. Request retailers based on partial match of name or retailer code.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer_code",
            "description": "Retailer code. Request the list of retailers with retailer_codes.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "us-adidas,us-aldo,us-gap"
          },
          {
            "name": "retailer_id",
            "description": "Retailer identifier. Request the list of retailers with retailer_id.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": [
              926
            ]
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Request retailers that include the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the retailers updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          }
        ],
        "responses": {
          "200": {
            "description": "List of retailers",
            "schema": {
              "$ref": "#/definitions/retailersListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a retailer.",
        "description": "Request creation of a retailer from JSON data in the request body.",
        "tags": [
          "RETAILERS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "retailer_data",
            "in": "body",
            "description": "Data to create a retailer.",
            "schema": {
              "$ref": "#/definitions/retailerCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the retailer.",
            "schema": {
              "$ref": "#/definitions/retailerResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created retailer.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Retailer is invalid",
            "schema": {
              "$ref": "#/definitions/retailer422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/retailers/{retailer_code}": {
      "get": {
        "summary": "Individual retailer.",
        "description": "Request a single retailer.",
        "tags": [
          "RETAILERS"
        ],
        "parameters": [
          {
            "name": "retailer_code",
            "description": "Retailer code. Request the retailer with retailer_code.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "us-adidas"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual retailer.",
            "schema": {
              "$ref": "#/definitions/retailerResponse"
            }
          },
          "404": {
            "description": "Retailer not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a retailer.",
        "description": "Request update of a retailer from JSON data in the request body.",
        "tags": [
          "RETAILERS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "retailer_code",
            "description": "Retailer code. Update the retailer with retailer_code.",
            "required": true,
            "type": "string",
            "in": "path",
            "x-wf-example": "us-adidas"
          },
          {
            "name": "retailer_data",
            "in": "body",
            "description": "Data to update a retailer.",
            "schema": {
              "$ref": "#/definitions/retailerUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the retailer."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Retailer not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Retailer not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/retailer422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/stores": {
      "get": {
        "summary": "List stores.",
        "description": "Request an array of stores filtered by allowed parameters.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "category_id",
            "description": "Category identifier. Request the stores with category_id.",
            "type": "integer",
            "in": "query",
            "x-wf-example": 54
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the stores with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "description": "Country code. Request the stores with country code. Lowercase two-character code for country.",
            "type": "string",
            "in": "query",
            "x-wf-example": "us",
            "enum": [
              "au",
              "nz",
              "uk",
              "us"
            ]
          },
          {
            "name": "deleted",
            "description": "Deleted stores. Request to include (true) or not include (false) stores that are deleted.",
            "type": "boolean",
            "default": false,
            "in": "query",
            "x-wf-example": false
          },
          {
            "name": "enabled",
            "description": "Select enabled stores. Request to include only enabled (true) or not enabled (false) stores. This will be deprecated. Please remove from future queries and uses statuses parameter instead.",
            "type": "boolean",
            "in": "query",
            "x-wf-example": false
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "page",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "in": "query",
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "maximum": 500,
            "in": "query",
            "x-wf-example": 25
          },
          {
            "name": "q",
            "description": "Query. Request stores based on partial match on name.",
            "type": "string",
            "in": "query"
          },
          {
            "name": "retailer_code",
            "description": "Retailer code. Request the stores with retailer_code. Lowercase code name assigned a specific retailer.",
            "type": "string",
            "in": "query",
            "x-wf-example": "us-adidas"
          },
          {
            "name": "retailer_id",
            "description": "Retailer identifier. Request the stores with retaler_id.",
            "type": "integer",
            "in": "query",
            "x-wf-example": 926
          },
          {
            "name": "sort",
            "description": "Sort results by one or more fields. Change sort order by adding desc or asc after field name.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "abn asc",
                "abn desc",
                "centre_id asc",
                "centre_id desc",
                "dining_cuisine asc",
                "dining_cuisine desc",
                "dining_image_ref asc",
                "dining_image_ref desc",
                "dining_menu_ref asc",
                "dining_menu_ref desc",
                "email_address asc",
                "email_address desc",
                "lease_id asc",
                "lease_id desc",
                "name asc",
                "name desc",
                "phone_no asc",
                "phone_no desc",
                "retailer_website asc",
                "retailer_website desc",
                "salience asc",
                "salience desc",
                "shop_no asc",
                "shop_no desc",
                "store_front_image_ref asc",
                "store_front_image_ref desc"
              ]
            },
            "collectionFormat": "csv",
            "in": "query",
            "default": "name asc",
            "x-wf-example": "name asc, centre_id desc"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Request stores that include the listed statuses. Live and Preview statuses with be returned by default",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "store_ids",
            "description": "List of store ids to be used for additional filtering of results.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "in": "query"
          },
          {
            "name": "updated_since",
            "description": "Updated since. Request the stores updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "in": "query",
            "x-wf-example": "2015-04-02"
          },
          {
            "name": "with_first_letter",
            "description": "First letter of store. Request the stores by the normalized first letter of the store name.",
            "type": "string",
            "in": "query",
            "x-wf-example": "n"
          },
          {
            "name": "zone_id",
            "description": "Zone identifier. Request the stores with zone_id. Lowercase name for a specific zone.",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of stores.",
            "schema": {
              "$ref": "#/definitions/storesListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a store.",
        "description": "Request creation of a store from JSON data in the request body.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "store_data",
            "in": "body",
            "description": "Data to create a store.",
            "schema": {
              "$ref": "#/definitions/storeCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the store.",
            "schema": {
              "$ref": "#/definitions/storeResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created store.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Store not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/store422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/stores/{store_id}": {
      "get": {
        "summary": "Individual store.",
        "description": "Request a single store.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "store_id",
            "description": "Store identifier. Request the store with store_id.",
            "required": true,
            "type": "integer",
            "in": "path",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual store.",
            "schema": {
              "$ref": "#/definitions/storeResponse"
            }
          },
          "404": {
            "description": "Store not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a store.",
        "description": "Request update of a store from JSON data in the request body.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "store_data",
            "in": "body",
            "description": "Data to update a store.",
            "schema": {
              "$ref": "#/definitions/storeUpdateBody"
            },
            "required": true
          },
          {
            "name": "store_id",
            "description": "Store identifier. Update the store with store_id.",
            "required": true,
            "type": "integer",
            "in": "path",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the store."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Store not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Store not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/store422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/stores/{store_id}/locations": {
      "post": {
        "summary": "Create a store location.",
        "description": "Request creation of a store location from JSON data in the request body.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "location_data",
            "in": "body",
            "description": "Data to create a store location.",
            "schema": {
              "$ref": "#/definitions/storeLocation"
            },
            "required": true
          },
          {
            "name": "store_id",
            "description": "Store identifier. Request to create the store location with store_id.",
            "required": true,
            "type": "integer",
            "in": "path",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the store location.",
            "schema": {
              "$ref": "#/definitions/LocationResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created store location.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Store location not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/location422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/stores/{store_id}/locations/{location_id}": {
      "patch": {
        "summary": "Update a store location.",
        "description": "Request update of a store location from JSON data in the request body.",
        "tags": [
          "STORE INFORMATION"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "location_data",
            "in": "body",
            "description": "Data to update a store location.",
            "schema": {
              "$ref": "#/definitions/storeLocation"
            },
            "required": true
          },
          {
            "name": "location_id",
            "description": "Location identifier. Request to update the store location with location_id.",
            "required": true,
            "type": "integer",
            "in": "path"
          },
          {
            "name": "store_id",
            "description": "Store identifier. Request to update the store location with store_id.",
            "required": true,
            "type": "integer",
            "in": "path",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the store location."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Store location not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Store location not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/location422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "store"
      ]
    },
    "/occasions": {
      "get": {
        "summary": "List occasions",
        "description": "Request an array of occasions filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "in": "query",
            "description": "Centre identifier. Request occasions with centre_id. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london'].",
            "type": "string",
            "required": false,
            "x-wf-example": "sanfrancisco"
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "centre_id,occasion_id,name"
          },
          {
            "name": "overlap_end_at",
            "in": "query",
            "description": "Overlap end at. Request occasions which start before the overlap end_at Date-time. Must be used with overlap_start_at.",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-wf-example": "2015-09-11T00:00:00"
          },
          {
            "name": "overlap_start_at",
            "in": "query",
            "description": "Overlap start at. Request occasions which start on or after the overlap start_at Date-time. Must be used with overlap_end_at.",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-wf-example": "2015-09-20T23:59:00"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 50,
            "maximum": 50,
            "x-wf-example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of occasions.",
            "schema": {
              "$ref": "#/definitions/occasionListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create an occasion.",
        "description": "Request creation of an occasion from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "occasion_data",
            "in": "body",
            "required": true,
            "description": "Data to create an occasion.",
            "schema": {
              "$ref": "#/definitions/occasionCreateBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created an occasion.",
            "schema": {
              "$ref": "#/definitions/occasionInstanceResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created occasion.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Occasion not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/occasion422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/occasions/{occasion_id}": {
      "patch": {
        "summary": "Update a occasion.",
        "description": "Request update of an occasion from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "occasion_data",
            "in": "body",
            "description": "Data to update an occasion.",
            "schema": {
              "$ref": "#/definitions/occasionUpdateBody"
            },
            "required": true
          },
          {
            "name": "occasion_id",
            "in": "path",
            "description": "Occasion identifier. Request to update the occasion with occasion_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 1234
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the occasion."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Occasion not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Occasion not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/occasion422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an occasion.",
        "description": "Request deletion of an occasion.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "occasion_id",
            "in": "path",
            "description": "Occasion identifier. Request to delete the occasion with occasion_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the occasion."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Occasion not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/schedules": {
      "get": {
        "summary": "List schedules",
        "description": "Request an array of schedules filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "centre_id,schedule_id,description"
          },
          {
            "name": "include_followee",
            "description": "Followee flag. Request Schedules includes the ones that given participant is following.",
            "type": "boolean",
            "in": "query",
            "x-wf-example": "true"
          },
          {
            "name": "overlap_end_at",
            "in": "query",
            "description": "Overlap end at. Request schedules which start before the overlap end_at Date-time. Must be used with overlap_start_at.",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-wf-example": "2015-09-11T00:00:00"
          },
          {
            "name": "overlap_start_at",
            "in": "query",
            "description": "Overlap start at. Request schedules which start on or after the overlap start_at Date-time. Must be used with overlap_end_at.",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-wf-example": "2015-09-20T23:59:00"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 2
          },
          {
            "name": "participant_id",
            "in": "query",
            "description": "Participant identifier. Request schedules with participant_id.",
            "type": "integer",
            "required": false,
            "x-wf-example": 1234
          },
          {
            "name": "participant_kind",
            "in": "query",
            "description": "Type of participant. Used with participant_kind_id..",
            "type": "string",
            "enum": [
              "Centre",
              "Store"
            ],
            "required": false,
            "x-wf-example": "Centre"
          },
          {
            "name": "participant_kind_id",
            "in": "query",
            "description": "Participant kind identifier. Identifier for participant of type participant_kind.",
            "type": "string",
            "required": false,
            "x-wf-example": "sydney"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 10,
            "x-wf-example": 10
          },
          {
            "name": "schedule_ids",
            "in": "query",
            "description": "List of Schedule identifiers. Request schedules for each schedule_id.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "required": false,
            "x-wf-example": "1,2,3"
          },
          {
            "name": "store_id",
            "in": "query",
            "description": "Store identifier. Request schedules with store_id.",
            "type": "integer",
            "required": false,
            "x-wf-example": 1234
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of schedule.",
            "type": "string",
            "enum": [
              "special_trading",
              "standard_trading"
            ],
            "required": false,
            "x-wf-example": "standard_trading"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of schedules.",
            "schema": {
              "$ref": "#/definitions/scheduleListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a schedule.",
        "description": "Request creation of a schedule from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "schedule_data",
            "in": "body",
            "required": true,
            "description": "Data to create a schedule.",
            "schema": {
              "$ref": "#/definitions/scheduleCreateBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a schedule.",
            "schema": {
              "$ref": "#/definitions/scheduleInstanceResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created schedule.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Schedule not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/schedule422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/schedules/{schedule_id}": {
      "patch": {
        "summary": "Update a schedule",
        "description": "Request update of a schedule from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "schedule_data",
            "in": "body",
            "description": "Data to update a schedule.",
            "schema": {
              "$ref": "#/definitions/scheduleUpdateBody"
            },
            "required": true
          },
          {
            "name": "schedule_id",
            "in": "path",
            "description": "Schedule identifier. Request to update the schedule with schedule_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 1234
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the schedule."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Schedule not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Schedule not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/schedule422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a schedule.",
        "description": "Request deletion of a schedule.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "schedule_id",
            "in": "path",
            "description": "Schedule identifier. Request to delete the schedule with schedule_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the schedule."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Schedule not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/participants": {
      "get": {
        "summary": "List participants",
        "description": "Request an array of participants filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-example": "participant_id,kind,kind_id"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-example": 2
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 10,
            "maximum": 10,
            "x-example": 10
          },
          {
            "name": "participant_ids",
            "in": "query",
            "description": "List of Participant identifiers. Request participants for each schedule_id.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "required": false,
            "x-example": "1,2,3"
          },
          {
            "name": "kind",
            "in": "query",
            "description": "Type of participant.",
            "type": "string",
            "enum": [
              "Centre",
              "Store"
            ],
            "required": false,
            "x-example": "Centre"
          },
          {
            "name": "kind_id",
            "in": "query",
            "description": "Key of participant.",
            "type": "string",
            "required": false,
            "x-example": "sydney"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of participants.",
            "schema": {
              "$ref": "#/definitions/participantListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a participant.",
        "description": "Request creation of a participant from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "participant_data",
            "in": "body",
            "required": true,
            "description": "Data to create a participant.",
            "schema": {
              "$ref": "#/definitions/participantCreateBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a participant.",
            "schema": {
              "$ref": "#/definitions/participantInstanceResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created participant.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Participant not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/participant422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/participants/{kind}/{kind_id}": {
      "get": {
        "summary": "Individule participant",
        "description": "Request a single participant.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "kind",
            "in": "path",
            "description": "Participant kind. Request to the participant with kind.",
            "type": "string",
            "required": true,
            "enum": [
              "Centre",
              "Store"
            ],
            "x-example": "Centre"
          },
          {
            "name": "kind_id",
            "in": "path",
            "description": "Participant key. Request to the participant with kind_id.",
            "type": "string",
            "required": true,
            "x-example": "sydney"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual participant.",
            "schema": {
              "$ref": "#/definitions/participantInstanceResponse"
            }
          },
          "404": {
            "description": "Participant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/participants/{participant_id}": {
      "get": {
        "summary": "Individule participant",
        "description": "Request a single participant.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "participant_id",
            "in": "path",
            "description": "Participant identifier. Request to the participant with participant_id.",
            "type": "integer",
            "required": true,
            "x-example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual participant.",
            "schema": {
              "$ref": "#/definitions/participantInstanceResponse"
            }
          },
          "404": {
            "description": "Participant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a participant",
        "description": "Request update of a participant from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "participant_data",
            "in": "body",
            "description": "Data to update a participant.",
            "schema": {
              "$ref": "#/definitions/participantUpdateBody"
            },
            "required": true
          },
          {
            "name": "participant_id",
            "in": "path",
            "description": "Participant identifier. Request to update the participant with participant_id.",
            "type": "integer",
            "required": true,
            "x-example": 1234
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the participant."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Participant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Participant not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/participant422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a participant.",
        "description": "Request deletion of a participant.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "participant_id",
            "in": "path",
            "description": "Participant identifier. Request to delete the participant with participant_id.",
            "required": true,
            "type": "integer",
            "x-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the participant."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Participant not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/occurrences/{participant_kind}/{participant_kind_id}": {
      "get": {
        "summary": "List occurrences.",
        "description": "Request an array of schedules occurrences by participant.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "parameters": [
          {
            "name": "participant_kind",
            "in": "path",
            "description": "Participant kind. Used with participant_kind_id.",
            "type": "string",
            "enum": [
              "Centre",
              "Store"
            ],
            "required": true
          },
          {
            "name": "participant_kind_id",
            "in": "path",
            "description": "Participant kind identifier. Identifier for participant of type participant_kind.",
            "type": "string",
            "required": true
          },
          {
            "name": "starts_at",
            "in": "query",
            "description": "Filters occurrences that start on or after given date-time. The given date-time precision is only honored down to the minute",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-09-11T00:00:00Z"
          },
          {
            "name": "ends_at",
            "in": "query",
            "description": "Filters occurrences that start on or before given date-time. The given date-time precision is only honored down to the minute",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-09-11T00:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of occurrences.",
            "schema": {
              "$ref": "#/definitions/occurrenceListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/centres/{centre_id}/trading-hours": {
      "get": {
        "summary": "List trading-hours for a centre.",
        "description": "Request an array of centre trading-hours.",
        "tags": [
          "CENTRE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the centre trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of centre trading-hours.",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a centre trading-hours.",
        "description": "Request creation of centre trading-hours from JSON data in the request body.",
        "tags": [
          "CENTRE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the centre trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "centre_trading_hour_data",
            "in": "body",
            "required": true,
            "description": "Data to create centre trading-hours.",
            "schema": {
              "$ref": "#/definitions/createCentreHoursBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the centre trading-hours.",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created centre trading-hours.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/centres/{centre_id}/trading-hours/{trading_hour_id}": {
      "delete": {
        "summary": "Delete a centre trading-hour.",
        "description": "Request deletion of a trading-hour for a centre.",
        "tags": [
          "CENTRE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request to delete the centre trading-hours with centre_id. Lowercase code name for a specific centre.",
            "default": "sanfrancisco",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "trading_hour_id",
            "in": "path",
            "required": true,
            "description": "Trading-hour identifier. Request to delete the trading-hour with trading_hour_id.",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the centre trading-hour."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Trading hour not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/centres/{centre_id}/trading-hours/range": {
      "get": {
        "summary": "List centre trading hours for a date range.",
        "description": "Request an array of centre trading hours filtered by allowed parameters.",
        "tags": [
          "CENTRE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the centre trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "path",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Start date. Request the centre trading-hours on or after start date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-15"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "description": "End date. Request the centre trading-hours on or before end date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-22"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of trading hours.",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/centre_trading_hours": {
      "get": {
        "summary": "List trading-hours for all centres.",
        "description": "Request an array of centre trading-hours.",
        "tags": [
          "CENTRE TRADING HOURS"
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of centre trading-hours.",
            "schema": {
              "$ref": "#/definitions/centreTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours": {
      "get": {
        "summary": "List store trading-hours.",
        "description": "Request an array of store trading hours filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre. Must relate to store_id.",
            "in": "query",
            "required": true,
            "type": "string",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "Store identifier. Request the store trading-hours with store_id.",
            "type": "integer",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of store trading hours.",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a store trading-hours.",
        "description": "Request creation of store trading-hours from JSON data in the request body.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "centre_trading_hour_data",
            "in": "body",
            "required": true,
            "description": "Data to create store trading-hours.",
            "schema": {
              "$ref": "#/definitions/createStoreHoursBody"
            }
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "Store identifier. Request the store trading-hours with store_id.",
            "type": "integer",
            "x-wf-example": 402495
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the store trading-hours.",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created store trading-hours.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Store trading-hour not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/tradingHour422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours/{trading_hour_id}": {
      "delete": {
        "summary": "Delete a store trading-hour.",
        "description": "Request deletion of a store trading-hour.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "Store identifier. Request to delete the store trading-hours with store_id.",
            "type": "integer",
            "x-wf-example": 402495
          },
          {
            "name": "trading_hour_id",
            "in": "path",
            "required": true,
            "description": "Trading hour identifier. Request to delete the store trading-hours with trading_hour_id. Must relate to store_id.",
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the store trading-hour."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Store trading-hour or store not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/stores/{store_id}/trading-hours/range": {
      "get": {
        "summary": "List store trading-hours for a date range.",
        "description": "Request an array of store trading hours filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Start date. Request the store trading-hours on or after start date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-15"
          },
          {
            "name": "store_id",
            "in": "path",
            "required": true,
            "description": "Store identifier. Request the store trading-hours with store_id.",
            "type": "integer",
            "x-wf-example": 402495
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "description": "End date. Request the store trading-hours on or before end date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-22"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of store trading-hours.",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/store_trading_hours": {
      "get": {
        "summary": "List all store trading-hours.",
        "description": "Request an array of store trading hours filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.",
            "in": "query",
            "type": "string",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of store trading hours.",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/store_trading_hours/range": {
      "get": {
        "summary": "List all store trading-hours for a date range.",
        "description": "Request an array of store trading hours filtered by allowed parameters.",
        "tags": [
          "STORE TRADING HOURS"
        ],
        "deprecated": true,
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request the store trading-hours with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "required": true,
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "description": "Start date. Request the store trading-hours on or after start date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-15"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "description": "End date. Request the store trading-hours on or before end date of a range.",
            "type": "string",
            "format": "date",
            "x-wf-example": "2015-07-22"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of store trading-hours.",
            "schema": {
              "$ref": "#/definitions/storeTradingHoursListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "trading_hour"
      ]
    },
    "/categories": {
      "get": {
        "summary": "List categories.",
        "description": "Request an array of categories.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "description": "Category depth. Request categories with depth.",
            "type": "integer",
            "x-wf-example": 1
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Category name. Request categories with name.",
            "type": "string",
            "x-wf-example": "Retailer"
          },
          {
            "name": "path",
            "in": "query",
            "description": "Category path. Request categories with path.",
            "type": "string",
            "x-wf-example": "retailer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests categories that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of categories.",
            "schema": {
              "$ref": "#/definitions/categoriesListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a category.",
        "description": "Request creation of a category from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_data",
            "in": "body",
            "description": "Data to create a category.",
            "schema": {
              "$ref": "#/definitions/categoryCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the category.",
            "schema": {
              "$ref": "#/definitions/categoryResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created category.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Category not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/category422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}": {
      "get": {
        "summary": "Individual category.",
        "description": "Request a single category.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request the category with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual category.",
            "schema": {
              "$ref": "#/definitions/categoryResponse"
            }
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a category.",
        "description": "Request update of a category from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_data",
            "description": "Data to update a category.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/categoryUpdateBody"
            }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request to update the category with category_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the category."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Category not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/category422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a category.",
        "description": "Request deletion of a category.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request to delete the category with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the category."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}/locales": {
      "get": {
        "summary": "List category locales.",
        "description": "Request an array of category locales.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request the category locales with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of category locales.",
            "schema": {
              "$ref": "#/definitions/localeListResponse"
            }
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a locale for category.",
        "description": "Request creation of a locale for category from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request to update the locale with category_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "locale_data",
            "in": "body",
            "required": true,
            "description": "Data to create a locale for category.",
            "schema": {
              "$ref": "#/definitions/localeCreateBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created locale.",
            "schema": {
              "$ref": "#/definitions/localeResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created locale.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Unprocessable entity or request.",
            "schema": {
              "$ref": "#/definitions/locale422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/locales/{westfield_locale}": {
      "get": {
        "summary": "Get locales for a list of categories.",
        "description": "Get list of locales for a list of categories.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_ids",
            "in": "query",
            "description": "Category identifiers. Request categories with these category_ids.",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "x-wf-example": 123452344
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Statuses. Requests locales that include one of the listed statuses.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "enum": [
              "pending",
              "preview",
              "live",
              "expired",
              "invalid",
              "disabled"
            ]
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request the locale with westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "required": true,
            "type": "string",
            "x-wf-example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual category locale.",
            "schema": {
              "$ref": "#/definitions/localeListResponse"
            }
          },
          "404": {
            "description": "Category locales not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}/locales/{westfield_locale}": {
      "get": {
        "summary": "Individual category locale.",
        "description": "Request a single category locale.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request the category with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request the locale with westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "required": true,
            "type": "string",
            "x-wf-example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual category locale.",
            "schema": {
              "$ref": "#/definitions/localeResponse"
            }
          },
          "404": {
            "description": "Category locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a locale.",
        "description": "Request update of a category locale from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request to update the locale with category_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "locale_data",
            "in": "body",
            "description": "Data to update a locale.",
            "schema": {
              "$ref": "#/definitions/localeUpdateBody"
            },
            "required": true
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request to update the locale with westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "type": "string",
            "required": true,
            "x-wf-example": "en_US"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the locale."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Locale not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/locale422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a locale.",
        "description": "Request deletion of a locale.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request to update the locale with category_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request to update the locale with westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "type": "string",
            "required": true,
            "x-wf-example": "en_US"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the locale."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}/locales/{westfield_locale}/children-list": {
      "get": {
        "summary": "Category list children.",
        "description": "Request the children list for a single category and locale.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Request the child categories of the parent with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Category depth. Request categories with depth.",
            "type": "integer",
            "x-wf-example": 1
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "Updated since. Request the categories updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request the child categories with the locale westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "required": true,
            "type": "string",
            "x-wf-example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the children of the category with local.",
            "schema": {
              "$ref": "#/definitions/categoryChildrenListResponse"
            }
          },
          "404": {
            "description": "Category locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}/locales/{westfield_locale}/children-tree": {
      "get": {
        "summary": "Category tree.",
        "description": "Request the children tree for a single category and locale.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Filter child categories of the parent with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Category depth. Request categories with depth.",
            "type": "integer",
            "x-wf-example": 1
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request the categories with the locale westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "required": true,
            "type": "string",
            "x-wf-example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the category tree with locale.",
            "schema": {
              "$ref": "#/definitions/categoryChildrenTreeResponse"
            }
          },
          "404": {
            "description": "Category locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/{category_id}/locales/{westfield_locale}/parent-list": {
      "get": {
        "summary": "Category list parents.",
        "description": "Request all parents for a single category as a list. The list is ordered from the top parent down to the category.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "Category identifier. Filter child categories of the parent with category_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          },
          {
            "name": "fields",
            "description": "Fields in response. Array that lists the fields requested. If empty or not supplied, all attributes will be returned.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "in": "query",
            "x-wf-example": "_links"
          },
          {
            "name": "updated_since",
            "in": "query",
            "description": "Updated since. Request the categories updated since a specific date and time. ISO-8601 format.",
            "type": "string",
            "format": "date-time",
            "x-wf-example": "2015-04-02"
          },
          {
            "name": "westfield_locale",
            "in": "path",
            "description": "Locale identifier. Request the categories with the locale westfield_locale.",
            "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
            "required": true,
            "type": "string",
            "x-wf-example": "en-US"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved parents of the category with locale.",
            "schema": {
              "$ref": "#/definitions/categoryChildrenListResponse"
            }
          },
          "404": {
            "description": "Category locale not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/groups": {
      "get": {
        "summary": "List groups.",
        "description": "Request a category group",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Country filter.",
            "type": "string",
            "enum": [
              "au",
              "nz",
              "uk",
              "us"
            ],
            "x-wf-example": "uk"
          },
          {
            "name": "group_ids",
            "in": "query",
            "description": "Group identifiers to use as a filter.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "x-wf-example": 1
          },
          {
            "name": "category_ids",
            "in": "query",
            "description": "Category identifiers to use as a filter.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "csv",
            "x-wf-example": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "Results page number. Specific page of results to request when paginating.",
            "type": "integer",
            "default": 1,
            "x-wf-example": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Results per page. Number of items per result set when paginating.",
            "type": "integer",
            "default": 25,
            "x-wf-example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of groups.",
            "schema": {
              "$ref": "#/definitions/groupListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a group.",
        "description": "Request creation of a category group from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "group_data",
            "in": "body",
            "description": "Data to create a group.",
            "schema": {
              "$ref": "#/definitions/groupCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the group.",
            "schema": {
              "$ref": "#/definitions/groupResponse"
            },
            "headers": {
              "location": {
                "description": "URI of created group.",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Group not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/group422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/categories/groups/{group_id}": {
      "get": {
        "summary": "Individual category group.",
        "description": "Request a single category grou.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "description": "Group identifier. Request the group with group_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual group.",
            "schema": {
              "$ref": "#/definitions/groupResponse"
            }
          },
          "404": {
            "description": "Category not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "patch": {
        "summary": "Update a group.",
        "description": "Request update of a group from JSON data in the request body.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "group_data",
            "description": "Data to update a group.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/groupUpdateBody"
            }
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Group identifier. Request to update the group with group_id.",
            "type": "integer",
            "required": true,
            "x-wf-example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the group."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Group not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Group not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/group422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a group.",
        "description": "Request deletion of a group.",
        "tags": [
          "CATEGORIES"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "group_id",
            "in": "path",
            "description": "Group identifier. Request to delete the group with group_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the group."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Group not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "category"
      ]
    },
    "/kiosk/enclosures": {
      "get": {
        "summary": "List enclosures.",
        "description": "Request an array of enclosures filtered by allowed parameters.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request enclosures associated with a kiosk_centre that has centre_id.",
            "in": "query",
            "type": "string",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of enclosures.",
            "schema": {
              "$ref": "#/definitions/enclosuresListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create an enclosure.",
        "description": "Request creation of an enclosure from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "enclosure_data",
            "in": "body",
            "description": "Data to create an enclosure.",
            "schema": {
              "$ref": "#/definitions/enclosureCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the enclosure.",
            "schema": {
              "$ref": "#/definitions/enclosureResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Enclosure not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/enclosure422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/kiosk/enclosures/{enclosure_id}": {
      "get": {
        "summary": "Request a single enclosure.",
        "description": "Request a single enclosure.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "enclosure_id",
            "description": "Enclosure identifier. Request the enclosure with enclosure_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual enclosure.",
            "schema": {
              "$ref": "#/definitions/enclosureResponse"
            }
          },
          "404": {
            "description": "Enclosure not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an enclosure.",
        "description": "Request update of an enclosure from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "enclosure_id",
            "description": "Enclosure identifier. Request to update the enclosure with enclosure_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "enclosure_data",
            "in": "body",
            "description": "Data to update an enclosure.",
            "schema": {
              "$ref": "#/definitions/enclosureUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the enclosure."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Enclosure not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Enclosure not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/enclosure422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete an enclosure.",
        "description": "Request deletion of an enclosure.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "enclosure_id",
            "description": "Enclosure identifier. Request the enclosure with enclosure_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the enclosure."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Enclosure not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/kiosk/kiosk_centres": {
      "get": {
        "summary": "List kiosk centres.",
        "description": "Request an array of centres that have kiosks.",
        "tags": [
          "KIOSK"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of kiosk centres.",
            "schema": {
              "$ref": "#/definitions/kioskCentreListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a kiosk centre.",
        "description": "Request creation of a kiosk centre from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data to create a kiosk centre.",
            "schema": {
              "$ref": "#/definitions/kioskCentreCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the kiosk centre.",
            "schema": {
              "$ref": "#/definitions/kioskCentreResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Kiosk centre not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/kioskCentre422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/kiosk/kiosk_centres/{kiosk_centre_id}": {
      "get": {
        "summary": "Individual kiosk centre.",
        "description": "Request a single kiosk centre.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "kiosk_centre_id",
            "description": "Kiosk centre identifier. Request the kiosk centre with kiosk_centre_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual kiosk centre.",
            "schema": {
              "$ref": "#/definitions/kioskCentreResponse"
            }
          },
          "404": {
            "description": "Kiosk centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a kiosk centre.",
        "description": "Request update of a kiosk centre from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "kiosk_centre_id",
            "description": "Kiosk centre identifier. Request to update the kiosk centre with kiosk_centre_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "centre_data",
            "in": "body",
            "description": "Data to update a kiosk centre.",
            "schema": {
              "$ref": "#/definitions/kioskCentreUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the kiosk centre."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Kiosk centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Kiosk centre not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/kioskCentre422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a kiosk centre.",
        "description": "Request deletion of a kiosk centre.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "kiosk_centre_id",
            "in": "path",
            "description": "Kiosk centre identifier. Request to delete the kioks centre with kiosk_centre_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the kiosk centre."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Kiosk centre not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/kiosk/directories": {
      "get": {
        "summary": "List directories.",
        "description": "Request an array of directories.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "enclosure_id",
            "description": "Enclosure identifier. Request directories associated with a kiosk_centre that has enclosure_id.",
            "in": "query",
            "type": "string",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of directories.",
            "schema": {
              "$ref": "#/definitions/directoryListResponse"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "post": {
        "summary": "Create a directory.",
        "description": "Request creation of a directory from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "directory_data",
            "in": "body",
            "description": "Data to create a directory.",
            "schema": {
              "$ref": "#/definitions/directoryCreateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the directory.",
            "schema": {
              "$ref": "#/definitions/directoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "422": {
            "description": "Directory not created. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/directory422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/kiosk/directories/{directory_id}": {
      "get": {
        "summary": "Individual directory.",
        "description": "Request a single directory.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "directory_id",
            "description": "Directory identifier. Request the directory with directory_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the individual directory.",
            "schema": {
              "$ref": "#/definitions/directoryResponse"
            }
          },
          "404": {
            "description": "Directory not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a directory.",
        "description": "Request update of a directory from JSON data in the request body.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "directory_id",
            "description": "Directory identifier. Request to update the directory with directory_id.",
            "type": "integer",
            "in": "path",
            "required": true,
            "x-wf-example": 24585
          },
          {
            "name": "directory_data",
            "in": "body",
            "description": "Data to update a directory.",
            "schema": {
              "$ref": "#/definitions/directoryUpdateBody"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the directory."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Directory not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          },
          "422": {
            "description": "Directory not updated. Returns an array of error messages explaining the problems with the provided attributes.",
            "schema": {
              "$ref": "#/definitions/directory422Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a directory.",
        "description": "Request deletion of a directory.",
        "tags": [
          "KIOSK"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Staff Access token.",
            "required": true
          },
          {
            "name": "directory_id",
            "in": "path",
            "description": "Directory identifier. Request to delete the directory with directory_id.",
            "required": true,
            "type": "integer",
            "x-wf-example": 24585
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the directory."
          },
          "401": {
            "description": "Unauthorized request.",
            "schema": {
              "$ref": "#/definitions/http401Response"
            }
          },
          "404": {
            "description": "Directory not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "kiosk"
      ]
    },
    "/products/{product_id}/related": {
      "get": {
        "summary": "List related products.",
        "description": "Request an array of related products filtered by allowed parameters.",
        "tags": [
          "PRODUCT RECOMMENDATIONS"
        ],
        "parameters": [
          {
            "name": "centre_id",
            "description": "Centre identifier. Request products with centre_id. Lowercase code name for a specific centre.",
            "type": "string",
            "in": "query",
            "x-wf-example": [
              "sanfrancisco",
              "sydney",
              "london"
            ]
          },
          {
            "name": "country",
            "description": "Country code. Request products with country code. Lowercase two-character code for country.",
            "type": "string",
            "in": "query",
            "x-wf-example": "us"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Limit the number of results returned",
            "default": 4,
            "maximum": 20
          },
          {
            "name": "product_id",
            "in": "path",
            "description": "Product identifier. Request products related to with product_id.",
            "type": "string",
            "required": true,
            "x-wf-example": "0a8e6253-625d-4882-ac61-ffc1f9a93510"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of related products.",
            "schema": {
              "$ref": "#/definitions/relatedProductsResponse"
            }
          },
          "404": {
            "description": "Product not found.",
            "schema": {
              "$ref": "#/definitions/http404Response"
            }
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "x-product": [
        "WF-Data"
      ],
      "x-services": [
        "recommendation"
      ]
    }
  },
  "definitions": {
    "metaResponse": {
      "type": "object",
      "description": "Response metadata.",
      "required": [
        "api_version",
        "deprecation_information"
      ],
      "additionalProperties": false,
      "properties": {
        "api_version": {
          "description": "API version. Version number for the API.",
          "type": "string",
          "example": "1"
        },
        "deprecation_information": {
          "description": "End-of-life information about the deprecation of the endpoint. If this has content you must act on it.",
          "$ref": "#/definitions/deprecationInformation"
        },
        "page": {
          "description": "Current page number.",
          "type": "integer",
          "example": 1
        },
        "page_count": {
          "description": "Total number of pages.",
          "type": "integer",
          "example": 10
        },
        "per_page": {
          "description": "Number of results per page.",
          "type": "integer",
          "example": 25
        },
        "total": {
          "description": "Total number of results for all pages.",
          "type": "integer",
          "example": 100
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "deprecationInformation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "deprecated_at": {
          "description": "Date-time this endpoint is deprecated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "goes_away_at": {
          "description": "Date-time this endpoint is retired and unavailable.",
          "type": "string",
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "more_info": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http401Response": {
      "type": "object",
      "description": "Unauthorized request.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/http401Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http401Error": {
      "type": "object",
      "description": "Unauthorized request.",
      "additionalProperties": false,
      "properties": {
        "access_token": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "x_api_secret": {
          "description": "List of errors with this attribute.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "params": {
          "description": "Request parameters.",
          "type": "object",
          "items": {
            "$ref": "#/definitions/paramDetails"
          }
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "paramDetails": {
      "type": "object",
      "required": [
        "parameter",
        "value"
      ],
      "additionalProperties": false,
      "properties": {
        "parameter": {
          "description": "Parameter key.",
          "type": "string"
        },
        "value": {
          "description": "Parameter value.",
          "type": "string"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http404Error": {
      "type": "object",
      "description": "List of resources not found.",
      "required": [
        "resource"
      ],
      "additionalProperties": false,
      "properties": {
        "resource": {
          "description": "List of resources not found.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "http404Response": {
      "type": "object",
      "description": "Not Found.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of resources not found.",
          "$ref": "#/definitions/http404Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "emptyObject": {
      "type": "object",
      "additionalProperties": false,
      "description": "Empty object.",
      "x-services": [
        "shared"
      ]
    },
    "centreLink": {
      "type": "object",
      "description": "Link and identifier for a centre.",
      "required": [
        "centre_id",
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this deal is related to. Lowercase code name for a specific centre."
        },
        "href": {
          "type": "string",
          "description": "Link to retrieve a centre.",
          "example": "https://api.westfield.io/centres/sydney"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "genericLink": {
      "type": "object",
      "description": "Link to a resource (image, service, etc.).",
      "required": [
        "href"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Link to a resource.",
          "example": "https://api.westfield.io/centres/sanfrancisco"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "validationError": {
      "description": "List of errors with this attribute.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-services": [
        "shared"
      ]
    },
    "baseValidationErrorDetails": {
      "type": "object",
      "description": "An error that does not apply to an attribute.",
      "required": [
        "message",
        "params"
      ],
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Error description. Describes an error that does not apply to an attribute.",
          "type": "string"
        },
        "params": {
          "description": "Supplied parameters.",
          "type": "object"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "retailerLinks": {
      "type": "object",
      "description": "Links associated with a retailer.",
      "required": [
        "logo",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "logo": {
          "description": "Link to retailer logo.",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Link to retailer.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "location": {
      "type": "object",
      "description": "Location identifiers and metadata.",
      "required": [
        "level_description",
        "level_id",
        "level_name",
        "location_id",
        "name",
        "primary"
      ],
      "additionalProperties": false,
      "properties": {
        "level_description": {
          "type": "string",
          "description": "Level description."
        },
        "level_id": {
          "type": "string",
          "description": "Level identifier."
        },
        "level_name": {
          "type": "string",
          "description": "Level name.",
          "example": "Floor 1"
        },
        "location_id": {
          "type": "string",
          "description": "Location identifier."
        },
        "name": {
          "type": "string",
          "description": "Location name."
        },
        "primary": {
          "type": "boolean",
          "description": "Primary location. Location is the primary (true) or not primary (false)."
        }
      },
      "x-services": [
        "shared"
      ]
    },
    "carparkReportDiscountInstance": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "centre_id",
        "created_at",
        "discount_id",
        "discount_type",
        "registration_number",
        "vehicle_is_registered_online"
      ],
      "properties": {
        "centre_id": {
          "description": "Centre identifier.",
          "type": "string",
          "example": "miranda"
        },
        "created_at": {
          "description": "Created at. Date-time that the discount was created.",
          "type": "string",
          "format": "date-time",
          "example": "2015-05-21T10:12:24.456+10:00"
        },
        "discount_amount": {
          "description": "Discount amount recieved at POS terminal, in cents.",
          "type": "integer"
        },
        "discount_id": {
          "description": "Reportable discount identifier.",
          "type": "integer"
        },
        "discount_type": {
          "description": "Type of Skidata discount.",
          "type": "string",
          "example": "Time_In_Minutes"
        },
        "original_owed": {
          "description": "The original parking fee before validation was applied at POS, in cents.",
          "type": "integer"
        },
        "permit_expiry_date": {
          "description": "Expiry date of Disability parking permit.",
          "type": "string",
          "format": "date"
        },
        "permit_number": {
          "description": "Disability parking permit identifier.",
          "type": "string"
        },
        "pos_charged": {
          "description": "Amount charged at POS terminal, in cents.",
          "type": "integer"
        },
        "reason": {
          "description": "Justification for a discount.",
          "type": "string"
        },
        "registration_number": {
          "description": "Vehicle registration plate.",
          "type": "string",
          "example": "LVZ002"
        },
        "retailer_name": {
          "description": "Retailer associated with a RetailerStaffDiscount.",
          "type": "string"
        },
        "ticket_number": {
          "description": "Cinema ticket number for CinemaDiscount.",
          "type": "string"
        },
        "type": {
          "description": "Type of discount.",
          "type": "string",
          "example": "CinemaDiscount"
        },
        "vehicle_is_registered_online": {
          "description": "Is the vehicle registered.",
          "type": "boolean"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "carparkReportDiscountList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/carparkReportDiscountInstance"
      },
      "x-services": [
        "carpark"
      ]
    },
    "carparkReportResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/carparkReportDiscountList"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discountCreateBody": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "amount_spent_cents": {
          "description": "Amount spent in cents for SpendingDiscount.",
          "type": "integer"
        },
        "discount_amount_cents": {
          "description": "Discount amount recieved at POS terminal, in cents.",
          "type": "integer"
        },
        "permit_expiry_date": {
          "description": "Expiry date of Disability parking permit.",
          "type": "string",
          "format": "date"
        },
        "permit_number": {
          "description": "Disability parking permit identifier.",
          "type": "string"
        },
        "pos_charged_cents": {
          "description": "Amount charged at POS terminal, in cents.",
          "type": "integer"
        },
        "reason": {
          "description": "Justification for a discount.",
          "type": "string"
        },
        "registration_number": {
          "description": "Vehicle registration plate.",
          "type": "string"
        },
        "retailer_name": {
          "description": "Retailer associated with a RetailerStaffDiscount.",
          "type": "string"
        },
        "ticket_number": {
          "description": "Cinema ticket number for CinemaDiscount.",
          "type": "string"
        },
        "type": {
          "description": "Type of discount.",
          "type": "string",
          "example": "DisabilityDiscount"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discountInstance": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "discount_type",
        "discount_value"
      ],
      "properties": {
        "centre_id": {
          "description": "Centre identifier.",
          "type": "string",
          "example": "miranda"
        },
        "discount_name": {
          "description": "Name of discount.",
          "type": "string",
          "example": "CinemaDiscount"
        },
        "discount_type": {
          "description": "Type of Skidata discount.",
          "type": "string",
          "example": "Amount_In_Cents",
          "enum": [
            "Amount_In_Cents",
            "Flat_Rate",
            "Percentage",
            "Time_In_Minutes"
          ]
        },
        "discount_value": {
          "description": "The discount value in the appropriate units.",
          "type": "string"
        },
        "registration_number": {
          "description": "Vehicle registration plate.",
          "type": "string"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discountList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/discountInstance"
      },
      "x-services": [
        "carpark"
      ]
    },
    "discountListResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/discountList"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discount201Response": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/discountInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "vehicleInstance": {
      "type": "object",
      "required": [
        "account_payment_type",
        "article_id",
        "discounts",
        "entry_date_time",
        "present_in_car_park",
        "registration_number",
        "registered_online",
        "tariff"
      ],
      "additionalProperties": false,
      "properties": {
        "account_payment_type": {
          "description": "Payment method associated with the account.",
          "type": "string",
          "example": "Pay_At_Paystation",
          "enum": [
            "Auto_Payment",
            "Pay_At_Paystation",
            ""
          ]
        },
        "article_id": {
          "description": "Centre dependent user type.",
          "type": "integer"
        },
        "car_park_id": {
          "description": "Carpark identifier.",
          "type": "integer"
        },
        "car_park_name": {
          "description": "Carpark name.",
          "type": "string"
        },
        "centre_id": {
          "description": "Centre identifier.",
          "type": "string",
          "example": "miranda"
        },
        "discounts": {
          "description": "List of currently applied discounts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/discountInstance"
          }
        },
        "entry_date_time": {
          "description": "The date-time the vehicle entered the carpark.",
          "type": "string",
          "format": "date-time",
          "example": "2015-01-21T03:25:44Z"
        },
        "entry_device_id": {
          "description": "Entry device identifier.",
          "type": "integer"
        },
        "entry_device_name": {
          "description": "Entry device name.",
          "type": "string"
        },
        "parking_transaction_id": {
          "description": "Parking-transaction identifier.",
          "type": "integer"
        },
        "present_in_car_park": {
          "description": "Is the vehicle present in carpark.",
          "type": "boolean"
        },
        "registration_number": {
          "description": "Vehicle registration plate.",
          "type": "string"
        },
        "registered_online": {
          "description": "Is the vehicle registered.",
          "type": "boolean"
        },
        "tariff": {
          "description": "The currently applied tariff.",
          "$ref": "#/definitions/tariffInstance"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "vehicleResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/vehicleInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "tariffInstance": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "tariff_code",
        "tariff_name"
      ],
      "properties": {
        "tariff_code": {
          "description": "Tariff identifier.",
          "type": "integer"
        },
        "tariff_name": {
          "description": "Tariff name.",
          "type": "string"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "http502Response": {
      "type": "object",
      "description": "An HTTP 502 response from the server.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of unexpected errors.",
          "$ref": "#/definitions/http502Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "http502Error": {
      "type": "object",
      "description": "List of errors.",
      "required": [
        "base"
      ],
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "List of errors.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discount422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/discount422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "discount422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "amount_spent_cents": {
          "$ref": "#/definitions/validationError"
        },
        "permit_expiry_date": {
          "$ref": "#/definitions/validationError"
        },
        "permit_number": {
          "$ref": "#/definitions/validationError"
        },
        "reason": {
          "$ref": "#/definitions/validationError"
        },
        "registration_number": {
          "$ref": "#/definitions/validationError"
        },
        "retailer_name": {
          "$ref": "#/definitions/validationError"
        },
        "ticket_number": {
          "$ref": "#/definitions/validationError"
        },
        "type": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "carpark"
      ]
    },
    "noticeListResponse": {
      "type": "object",
      "description": "List notice response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/noticeListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeResponse": {
      "type": "object",
      "description": "Requested notice record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/noticeInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeInstance": {
      "type": "object",
      "description": "Notice record",
      "required": [
        "_links",
        "centre_id",
        "detail",
        "expires_at",
        "featured",
        "img_alt_text",
        "name",
        "notice_id",
        "published_at",
        "salience",
        "type",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/noticeLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date",
          "example": "2018-03-21T21:43:56Z"
        },
        "detail": {
          "type": "string",
          "minLength": 2,
          "description": "Notice content text"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "type": "boolean",
          "description": "Notice is featured (true/false)"
        },
        "img_alt_text": {
          "type": "string",
          "description": "Image alternative text"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "notice_id": {
          "type": "integer",
          "description": "Notice identifier"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date",
          "example": "2018-03-21T21:43:56Z"
        },
        "salience": {
          "type": "integer",
          "description": "Value indicating importance of notice"
        },
        "type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "standard",
            "emergency"
          ],
          "example": "standard"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeLinks": {
      "type": "object",
      "required": [
        "attachment",
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "attachment": {
          "description": "URI to attachment ref file",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "URI to image ref file",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical link to this notice",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeListInstance": {
      "type": "object",
      "required": [
        "_links",
        "centre_id",
        "expires_at",
        "name",
        "notice_id",
        "published_at",
        "salience",
        "type",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/noticeListLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date",
          "example": "2018-03-21T21:43:56Z"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "notice_id": {
          "type": "integer",
          "description": "Notice identifier"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date",
          "example": "2018-03-21T21:43:56Z"
        },
        "salience": {
          "type": "integer",
          "description": "Value indicating importance of notice"
        },
        "type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "standard",
            "emergency"
          ],
          "example": "standard"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeListLinks": {
      "type": "object",
      "required": [
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "URI to image ref file",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical link to this notice",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeCreateBody": {
      "type": "object",
      "description": "Notice create parameters in message body",
      "required": [
        "centre_id",
        "detail",
        "expires_at",
        "image_ref",
        "img_alt_text",
        "name",
        "published_at"
      ],
      "additionalProperties": false,
      "properties": {
        "attachment_ref": {
          "type": "string",
          "description": "Attachment filename"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "detail": {
          "type": "string",
          "minLength": 2,
          "description": "Notice content text"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "type": "boolean",
          "description": "Notice is featured (true/false)"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename"
        },
        "img_alt_text": {
          "type": "string",
          "description": "Image alternative text"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date",
          "example": "2018-03-21T21:43:56Z"
        },
        "salience": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "standard",
            "emergency"
          ],
          "default": "standard"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "noticeUpdateBody": {
      "type": "object",
      "description": "Notice update parameters in message body",
      "additionalProperties": false,
      "properties": {
        "attachment_ref": {
          "type": "string",
          "description": "Attachment filename"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "detail": {
          "type": "string",
          "minLength": 2,
          "description": "Notice content text"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice expiry date",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "type": "boolean",
          "description": "Notice is featured (true/false)"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename"
        },
        "img_alt_text": {
          "type": "string",
          "description": "Image alternative text"
        },
        "name": {
          "type": "string",
          "minLength": 2,
          "maxLength": 40,
          "description": "Notice name"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "Notice publication date",
          "example": "2018-03-21T21:43:56Z"
        },
        "salience": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "description": "Type",
          "enum": [
            "standard",
            "emergency"
          ],
          "example": "standard"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingListResponse": {
      "type": "object",
      "description": "List parking response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingResponse": {
      "type": "object",
      "description": "Requested parking record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/parkingInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingInstance": {
      "type": "object",
      "description": "Parking record",
      "required": [
        "_links",
        "additional_parking_information",
        "centre_id",
        "credit_card_surcharge_amount",
        "flat_rate",
        "maximum_daily_rate_weekday",
        "maximum_daily_rate_weekend",
        "overnight_fee_weekday",
        "overnight_fee_weekend",
        "parking_id",
        "parking_rates",
        "rates_apply",
        "type_of_rate",
        "updated_at",
        "valet_parking_instructions"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/parkingLinks"
        },
        "additional_parking_information": {
          "type": "string",
          "description": "Additional parking information"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "credit_card_surcharge_amount": {
          "type": "string",
          "description": "Credit card surcharge amount"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date",
          "example": "2018-03-21T21:43:56Z"
        },
        "flat_rate": {
          "type": "string",
          "description": "Fee when parking is not hourly"
        },
        "maximum_daily_rate_weekday": {
          "type": "string",
          "description": "Maximum daily rate on weekdays"
        },
        "maximum_daily_rate_weekend": {
          "type": "string",
          "description": "Maximum daily rate on weekends"
        },
        "overnight_fee_weekday": {
          "type": "string",
          "description": "Overnight fee on weekdays"
        },
        "overnight_fee_weekend": {
          "type": "string",
          "description": "Overnight fee on weekends"
        },
        "parking_id": {
          "type": "integer",
          "description": "Parking identifier"
        },
        "parking_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingRates"
          }
        },
        "rates_apply": {
          "type": "boolean",
          "description": "Fee (true) or complimentary (false) parking"
        },
        "type_of_rate": {
          "type": "string",
          "description": "Rate type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Update date",
          "example": "2018-03-21T21:43:56Z"
        },
        "valet_parking_instructions": {
          "type": "string",
          "description": "Valet parking instructions"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingLinks": {
      "type": "object",
      "required": [
        "pdf"
      ],
      "additionalProperties": false,
      "properties": {
        "pdf": {
          "description": "URI to pdf ref file",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingRates": {
      "type": "object",
      "title": "Parking rates",
      "description": "Each n-th hour range with parking rates",
      "additionalProperties": false,
      "properties": {
        "hourly_rate_from": {
          "type": "string",
          "description": "Starting hour range"
        },
        "hourly_rate_to": {
          "type": "string",
          "description": "Ending hour range"
        },
        "hourly_rate_weekday": {
          "type": "string",
          "description": "Cost for this range on weekdays"
        },
        "hourly_rate_weekend": {
          "type": "string",
          "description": "Cost for this range on weekends"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingCreateBody": {
      "type": "object",
      "description": "Parking create parameters in message body",
      "additionalProperties": false,
      "properties": {
        "additional_parking_information": {
          "type": "string",
          "description": "Additional parking information"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "credit_card_surcharge_amount": {
          "type": "string",
          "description": "Credit card surcharge amount"
        },
        "flat_rate": {
          "type": "string",
          "description": "Fee when parking is not hourly"
        },
        "maximum_daily_rate_weekday": {
          "type": "string",
          "description": "Maximum daily rate on weekdays"
        },
        "maximum_daily_rate_weekend": {
          "type": "string",
          "description": "Maximum daily rate on weekends"
        },
        "overnight_fee_weekday": {
          "type": "string",
          "description": "Overnight fee on weekdays"
        },
        "overnight_fee_weekend": {
          "type": "string",
          "description": "Overnight fee on weekends"
        },
        "parking_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingRates"
          }
        },
        "pdf_ref": {
          "type": "string",
          "description": "PDF filename for terms and conditions"
        },
        "rates_apply": {
          "type": "boolean",
          "description": "Fee (true) or complimentary (false) parking"
        },
        "type_of_rate": {
          "type": "string",
          "description": "Type of rate"
        },
        "valet_parking_instructions": {
          "type": "string",
          "description": "Valet parking instructions"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "parkingUpdateBody": {
      "type": "object",
      "description": "Parking update parameters in message body",
      "additionalProperties": false,
      "properties": {
        "additional_parking_information": {
          "type": "string",
          "description": "Additional parking information"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "credit_card_surcharge_amount": {
          "type": "string",
          "description": "Credit card surcharge amount"
        },
        "flat_rate": {
          "type": "string",
          "description": "Fee when parking is not hourly"
        },
        "maximum_daily_rate_weekday": {
          "type": "string",
          "description": "Maximum daily rate on weekdays"
        },
        "maximum_daily_rate_weekend": {
          "type": "string",
          "description": "Maximum daily rate on weekends"
        },
        "overnight_fee_weekday": {
          "type": "string",
          "description": "Overnight fee on weekdays"
        },
        "overnight_fee_weekend": {
          "type": "string",
          "description": "Overnight fee on weekends"
        },
        "parking_rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/parkingRates"
          }
        },
        "pdf_ref": {
          "type": "string",
          "description": "PDF filename for terms and conditions"
        },
        "rates_apply": {
          "type": "boolean",
          "description": "Fee (true) or complimentary (false) parking"
        },
        "type_of_rate": {
          "type": "string",
          "description": "Type of rate"
        },
        "valet_parking_instructions": {
          "type": "string",
          "description": "Valet parking instructions"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListResponse": {
      "type": "object",
      "description": "List of centres",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/centreListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreResponse": {
      "type": "object",
      "description": "Individual centre response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/centreInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "geofenceList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "building": {
          "$ref": "#/definitions/geofenceInstance"
        },
        "parking": {
          "$ref": "#/definitions/geofenceInstance"
        },
        "area": {
          "$ref": "#/definitions/geofenceInstance"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "geofenceInstance": {
      "type": "object",
      "description": "A circular region around a GPS point",
      "additionalProperties": false,
      "properties": {
        "latitude": {
          "type": "number",
          "description": "Latitude in degrees (-90 to +90)",
          "minimum": -90.0,
          "maximum": 90.0,
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "description": "Longitude in degrees (-180 to +180)",
          "minimum": -180.0,
          "maximum": 180.0,
          "format": "double"
        },
        "radius": {
          "type": "number",
          "description": "Radius in metres (1 to 50,000)",
          "minimum": 1,
          "maximum": 50000,
          "format": "double"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "socialMediaList": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "facebook": {
          "type": "string",
          "description": "URI of facebook page"
        },
        "google_plus": {
          "type": "string",
          "description": "URI of Google+ page"
        },
        "instagram": {
          "type": "string",
          "description": "URI of Instagram page"
        },
        "pinterest": {
          "type": "string",
          "description": "URI of Pinterest page"
        },
        "twitter": {
          "type": "string",
          "description": "URI of twitter page"
        },
        "youtube": {
          "type": "string",
          "description": "URI of YouTube page"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListInstance": {
      "type": "object",
      "required": [
        "_links",
        "centre_id",
        "country",
        "enabled",
        "features",
        "geofences",
        "latitude",
        "longitude",
        "map_id",
        "name",
        "short_name",
        "state",
        "suburb",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/centreListLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ]
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date",
          "example": "2018-03-21T21:43:56Z"
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled flag (true/false)"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Features at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys 'building', 'parking', or 'area'",
          "$ref": "#/definitions/geofenceList"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "map_id": {
          "type": "string",
          "description": "Map location identifier"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated date",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreListLinks": {
      "type": "object",
      "required": [
        "dining_image",
        "dining_image_medium",
        "dining_image_small",
        "hero_image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "dining_image": {
          "description": "URI to obtain dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_medium": {
          "description": "URI to obtain medium-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_small": {
          "description": "URI to obtain small-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "hero_image": {
          "description": "URI to obtain hero image",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreInstance": {
      "type": "object",
      "description": "Centre",
      "required": [
        "_links",
        "business_unit_code",
        "centre_id",
        "country",
        "disabled_at",
        "email_address",
        "enabled",
        "enabled_at",
        "features",
        "geofences",
        "latitude",
        "longitude",
        "map_id",
        "name",
        "number_of_levels",
        "owner",
        "phone_number",
        "postcode",
        "short_name",
        "social_media",
        "state",
        "street_address",
        "suburb",
        "theme",
        "time_zone",
        "type",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/centreLinks"
        },
        "business_unit_code": {
          "type": "string",
          "description": "Business unit code"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ]
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Deleted date",
          "example": "2018-03-21T21:43:56Z"
        },
        "disabled_at": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "description": "Date centre will-be/was disabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "type": "string",
          "description": "Email address"
        },
        "enabled": {
          "type": "boolean",
          "description": "Centre is enabled (true/false)"
        },
        "enabled_at": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "description": "Date centre is/was enabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Feature at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys 'building', 'parking', or 'area'",
          "$ref": "#/definitions/geofenceList"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "map_id": {
          "type": "string",
          "description": "Map location identifier"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "owner": {
          "type": "string",
          "description": "Owner of centre"
        },
        "number_of_levels": {
          "type": "integer",
          "description": "Number of floor levels"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        },
        "postcode": {
          "type": "string",
          "description": "Postal Code"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "social_media": {
          "description": "Social media links",
          "$ref": "#/definitions/socialMediaList"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "street_address": {
          "type": "string",
          "description": "Street address"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "theme": {
          "type": "string",
          "description": "Tier of Centre"
        },
        "time_zone": {
          "type": "string",
          "description": "Centre's time zone"
        },
        "type": {
          "type": "string",
          "description": "Type of asset"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated date",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreLinks": {
      "type": "object",
      "required": [
        "deals",
        "dining_image",
        "dining_image_medium",
        "dining_image_small",
        "events",
        "hero_image",
        "products",
        "self",
        "stores",
        "trading_hours"
      ],
      "additionalProperties": false,
      "properties": {
        "deals": {
          "description": "URI to obtain centre deals",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image": {
          "description": "URI to obtain dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_medium": {
          "description": "URI to obtain medium-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "dining_image_small": {
          "description": "URI to obtain small-sized dining image",
          "$ref": "#/definitions/genericLink"
        },
        "events": {
          "description": "URI to obtain centre events",
          "$ref": "#/definitions/genericLink"
        },
        "hero_image": {
          "description": "URI to obtain hero image",
          "$ref": "#/definitions/genericLink"
        },
        "products": {
          "description": "URI to obtain centre products",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/genericLink"
        },
        "stores": {
          "description": "URI to obtain centre stores",
          "$ref": "#/definitions/genericLink"
        },
        "trading_hours": {
          "description": "URI to obtain centre trading hours",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreCreateBody": {
      "type": "object",
      "description": "Centre create parameters in message body",
      "required": [
        "business_unit_code",
        "centre_id",
        "country",
        "email_address",
        "latitude",
        "longitude",
        "name",
        "phone_number",
        "postcode",
        "state",
        "street_address",
        "suburb",
        "time_zone"
      ],
      "additionalProperties": false,
      "properties": {
        "business_unit_code": {
          "type": "string",
          "description": "Business unit code"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ]
        },
        "dining_image_ref": {
          "type": "string",
          "description": "Dining image filename"
        },
        "dining_image_medium_ref": {
          "type": "string",
          "description": "Medium-sized dining image filename"
        },
        "dining_image_small_ref": {
          "type": "string",
          "description": "Small-sized dining image filename"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre will-be/was disabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "type": "string",
          "description": "Email address"
        },
        "enabled": {
          "type": "boolean",
          "description": "Centre is enabled (true/false)"
        },
        "enabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre is/was enabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Feature at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys 'building', 'parking'', or 'area'",
          "$ref": "#/definitions/geofenceList"
        },
        "hero_image_ref": {
          "type": "string",
          "description": "Hero image fielname"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "map_id": {
          "type": "string",
          "description": "Map location identifier"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "number_of_levels": {
          "type": "integer",
          "description": "Number of floor levels"
        },
        "owner": {
          "type": "string",
          "description": "Owner of centre"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        },
        "postcode": {
          "type": "string",
          "description": "Postal Code"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "social_media": {
          "description": "Social media links",
          "$ref": "#/definitions/socialMediaList"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "street_address": {
          "type": "string",
          "description": "Street address"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "time_zone": {
          "type": "string",
          "description": "Time zone of centre"
        },
        "type": {
          "type": "string",
          "description": "Type of asset"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreUpdateBody": {
      "type": "object",
      "description": "Centre update parameters in message body",
      "additionalProperties": false,
      "properties": {
        "business_unit_code": {
          "type": "string",
          "description": "Business unit code"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "country": {
          "type": "string",
          "description": "Country",
          "enum": [
            "AU",
            "NZ",
            "UK",
            "US"
          ]
        },
        "dining_image_ref": {
          "type": "string",
          "description": "Dining image filename"
        },
        "dining_image_medium_ref": {
          "type": "string",
          "description": "Medium-sized dining image filename"
        },
        "dining_image_small_ref": {
          "type": "string",
          "description": "Small-sized dining image filename"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre will-be/was disabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "type": "string",
          "description": "Email address"
        },
        "enabled": {
          "type": "boolean",
          "description": "Centre is enabled (true/false)"
        },
        "enabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date centre is/was enabled",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Feature at centre"
          }
        },
        "geofences": {
          "description": "Hash of geofence information with possible keys 'building', 'parking'', or 'area'",
          "$ref": "#/definitions/geofenceList"
        },
        "hero_image_ref": {
          "type": "string",
          "description": "Hero image fielname"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude"
        },
        "map_id": {
          "type": "string",
          "description": "Map location identifier"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "number_of_levels": {
          "type": "integer",
          "description": "Number of floor levels"
        },
        "owner": {
          "type": "string",
          "description": "Owner of centre"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number"
        },
        "postcode": {
          "type": "string",
          "description": "Postal Code"
        },
        "short_name": {
          "type": "string",
          "description": "Short name"
        },
        "social_media": {
          "description": "Social media links",
          "$ref": "#/definitions/socialMediaList"
        },
        "state": {
          "type": "string",
          "description": "State"
        },
        "street_address": {
          "type": "string",
          "description": "Street address"
        },
        "suburb": {
          "type": "string",
          "description": "City/Suburb"
        },
        "time_zone": {
          "type": "string",
          "description": "Time zone of centre"
        },
        "type": {
          "type": "string",
          "description": "Type of asset"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "countryListResponse": {
      "type": "object",
      "description": "List of countries",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/countryListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "countryListInstance": {
      "type": "object",
      "description": "Information about a country",
      "required": [
        "country_code",
        "name",
        "enabled_at"
      ],
      "additionalProperties": false,
      "properties": {
        "country_code": {
          "description": "Two-letter country code",
          "type": "string",
          "example": "AU"
        },
        "enabled_at": {
          "description": "Date when country was enabled",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "description": "Country name",
          "type": "string",
          "example": "Australia"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "stateListResponse": {
      "type": "object",
      "description": "List of states",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stateListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "stateListInstance": {
      "type": "object",
      "description": "State",
      "required": [
        "abbreviation",
        "country_code",
        "enabled_at",
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "abbreviation": {
          "description": "State abbreviation",
          "type": "string"
        },
        "country_code": {
          "description": "Two-letter state code",
          "type": "string"
        },
        "enabled_at": {
          "description": "Date when state was enabled",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "description": "State name",
          "type": "string"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "newsletterInfoResponse": {
      "type": "object",
      "description": "Information about a list of newsletters.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/newsletterInfoInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "newsletterInfoInstance": {
      "type": "object",
      "description": "A list of countries and centre_ids for a list of newsletters.",
      "additionalProperties": false,
      "properties": {
        "centre_ids": {
          "description": "List of centre identifiers. Unique identifiers of centres.",
          "type": "array",
          "items": {
            "type": "string",
            "x-wf-example": [
              "airportwest_fashion",
              "chartwell"
            ]
          }
        },
        "countries": {
          "description": "Country codes. Request states with country codes. Lowercase two-character code for countries.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AU",
              "NZ",
              "UK",
              "US"
            ],
            "x-wf-example": [
              "AU",
              "NZ"
            ]
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "newslettersListResponse": {
      "type": "object",
      "description": "List of newsletters.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/centreNewsletterInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centreNewsletterInstance": {
      "type": "object",
      "description": "Newsletters for centre.",
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "description": "Identifier of the centre the newsletter is associated with.",
          "type": "string"
        },
        "primary_newsletter_id": {
          "description": "Primary newsletter identifier. Identifier of the primary newsletter for this centre.",
          "type": "string"
        },
        "newsletters": {
          "description": "List of newsletters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/newsletterInstance"
          }
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "newsletterInstance": {
      "type": "object",
      "description": "Individual newsletter.",
      "additionalProperties": false,
      "properties": {
        "newsletter_id": {
          "description": "Newsletter identifier. Unique identifier of newsletter.",
          "type": "string"
        },
        "newsletter_name": {
          "description": "Name of the newsletter.",
          "type": "string"
        },
        "newsletter_description": {
          "description": "Name of the newsletter.",
          "type": "string"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneListResponse": {
      "type": "object",
      "description": "List zone response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zoneInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneResponse": {
      "type": "object",
      "description": "Requested zone record",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/zoneInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this zone",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "color": {
      "type": "object",
      "description": "A color",
      "required": [
        "name",
        "code"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "blush",
            "green",
            "lavender",
            "light_blue",
            "med_blue",
            "mint",
            "purple",
            "rose",
            "royal",
            "transparent"
          ]
        },
        "code": {
          "type": "string",
          "minLength": 6,
          "maxLength": 6
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneInstance": {
      "type": "object",
      "description": "Zone record",
      "required": [
        "_links",
        "centre_id",
        "color",
        "created_at",
        "name",
        "primary_waypoint",
        "status",
        "updated_at",
        "waypoints",
        "zone_id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "Hash of links",
          "$ref": "#/definitions/zoneLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "color": {
          "description": "Zone color",
          "$ref": "#/definitions/color"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created date",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "type": "string",
          "maxLength": 24,
          "description": "Zone name"
        },
        "primary_waypoint": {
          "type": "integer",
          "description": "Primary waypoint"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated date",
          "example": "2018-03-21T21:43:56Z"
        },
        "waypoints": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "minItems": 3
        },
        "zone_id": {
          "type": "integer",
          "description": "Zone identifier. Identifier to retrieve this zone."
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneCreateBody": {
      "type": "object",
      "description": "Zone create parameters in message body",
      "required": [
        "centre_id",
        "color",
        "name",
        "status",
        "waypoints"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "color": {
          "description": "Zone color",
          "$ref": "#/definitions/color"
        },
        "name": {
          "type": "string",
          "maxLength": 24,
          "description": "Zone name"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "waypoints": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "minItems": 3
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zoneUpdateBody": {
      "type": "object",
      "description": "Zone update parameters in message body",
      "required": [
        "centre_id",
        "color",
        "name",
        "status",
        "waypoints"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier"
        },
        "color": {
          "description": "Zone color",
          "$ref": "#/definitions/color"
        },
        "name": {
          "type": "string",
          "maxLength": 24,
          "description": "Zone name"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "waypoints": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "minItems": 3
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "notice422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/notice422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "notice422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "detail": {
          "$ref": "#/definitions/validationError"
        },
        "expires_at": {
          "$ref": "#/definitions/validationError"
        },
        "image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "img_alt_text": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "published_at": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centre422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/centre422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "centre422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "business_unit_code": {
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "country": {
          "$ref": "#/definitions/validationError"
        },
        "email_address": {
          "$ref": "#/definitions/validationError"
        },
        "latitude": {
          "$ref": "#/definitions/validationError"
        },
        "longitude": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "phone_number": {
          "$ref": "#/definitions/validationError"
        },
        "postcode": {
          "$ref": "#/definitions/validationError"
        },
        "state": {
          "$ref": "#/definitions/validationError"
        },
        "street_address": {
          "$ref": "#/definitions/validationError"
        },
        "suburb": {
          "$ref": "#/definitions/validationError"
        },
        "time_zone": {
          "$ref": "#/definitions/validationError"
        },
        "theme": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zone422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/zone422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "zone422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "color": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/colorError"
          }
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "status": {
          "$ref": "#/definitions/validationError"
        },
        "waypoints": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "colorError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "code": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre"
      ]
    },
    "servicesListResponse": {
      "type": "object",
      "description": "List of services",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/service"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceResponse": {
      "type": "object",
      "description": "Service information",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/service"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypesListResponse": {
      "type": "object",
      "description": "List of service types",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceType"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeResponse": {
      "type": "object",
      "description": "Service Type information",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/serviceType"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "service": {
      "type": "object",
      "required": [
        "_links",
        "active",
        "centre_id",
        "description",
        "email",
        "hours",
        "locations",
        "long_title",
        "phone_number",
        "service_id",
        "rates",
        "service_class",
        "service_type",
        "short_title",
        "sort_order",
        "updated_at",
        "url"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/serviceLinks"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the service is currently available"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre in which the service is available"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the centre service was marked as deleted",
          "example": "2018-03-21T21:43:56Z"
        },
        "description": {
          "type": "string",
          "description": "Full description"
        },
        "email": {
          "type": "string",
          "description": "Email for Service"
        },
        "hours": {
          "description": "List of available opening hours",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceHourBody"
          }
        },
        "locations": {
          "description": "List of available locations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceLocationBody"
          }
        },
        "long_title": {
          "type": "string",
          "description": "Long title"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number for the Service"
        },
        "rates": {
          "description": "List of available rates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceRateBody"
          }
        },
        "service_id": {
          "type": "integer",
          "description": "Service identifier"
        },
        "service_class": {
          "type": "string",
          "description": "Class of the service type",
          "enum": [
            "physical",
            "digital"
          ],
          "example": "digital"
        },
        "service_type": {
          "type": "string",
          "description": "Type of service"
        },
        "short_title": {
          "type": "string",
          "description": "Short title"
        },
        "sort_order": {
          "type": "integer",
          "description": "Expected order of appearance in lists"
        },
        "updated_at": {
          "description": "Date and time the centre service was last updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "url": {
          "type": "string",
          "description": "External URL"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceType": {
      "type": "object",
      "required": [
        "_links",
        "country",
        "name",
        "service_class",
        "service_type_id",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/serviceTypeLinks"
        },
        "country": {
          "type": "string",
          "description": "Country in which the service type is available",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ]
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the service type was marked as deleted",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "type": "string",
          "description": "Service type name"
        },
        "service_class": {
          "type": "string",
          "description": "Class of the service type",
          "enum": [
            "physical",
            "digital"
          ],
          "example": "digital"
        },
        "service_type_id": {
          "type": "integer",
          "description": "Service type identifier"
        },
        "updated_at": {
          "description": "Date and time the service type was last updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceLinks": {
      "type": "object",
      "required": [
        "self",
        "image",
        "centre"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this service",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "Link to image",
          "$ref": "#/definitions/genericLink"
        },
        "centre": {
          "description": "Canonical link to the centre",
          "$ref": "#/definitions/centreLink"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this service type",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "service422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/service422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "service422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "active": {
          "$ref": "#/definitions/validationError"
        },
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "description": {
          "$ref": "#/definitions/validationError"
        },
        "email": {
          "$ref": "#/definitions/validationError"
        },
        "image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "long_title": {
          "$ref": "#/definitions/validationError"
        },
        "phone_number": {
          "$ref": "#/definitions/validationError"
        },
        "rates": {
          "$ref": "#/definitions/validationError"
        },
        "service_type": {
          "$ref": "#/definitions/validationError"
        },
        "short_title": {
          "$ref": "#/definitions/validationError"
        },
        "sort_order": {
          "$ref": "#/definitions/validationError"
        },
        "url": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceType422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/serviceType422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceType422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "country": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "service_class": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceCreateBody": {
      "type": "object",
      "description": "Service create parameters in message body",
      "required": [
        "centre_id",
        "service_type"
      ],
      "additionalProperties": false,
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the service is currently available"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre this service is available in"
        },
        "description": {
          "type": "string",
          "description": "Full description of the service"
        },
        "email": {
          "type": "string",
          "description": "Email for the service"
        },
        "hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceHourBody"
          }
        },
        "image_ref": {
          "type": "string",
          "description": "Image file name"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceLocationBody"
          }
        },
        "long_title": {
          "type": "string",
          "description": "Long title for the service"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number for the service"
        },
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceRateBody"
          }
        },
        "service_type": {
          "type": "string",
          "description": "Type of service"
        },
        "short_title": {
          "type": "string",
          "description": "Short title for the service"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which the service should appear in lists"
        },
        "url": {
          "type": "string",
          "description": "URL for the service"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceUpdateBody": {
      "type": "object",
      "description": "Service update parameters in message body",
      "additionalProperties": false,
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the service is currently available"
        },
        "centre_id": {
          "type": "string",
          "description": "Centre this service is available in"
        },
        "description": {
          "type": "string",
          "description": "Full description of the service"
        },
        "email": {
          "type": "string",
          "description": "Email for the service"
        },
        "hours": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceHourBody"
          }
        },
        "image_ref": {
          "type": "string",
          "description": "Image file name"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceLocationBody"
          }
        },
        "long_title": {
          "type": "string",
          "description": "Long title for the service"
        },
        "phone_number": {
          "type": "string",
          "description": "Phone number for the service"
        },
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/serviceRateBody"
          }
        },
        "service_type": {
          "type": "string",
          "description": "Type of service"
        },
        "short_title": {
          "type": "string",
          "description": "Short title for the service"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which the service should appear in lists"
        },
        "url": {
          "type": "string",
          "description": "URL for the service"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceRateBody": {
      "type": "object",
      "description": "Service rates",
      "additionalProperties": false,
      "properties": {
        "label": {
          "type": "string",
          "description": "Name of this specific rate"
        },
        "name": {
          "type": "string",
          "description": "Type of rate"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this rate should be displayed"
        },
        "value": {
          "type": "string",
          "description": "The value of the rate"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceLocationBody": {
      "type": "object",
      "description": "Service locations",
      "additionalProperties": false,
      "properties": {
        "label": {
          "type": "string",
          "description": "Name of this specific location"
        },
        "name": {
          "type": "string",
          "description": "Type of location"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this location should be displayed"
        },
        "value": {
          "type": "string",
          "description": "The value of the location"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceHourBody": {
      "type": "object",
      "description": "Service opening hours",
      "additionalProperties": false,
      "properties": {
        "label": {
          "type": "string",
          "description": "Name of this specific hour"
        },
        "name": {
          "type": "string",
          "description": "Type of hour"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order in which this hour should be displayed"
        },
        "value": {
          "type": "string",
          "description": "The value of the hour"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeCreateBody": {
      "type": "object",
      "required": [
        "country",
        "name",
        "service_class"
      ],
      "additionalProperties": false,
      "properties": {
        "country": {
          "type": "string",
          "description": "Country where the service type is available",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ],
          "example": "au"
        },
        "name": {
          "type": "string",
          "description": "Name of service type",
          "example": "car_wash"
        },
        "service_class": {
          "type": "string",
          "description": "Class of the service type",
          "enum": [
            "physical",
            "digital"
          ],
          "example": "digital"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "serviceTypeUpdateBody": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "country": {
          "type": "string",
          "description": "Country where the service type is available",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ],
          "example": "au"
        },
        "name": {
          "type": "string",
          "description": "Name of service type",
          "example": "car_wash"
        },
        "service_class": {
          "type": "string",
          "description": "Class of the service type",
          "enum": [
            "physical",
            "digital"
          ],
          "example": "digital"
        }
      },
      "x-services": [
        "centre_directory"
      ]
    },
    "curationInstance": {
      "type": "object",
      "description": "Information about a curation",
      "required": [
        "_embedded",
        "_links",
        "category_ids",
        "product_category_ids",
        "centre_ids",
        "code",
        "curation_id",
        "description",
        "ends_at",
        "featured",
        "name",
        "product_ids",
        "seo_title",
        "starts_at",
        "state",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_embedded": {
          "$ref": "#/definitions/embeddedCurations"
        },
        "_links": {
          "$ref": "#/definitions/curationLinks"
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of category identifiers"
        },
        "product_category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of product category identifiers"
        },
        "centre_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of centres this curation is available for"
        },
        "code": {
          "type": "string",
          "description": "Curation code",
          "example": "my-curation"
        },
        "country": {
          "type": "string",
          "description": "Country code. Lowercase two-character code for country.",
          "minLength": 2,
          "maxLength": 2,
          "x-wf-example": "us",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ]
        },
        "curation_id": {
          "type": "integer",
          "description": "Auto generated identifier"
        },
        "description": {
          "type": "string",
          "description": "Description of the curation"
        },
        "ends_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this curation expires",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Curation name"
        },
        "product_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of product identifiers in this curation"
        },
        "seo_title": {
          "type": "string",
          "description": "SEO title"
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the curation is available",
          "example": "2018-03-21T21:43:56Z"
        },
        "state": {
          "type": "string",
          "description": "State of curation",
          "example": "live"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last time this curation was updated",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationListInstance": {
      "type": "object",
      "description": "Information about a curation",
      "required": [
        "_links",
        "category_ids",
        "product_category_ids",
        "centre_ids",
        "code",
        "curation_id",
        "description",
        "ends_at",
        "featured",
        "name",
        "product_ids",
        "seo_title",
        "starts_at",
        "state",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/curationLinks"
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of category identifiers"
        },
        "product_category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "List of product category identifiers"
        },
        "centre_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of centres this curation is available for"
        },
        "code": {
          "type": "string",
          "description": "Curation code",
          "example": "my-curation"
        },
        "curation_id": {
          "type": "integer",
          "description": "Auto generated identifier"
        },
        "description": {
          "type": "string",
          "description": "Description of the curation"
        },
        "ends_at": {
          "type": "string",
          "format": "date-time",
          "description": "When this curation expires",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Curation name"
        },
        "product_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of product identifiers in this curation"
        },
        "seo_title": {
          "type": "string",
          "description": "SEO title"
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the curation is available",
          "example": "2018-03-21T21:43:56Z"
        },
        "state": {
          "type": "string",
          "description": "State of curation",
          "example": "live"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The last time this curation was updated",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCurations": {
      "type": "object",
      "description": "Embedded curation",
      "required": [
        "curations"
      ],
      "additionalProperties": false,
      "properties": {
        "curations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/embeddedCuration"
          }
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCuration": {
      "type": "object",
      "description": "Curations embedded within a parent",
      "required": [
        "_links",
        "code",
        "curation_id",
        "description",
        "name",
        "relationship"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/embeddedCurationLinks"
        },
        "code": {
          "type": "string",
          "description": "Curation code"
        },
        "curation_id": {
          "type": "integer",
          "description": "Auto generated identifier"
        },
        "description": {
          "type": "string",
          "description": "Description of curation"
        },
        "name": {
          "type": "string",
          "description": "Curation name"
        },
        "relationship": {
          "type": "string",
          "description": "Relationship to parent curation"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationLinks": {
      "type": "object",
      "required": [
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "Link to the image associated with this curation",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical URL for this curation",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "embeddedCurationLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical URL for this curation",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationCreateResponse": {
      "type": "object",
      "description": "Information about the new curation",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/curationInstance"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationCreateBody": {
      "type": "object",
      "description": "Payload data for creating or updating a curation",
      "required": [
        "country",
        "ends_at",
        "name",
        "starts_at"
      ],
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "Code of new curation",
          "type": "string",
          "example": "my-curation"
        },
        "description": {
          "description": "Description of new curation",
          "type": "string",
          "example": "Description of my new curation"
        },
        "country": {
          "type": "string",
          "description": "Country code. Lowercase two-character code for country.",
          "x-wf-example": "us",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ]
        },
        "ends_at": {
          "description": "Availability of new curation (finish)",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "image_ref": {
          "description": "Image ref of new curation",
          "type": "string"
        },
        "name": {
          "description": "Curation name",
          "type": "string",
          "example": "My New Curation"
        },
        "seo_title": {
          "description": "SEO title of new curation",
          "type": "string"
        },
        "starts_at": {
          "description": "Availability of new curation (start)",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "state": {
          "description": "State of new curation",
          "type": "string",
          "example": "live"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationUpdateBody": {
      "type": "object",
      "description": "Payload data for creating or updating a curation",
      "additionalProperties": false,
      "properties": {
        "code": {
          "description": "Code of curation",
          "type": "string",
          "example": "my-curation"
        },
        "country": {
          "type": "string",
          "description": "Country code. Lowercase two-character code for country.",
          "x-wf-example": "us",
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ]
        },
        "description": {
          "description": "Description of curation",
          "type": "string",
          "example": "Description of my curation"
        },
        "ends_at": {
          "description": "Availability of curation (finish)",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured",
          "type": "boolean"
        },
        "image_ref": {
          "description": "Image ref of curation",
          "type": "string"
        },
        "name": {
          "description": "Curation name",
          "type": "string",
          "example": "My New Curation"
        },
        "seo_title": {
          "description": "SEO title of curation",
          "type": "string"
        },
        "starts_at": {
          "description": "Availability of curation (start)",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "state": {
          "description": "State of curation",
          "type": "string",
          "example": "live"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationsListResponse": {
      "type": "object",
      "description": "List of curations",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/curationListInstance"
          }
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curationResponse": {
      "type": "object",
      "description": "Information for a specific curation",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/curationInstance"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curation422Response": {
      "type": "object",
      "description": "An HTTP-422 response from the server",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/curation422Error"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "curation422Error": {
      "type": "object",
      "description": "List of errors returned while processing the request",
      "additionalProperties": false,
      "properties": {
        "banner_wide_image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "banner_narrow_image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Errors with `category_ids` attribute"
        },
        "product_category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Errors with `product_category_ids` attribute"
        },
        "centre_ids": {
          "$ref": "#/definitions/validationError"
        },
        "code": {
          "$ref": "#/definitions/validationError"
        },
        "deleted_at": {
          "$ref": "#/definitions/validationError"
        },
        "ends_at": {
          "$ref": "#/definitions/validationError"
        },
        "image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "state": {
          "$ref": "#/definitions/validationError"
        },
        "product_ids": {
          "$ref": "#/definitions/validationError"
        },
        "seo_title": {
          "$ref": "#/definitions/validationError"
        },
        "seo_description": {
          "$ref": "#/definitions/validationError"
        },
        "starts_at": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "collection"
      ]
    },
    "productListResponse": {
      "type": "object",
      "description": "List of products",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "syndicatedProductListResponse": {
      "type": "object",
      "description": "List of syndicated products",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "productResponse": {
      "type": "object",
      "description": "Information about a specific product",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/product"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "syndicatedProductResponse": {
      "type": "object",
      "description": "Information about a specific syndicated product",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/product"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "retailerAffiliateField": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of affiliate field",
          "type": "string"
        },
        "value": {
          "description": "Value of affiliate field",
          "type": "string"
        }
      },
      "x-services": [
        "consumption",
        "store",
        "recommendation"
      ]
    },
    "productLinks": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "productRetailer": {
      "type": "object",
      "description": "Information about the product's retailer",
      "additionalProperties": false,
      "required": [
        "affiliate_fields",
        "country",
        "features",
        "name",
        "retailer_code"
      ],
      "properties": {
        "affiliate_fields": {
          "description": "List of affiliate fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerAffiliateField"
          }
        },
        "country": {
          "type": "string",
          "description": "Retailer country short code",
          "example": "au"
        },
        "features": {
          "description": "List of features the retailer has. If 'products' is present the retailer has products on the website. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "products",
              "can_syndicate"
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Retailer name"
        },
        "retailer_code": {
          "type": "string",
          "description": "Retailer code"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "retailerStore": {
      "type": "object",
      "description": "A store associated with the product's retailer",
      "additionalProperties": false,
      "required": [
        "centre_id",
        "name",
        "store_id"
      ],
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre ID"
        },
        "name": {
          "type": "string",
          "description": "Store Name"
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "retailerCentre": {
      "type": "object",
      "description": "A centre associated with the product",
      "additionalProperties": false,
      "required": [
        "centre_id",
        "name"
      ],
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre ID"
        },
        "name": {
          "type": "string",
          "description": "Centre name"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "product": {
      "type": "object",
      "description": "Product",
      "additionalProperties": false,
      "properties": {
        "_links": {
          "description": "URI to obtain this record",
          "$ref": "#/definitions/productLinks"
        },
        "brand": {
          "type": "string",
          "description": "Product Brand"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "category_paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "centres": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerCentre"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was created"
        },
        "detailed_description": {
          "type": "string",
          "description": "Detailed product description"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was disabled"
        },
        "is_featured": {
          "type": "boolean",
          "description": "Product featured flag"
        },
        "is_discounted": {
          "type": "boolean",
          "description": "Indicates that at least one of the variants is discounted"
        },
        "item_code": {
          "type": "string",
          "description": "Retailer product id"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "name_slug": {
          "type": "string",
          "description": "Product name, transliterated and formatted to ASCII"
        },
        "price": {
          "type": "integer",
          "description": "RRP for the most expensive variant in cents"
        },
        "primary_category": {
          "type": "string",
          "description": "Product primary category"
        },
        "primary_category_id": {
          "type": "integer",
          "description": "Product primary category id"
        },
        "product_id": {
          "type": "string",
          "description": "Auto generated ID"
        },
        "retailer": {
          "description": "Information about the product's retailer",
          "$ref": "#/definitions/productRetailer"
        },
        "retailer_code": {
          "type": "string",
          "description": "Westfield retailer code"
        },
        "sale_price": {
          "type": "integer",
          "description": "Sale price for the most expensive variant in cents"
        },
        "short_description": {
          "type": "string",
          "description": "Short product description"
        },
        "stores": {
          "description": "All the stores associated with the product's retailer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerStore"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date product was updated"
        },
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productVariant"
          }
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "productVariant": {
      "type": "object",
      "description": "Product Variant",
      "additionalProperties": false,
      "properties": {
        "attributes": {
          "description": "Product Variant Attributes",
          "$ref": "#/definitions/variantAttributes"
        },
        "description": {
          "type": "string",
          "description": "Product description"
        },
        "ean": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_default": {
          "type": "boolean",
          "description": "Default flag"
        },
        "price": {
          "description": "Product Variant Price",
          "$ref": "#/definitions/variantPrice"
        },
        "retailer_attributes": {
          "description": "Product Retailer Attributes",
          "$ref": "#/definitions/retailerAttributes"
        },
        "retailer_product_url": {
          "type": "string",
          "description": "Product variant retailer url"
        },
        "sku": {
          "type": "string",
          "description": "Product variant id"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "variantPrice": {
      "type": "object",
      "description": "Product Variant Price",
      "additionalProperties": false,
      "properties": {
        "amount": {
          "type": "integer",
          "description": "Variant amount, in cents"
        },
        "is_discounted": {
          "type": "boolean",
          "description": "Discounted flag"
        },
        "rrp": {
          "type": "integer",
          "description": "Variant rrp, in cents"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "variantAttributes": {
      "type": "object",
      "description": "Product Variant Attributes",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "Westfield product color"
        },
        "size": {
          "type": "string",
          "description": "Westfield product size"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "retailerAttributes": {
      "type": "object",
      "description": "Product Retailer Attributes",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "Retailer product color"
        },
        "size": {
          "type": "string",
          "description": "Retailer product size"
        }
      },
      "x-services": [
        "consumption",
        "recommendation"
      ]
    },
    "producthttp404Response": {
      "type": "object",
      "description": "Not Found.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of products not found.",
          "$ref": "#/definitions/producthttp404Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "syndicatedProducthttp404Response": {
      "type": "object",
      "description": "Not Found.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "Empty object. No data is returned.",
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "description": "List of products not found.",
          "$ref": "#/definitions/producthttp404Error"
        },
        "meta": {
          "description": "Metadata about the response.",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "producthttp404Error": {
      "type": "object",
      "description": "List of products not found.",
      "required": [
        "product"
      ],
      "additionalProperties": false,
      "properties": {
        "product": {
          "description": "List of products not found.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "consumption"
      ]
    },
    "dealStoreLocation": {
      "type": "object",
      "description": "Location identifiers and metadata.",
      "required": [
        "disabled_at",
        "enabled_at",
        "level_description",
        "level_id",
        "level_name",
        "location_id",
        "name",
        "primary",
        "published_at"
      ],
      "additionalProperties": false,
      "properties": {
        "disabled_at": {
          "description": "Date-time location is disabled.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "enabled_at": {
          "description": "Date-time location is enabled.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "level_description": {
          "type": "string",
          "description": "Floor description."
        },
        "level_id": {
          "type": "string",
          "description": "Floor identifier."
        },
        "level_name": {
          "type": "string",
          "description": "Floor name.",
          "example": "Floor 1"
        },
        "location_id": {
          "type": "string",
          "description": "Location identifier."
        },
        "name": {
          "type": "string",
          "description": "Location description.",
          "example": "Next to Bloomingdales"
        },
        "primary": {
          "type": "boolean",
          "description": "Primary level."
        },
        "published_at": {
          "description": "Date-time location is published.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealsListResponse": {
      "type": "object",
      "description": "List deals response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dealInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealResponse": {
      "type": "object",
      "description": "Individual deal response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/dealInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealInstance": {
      "type": "object",
      "description": "Deal",
      "required": [
        "_links",
        "category_ids",
        "deal_id",
        "description",
        "ends_at",
        "featured",
        "published_at",
        "starts_at",
        "state",
        "state_events",
        "stores",
        "subtitle",
        "terms_and_conditions",
        "title",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/dealLinks"
        },
        "category_ids": {
          "description": "Category identifiers. Array of identifiers to retrieve categories this deal is related to.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "deal_id": {
          "type": "integer",
          "description": "Deal identifier. Identifier to retrieve this deal."
        },
        "deleted_at": {
          "type": "string",
          "description": "Date-time the deal was marked as deleted.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "description": {
          "type": "string",
          "description": "Description of deal."
        },
        "ends_at": {
          "type": "string",
          "description": "Date-time the deal ends.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "type": "boolean",
          "description": "Deal is featured (true) or not featured (false)."
        },
        "published_at": {
          "type": "string",
          "description": "Date-time the deal is published.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "starts_at": {
          "type": "string",
          "description": "Date-time the deal starts.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "state": {
          "type": "string",
          "description": "Current state of the deal. Applied broadly when stores are in multiple time zones."
        },
        "state_events": {
          "type": "array",
          "description": "Events available from the current state to transition to a new state.",
          "items": {
            "type": "string",
            "enum": [
              "submit",
              "approve",
              "reject",
              "withdraw"
            ]
          }
        },
        "stores": {
          "type": "array",
          "description": "Deal stores. Array of stores where the deal is available.",
          "items": {
            "$ref": "#/definitions/dealStore"
          }
        },
        "subtitle": {
          "type": "string",
          "description": "Deal subtitle."
        },
        "terms_and_conditions": {
          "type": "string",
          "description": "Terms and Conditions."
        },
        "title": {
          "type": "string",
          "description": "Deal title."
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the deal was last updated.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealRetailerLink": {
      "description": "Retailer name, URL and identifier.",
      "type": "object",
      "required": [
        "href",
        "name",
        "retailer_id"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "description": "Retailer URL.",
          "type": "string"
        },
        "name": {
          "description": "Retailer name.",
          "type": "string"
        },
        "retailer_id": {
          "description": "Retailer identifier.",
          "type": "integer"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealLinks": {
      "type": "object",
      "required": [
        "image",
        "retailer_logo",
        "retailer"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "Link to the deal image.",
          "$ref": "#/definitions/genericLink"
        },
        "retailer": {
          "description": "Retailer name, URL and identifier.",
          "$ref": "#/definitions/dealRetailerLink"
        },
        "retailer_logo": {
          "description": "Link to the retailer logo.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealStore": {
      "type": "object",
      "description": "Store that a deal is related to.",
      "required": [
        "centre_id",
        "locations",
        "store_id"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this deal is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']"
        },
        "locations": {
          "description": "List of store locations and meta data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dealStoreLocation"
          }
        },
        "store_id": {
          "type": "integer",
          "description": "Store identifier. Identifier to retrieve the store this deal is related to."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "commentListResponse": {
      "type": "object",
      "description": "List of comments for a deal.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commentInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "commentResponse": {
      "type": "object",
      "description": "Individual deal comment.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/commentInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "commentInstance": {
      "type": "object",
      "description": "Comment",
      "required": [
        "comment_id",
        "created_at",
        "deal_id",
        "text",
        "updated_at",
        "user_id"
      ],
      "additionalProperties": false,
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "Comment identifier. Identifier to retrieve this comment."
        },
        "created_at": {
          "type": "string",
          "description": "Created at. Date-time that the comment was created.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "deal_id": {
          "type": "integer",
          "description": "Deal identifier. Identifier to retrieve the deal related to this comment."
        },
        "deleted_at": {
          "type": "string",
          "description": "Date-time that the comment was marked as deleted.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "text": {
          "description": "Content of comment.",
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the comment was last updated.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "user_id": {
          "type": "integer",
          "description": "User identifier."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "deal422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/deal422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "deal422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "ends_at": {
          "$ref": "#/definitions/validationError"
        },
        "published_at": {
          "$ref": "#/definitions/validationError"
        },
        "starts_at": {
          "$ref": "#/definitions/validationError"
        },
        "stores": {
          "$ref": "#/definitions/validationError"
        },
        "terms_and_conditions": {
          "$ref": "#/definitions/validationError"
        },
        "title": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealCreateBody": {
      "type": "object",
      "description": "Data to create a deal.",
      "required": [
        "ends_at",
        "published_at",
        "title",
        "starts_at",
        "stores",
        "terms_and_conditions"
      ],
      "additionalProperties": false,
      "properties": {
        "campaign_ids": {
          "description": "Campaign identifiers. List of identifiers to retrieve the campaigns related to this deal.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "category_ids": {
          "description": "Category identifiers. List of identifiers to retrieve the categories related to this deal.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "comments": {
          "$ref": "#/definitions/dealComment"
        },
        "description": {
          "description": "Description of deal.",
          "type": "string"
        },
        "ends_at": {
          "description": "Date-time that the deal ends.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured deals. Deal is featured (true) or not featured (false) deals. Default is false.",
          "type": "boolean"
        },
        "image_ref": {
          "description": "Image reference use internally to retrieve the related image file.",
          "type": "string"
        },
        "published_at": {
          "description": "Date-time the deal is published.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "starts_at": {
          "description": "Date-time the deal starts.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "state_event": {
          "description": "Event to set the state of the deal.",
          "type": "string",
          "enum": [
            "submit",
            "approve",
            "reject",
            "withdraw"
          ]
        },
        "stores": {
          "$ref": "#/definitions/dealStores"
        },
        "subtitle": {
          "description": "Subtitle of the deal.",
          "type": "string"
        },
        "terms_and_conditions": {
          "description": "Terms and conditions of the deal.",
          "type": "string"
        },
        "title": {
          "description": "Title of the deal.",
          "type": "string",
          "maxLength": 100
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealComment": {
      "type": "object",
      "description": "Comment related to a deal.",
      "additionalProperties": false,
      "properties": {
        "text": {
          "type": "string",
          "description": "Content of comment."
        },
        "user_id": {
          "type": "integer",
          "description": "User identifier."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealStores": {
      "type": "object",
      "description": "Stores related to a deal.",
      "required": [
        "centre_id",
        "retailer_id",
        "store_id"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this store is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']"
        },
        "retailer_id": {
          "type": "integer",
          "description": "Retailer identifier. Identifier to retrieve the retailer this store is related to."
        },
        "store_id": {
          "type": "integer",
          "description": "Store identifier. Identifier to retrieve the store the deal is related to."
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "dealUpdateBody": {
      "type": "object",
      "description": "Data to update a deal.",
      "additionalProperties": false,
      "properties": {
        "campaign_ids": {
          "description": "Campaign identifiers. List of identifiers to retrieve the campaigns related to this deal.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "category_ids": {
          "description": "Category identifiers. List of identifiers to retrieve the categories related to this deal.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "comments": {
          "$ref": "#/definitions/dealComment"
        },
        "description": {
          "description": "Description of deal.",
          "type": "string"
        },
        "ends_at": {
          "description": "Date-time that the deal ends.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "featured": {
          "description": "Featured deals. Deal is featured (true) or not featured (false) deals. Default is false.",
          "type": "boolean"
        },
        "image_ref": {
          "description": "Image reference use internally to retrieve the related image file.",
          "type": "string"
        },
        "published_at": {
          "description": "Date-time the deal is published.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "starts_at": {
          "description": "Date-time the deal starts.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "state_event": {
          "description": "Event to set the state of the deal.",
          "type": "string",
          "enum": [
            "submit",
            "approve",
            "reject",
            "withdraw"
          ]
        },
        "stores": {
          "$ref": "#/definitions/dealStores"
        },
        "subtitle": {
          "description": "Subtitle of the deal.",
          "type": "string"
        },
        "terms_and_conditions": {
          "description": "Deal terms and conditions.",
          "type": "string"
        },
        "title": {
          "description": "Title of the deal.",
          "type": "string",
          "maxLength": 100
        }
      },
      "x-services": [
        "deal"
      ]
    },
    "eventsListResponse": {
      "type": "object",
      "description": "List of events",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventResponse": {
      "type": "object",
      "description": "Information about a specific event",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/eventInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventCreateBody": {
      "type": "object",
      "description": "Parameters for creating an event",
      "required": [
        "centre_id",
        "image_ref",
        "name",
        "occurrences",
        "published_at"
      ],
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "description": "Identifiers of categories the event belongs to",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre the event belongs to"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Ending date and time of the last occurrence",
          "example": "2018-03-21T12:34:56Z"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename of event location"
        },
        "location": {
          "type": "string",
          "description": "Description of event location"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurrence"
          },
          "description": "One or more occurrences of event"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date-time the event was published",
          "example": "2018-03-21T12:34:56Z"
        },
        "retailers": {
          "description": "Retailers and stores associated with the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventRetailer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventRetailer": {
      "type": "object",
      "required": [
        "retailer_code",
        "retailer_id",
        "store_ids"
      ],
      "additionalProperties": false,
      "properties": {
        "retailer_code": {
          "type": "string",
          "description": "Retailer code of the retailer associated with the event"
        },
        "retailer_id": {
          "type": "integer",
          "description": "ID of the retailer associated with the event"
        },
        "store_ids": {
          "description": "IDs of stores for the retailer which is associated with the event",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventUpdateBody": {
      "type": "object",
      "description": "Parameters for updating an event",
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "description": "Identifiers of categories the event belongs to",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre the event belongs to"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Ending date and time of the last occurrence",
          "example": "2018-03-21T12:34:56Z"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "image_ref": {
          "type": "string",
          "description": "Image filename of event location"
        },
        "location": {
          "type": "string",
          "description": "Description of event location"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurrence"
          },
          "description": "One or more occurrences of event"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date-time the event was published",
          "example": "2018-03-21T12:34:56Z"
        },
        "retailers": {
          "description": "Retailers and stores associated with the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventRetailer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "occurrence": {
      "type": "object",
      "description": "Range of times when the event occurs",
      "required": [
        "finishes_at",
        "starts_at"
      ],
      "additionalProperties": false,
      "properties": {
        "finishes_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the occurrence of the event finishes",
          "example": "2018-03-21T12:34:56Z"
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the occurrence of the event starts",
          "example": "2018-03-21T12:34:56Z"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventInstance": {
      "type": "object",
      "required": [
        "_embedded",
        "_links",
        "category_ids",
        "centre_id",
        "description",
        "disabled_at",
        "enabled_at",
        "event_id",
        "external_buy_url",
        "external_url",
        "external_url_description",
        "featured",
        "locations",
        "name",
        "occurrences",
        "published_at",
        "retailers",
        "time_zone",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_embedded": {
          "$ref": "#/definitions/eventEmbedded"
        },
        "_links": {
          "$ref": "#/definitions/eventLinks"
        },
        "category_ids": {
          "description": "Identifiers of categories the event belongs to",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Identifier of the centre the event belongs to"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time that the event was marked as deleted.",
          "example": "2018-03-21T12:34:56Z"
        },
        "description": {
          "type": "string",
          "description": "Event description"
        },
        "disabled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Ending date and time of the last occurrence",
          "example": "2018-03-21T12:34:56Z"
        },
        "enabled_at": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "description": "Starting date and time of the first occurrence",
          "example": "2018-03-21T12:34:56Z"
        },
        "event_id": {
          "type": "integer",
          "description": "Event identifier"
        },
        "external_buy_url": {
          "type": "string",
          "description": "External URL to buy tickets to event"
        },
        "external_url": {
          "type": "string",
          "description": "External URL for event information"
        },
        "external_url_description": {
          "type": "string",
          "description": "External URL information description"
        },
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "locations": {
          "type": "array",
          "description": "List of jibestream locations and meta data",
          "items": {
            "$ref": "#/definitions/location"
          }
        },
        "name": {
          "type": "string",
          "description": "Event name"
        },
        "occurrences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurrence"
          },
          "description": "One or more occurrences of event"
        },
        "published_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date-time the event was published",
          "example": "2018-03-21T12:34:56Z"
        },
        "retailers": {
          "description": "Retailers and stores associated with the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventRetailer"
          }
        },
        "time_zone": {
          "type": "string",
          "description": "The IANA timezone code for the event."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date the event was last updated",
          "example": "2018-03-21T12:34:56Z"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventEmbedded": {
      "type": "object",
      "required": [
        "retailers"
      ],
      "additionalProperties": false,
      "properties": {
        "retailers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/embeddedRetailer"
          }
        }
      },
      "x-services": [
        "event"
      ]
    },
    "embeddedRetailer": {
      "type": "object",
      "required": [
        "_links"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/retailerLinks"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "eventLinks": {
      "type": "object",
      "required": [
        "centre",
        "image",
        "retailers",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "centre": {
          "description": "Canonical link to the event's centre",
          "$ref": "#/definitions/centreLink"
        },
        "image": {
          "description": "Canonical link to the event image",
          "$ref": "#/definitions/genericLink"
        },
        "retailers": {
          "description": "Canonical links to retailers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/genericLink"
          }
        },
        "self": {
          "description": "Canonical link to this event",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "event422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/event422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "event422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "description": {
          "$ref": "#/definitions/validationError"
        },
        "image_ref": {
          "$ref": "#/definitions/validationError"
        },
        "featured": {
          "$ref": "#/definitions/validationError"
        },
        "external_url": {
          "$ref": "#/definitions/validationError"
        },
        "external_url_description": {
          "$ref": "#/definitions/validationError"
        },
        "external_buy_url": {
          "$ref": "#/definitions/validationError"
        },
        "disabled_at": {
          "$ref": "#/definitions/validationError"
        },
        "published_at": {
          "$ref": "#/definitions/validationError"
        },
        "occurrences": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "event"
      ]
    },
    "moviesListResponse": {
      "type": "object",
      "description": "List of movies",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/movieListInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieResponse": {
      "type": "object",
      "description": "Information about a specific movie",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/movieInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieInstance": {
      "type": "object",
      "required": [
        "_links",
        "classification",
        "classification_body",
        "classification_detail",
        "directors",
        "genres",
        "movie_id",
        "run_time",
        "sessions",
        "source_attribution_text",
        "source_attribution_uri",
        "synopsis",
        "time_zone",
        "title",
        "top_cast",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/movieLinks"
        },
        "classification": {
          "$ref": "#/definitions/movieClassification"
        },
        "classification_body": {
          "type": "string",
          "description": "Organisation which set the classification"
        },
        "classification_detail": {
          "type": "string",
          "description": "Information about the classification"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie was marked as deleted",
          "example": "2018-03-21T21:43:56Z"
        },
        "directors": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Full name of one of the movie directors"
          }
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Movie genres"
        },
        "movie_id": {
          "type": "integer",
          "description": "Movie ID"
        },
        "run_time": {
          "type": "integer",
          "description": "Runtime of movie (in minutes)"
        },
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/movieSession"
          }
        },
        "source_attribution_text": {
          "type": "string",
          "description": "The text for the source attribution"
        },
        "source_attribution_uri": {
          "type": "string",
          "description": "The URI for the source attribution"
        },
        "synopsis": {
          "type": "string",
          "description": "Movie synopsis"
        },
        "time_zone": {
          "type": "string",
          "description": "The name of the movie session's time zone (e.g. 'US/Pacific')"
        },
        "title": {
          "type": "string",
          "description": "Movie title"
        },
        "top_cast": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Top cast members"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie information was last updated",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieListInstance": {
      "type": "object",
      "required": [
        "_links",
        "classification",
        "directors",
        "genres",
        "movie_id",
        "sessions",
        "source_attribution_text",
        "source_attribution_uri",
        "synopsis",
        "time_zone",
        "title",
        "top_cast",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/movieListLinks"
        },
        "classification": {
          "$ref": "#/definitions/movieClassification"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie was marked as deleted",
          "example": "2018-03-21T21:43:56Z"
        },
        "directors": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Full name of one of the movie directors"
          }
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Movie genres"
        },
        "movie_id": {
          "type": "integer",
          "description": "Movie ID"
        },
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/movieSession"
          }
        },
        "source_attribution_text": {
          "type": "string",
          "description": "The text for the source attribution"
        },
        "source_attribution_uri": {
          "type": "string",
          "description": "The URI for the source attribution"
        },
        "synopsis": {
          "type": "string",
          "description": "Movie synopsis"
        },
        "time_zone": {
          "type": "string",
          "description": "The name of the movie session's time zone (e.g. 'US/Pacific')"
        },
        "title": {
          "type": "string",
          "description": "Movie title"
        },
        "top_cast": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Top cast members"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the movie information was last updated",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieClassification": {
      "type": "object",
      "description": "Movie classification information",
      "required": [
        "body",
        "detail",
        "rating"
      ],
      "additionalProperties": false,
      "properties": {
        "body": {
          "type": "string",
          "description": "Organisation who rated the movie"
        },
        "detail": {
          "type": "string",
          "description": "Information as to why the movie has the rating it does",
          "example": "moderate fantasy violence, threat"
        },
        "rating": {
          "type": "string",
          "description": "Movie rating code",
          "example": "M"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieSession": {
      "type": "object",
      "required": [
        "_links",
        "session_type",
        "start_time",
        "store_id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/movieSessionLinks"
        },
        "session_type": {
          "type": "string",
          "description": "Type of movie session"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the movie starts in UTC time (e.g. '2015-01-15T06:15:00.000Z')",
          "example": "2018-03-21T21:43:56Z"
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID for the movie theatre where the movie is being shown"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieSessionLinks": {
      "type": "object",
      "required": [
        "booking_url",
        "centre",
        "store"
      ],
      "additionalProperties": false,
      "properties": {
        "booking_url": {
          "$ref": "#/definitions/genericLink",
          "description": "URL for making a booking for this session"
        },
        "centre": {
          "description": "URL for the centre this session belongs to",
          "$ref": "#/definitions/centreLink"
        },
        "store": {
          "$ref": "#/definitions/genericLink",
          "description": "URL for the store this session will be shown at"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieLinks": {
      "type": "object",
      "required": [
        "booking_url",
        "image",
        "self",
        "trailers",
        "trailer_high_res",
        "trailer_low_res"
      ],
      "additionalProperties": false,
      "properties": {
        "booking_url": {
          "description": "Link to purchase tickets for this movie",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "Cloudinary image details",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical link to this movie",
          "$ref": "#/definitions/genericLink"
        },
        "trailers": {
          "description": "List of trailers for this movie",
          "type": "array",
          "items": {
            "$ref": "#/definitions/trailerLink"
          }
        },
        "trailer_high_res": {
          "description": "List of trailers for this movie",
          "$ref": "#/definitions/trailerLink"
        },
        "trailer_low_res": {
          "description": "List of trailers for this movie",
          "$ref": "#/definitions/trailerLink"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "movieListLinks": {
      "type": "object",
      "required": [
        "booking_url",
        "image",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "booking_url": {
          "description": "Link to purchase tickets for this movie",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "Cloudinary image details",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "Canonical link to this movie",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "trailerLink": {
      "type": "object",
      "required": [
        "href",
        "quality"
      ],
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "URL for the trailer"
        },
        "quality": {
          "type": "string",
          "description": "Trailer quality"
        },
        "run_time": {
          "type": "integer",
          "description": "Runtime of movie (in minutes)"
        }
      },
      "x-services": [
        "movie"
      ]
    },
    "SearchMovieResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/movieListInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchCollectionResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/curationListInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchStoreResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/storeInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchEventResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/eventInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchDealResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/dealInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchNoticeResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/noticeListInstance"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchProductResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/product"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchServiceResult": {
      "type": "object",
      "required": [
        "facets",
        "hits",
        "hitsPerPage",
        "index",
        "nbHits",
        "nbPages",
        "page",
        "params",
        "processingTimeMS",
        "query"
      ],
      "properties": {
        "exhaustiveFacetsCount": {
          "type": "boolean",
          "description": "Is the facet count accurate?"
        },
        "facets": {
          "type": "object",
          "description": "The facets available to filter by"
        },
        "facets_stats": {
          "type": "object",
          "description": "statistics about facets"
        },
        "hits": {
          "type": "array",
          "description": "An array of items that match this search",
          "items": {
            "$ref": "#/definitions/service"
          }
        },
        "hitsPerPage": {
          "type": "integer",
          "description": "The number of results per page"
        },
        "index": {
          "type": "string",
          "description": "The type of results contained in the hits key"
        },
        "nbHits": {
          "type": "integer",
          "description": "Total number of results for this type"
        },
        "nbPages": {
          "type": "integer",
          "description": "How many pages there are in total"
        },
        "page": {
          "type": "integer",
          "description": "Which page this response is on"
        },
        "params": {
          "type": "string",
          "description": "The query as sent to the search backend"
        },
        "processingTimeMS": {
          "type": "integer",
          "description": "How long this spent being processed on the backend"
        },
        "query": {
          "type": "string",
          "description": "The search term queried for"
        }
      },
      "additionalProperties": false,
      "x-services": [
        "search"
      ]
    },
    "SearchServiceResponse": {
      "type": "object",
      "description": "A search-services response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchServiceResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchDealResponse": {
      "type": "object",
      "description": "A search-deals response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchDealResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchEventResponse": {
      "type": "object",
      "description": "A search-events response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchEventResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchMovieResponse": {
      "type": "object",
      "description": "A search-movies response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchMovieResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchNoticeResponse": {
      "type": "object",
      "description": "A search-notices response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchNoticeResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchProductResponse": {
      "type": "object",
      "description": "A search-products response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchProductResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchCollectionResponse": {
      "type": "object",
      "description": "A search-productcurations response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchCollectionResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "SearchStoreResponse": {
      "type": "object",
      "description": "A search-stores response",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/SearchStoreResult"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "IndividualSearchResponse": {
      "type": "object",
      "description": "A search result",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndividualSearchResult"
          }
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        }
      },
      "x-services": [
        "search"
      ]
    },
    "IndividualSearchResult": {
      "type": "object",
      "description": "A search result",
      "x-services": [
        "search"
      ]
    },
    "storeLocation": {
      "type": "object",
      "description": "Location identifiers and metadata",
      "required": [
        "disabled_at",
        "enabled_at",
        "level_description",
        "level_id",
        "level_name",
        "location_id",
        "name",
        "primary",
        "published_at"
      ],
      "properties": {
        "disabled_at": {
          "description": "Datetime location is disabled",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "enabled_at": {
          "description": "Datetime location is enabled",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "level_description": {
          "type": "string",
          "description": "Floor description"
        },
        "level_id": {
          "type": "string",
          "description": "Floor identifier"
        },
        "level_name": {
          "type": "string",
          "description": "Floor name",
          "example": "Floor 1"
        },
        "location_id": {
          "type": "string",
          "description": "Location identifier"
        },
        "name": {
          "type": "string",
          "description": "Location description",
          "example": "Next to Bloomingdales"
        },
        "primary": {
          "type": "boolean",
          "description": "Primary level"
        },
        "published_at": {
          "description": "Datetime location is published",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "LocationResponse": {
      "type": "object",
      "description": "Information about a specific store location",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/storeLocation"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "location422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "disabled_at": {
          "$ref": "#/definitions/validationError"
        },
        "enabled_at": {
          "$ref": "#/definitions/validationError"
        },
        "level_id": {
          "$ref": "#/definitions/validationError"
        },
        "level_name": {
          "$ref": "#/definitions/validationError"
        },
        "location_id": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "primary": {
          "$ref": "#/definitions/validationError"
        },
        "published_at": {
          "$ref": "#/definitions/validationError"
        },
        "store_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "location422Response": {
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/location422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerInstance": {
      "type": "object",
      "description": "A retailer that has stores in Westfield centres.",
      "required": [
        "_links",
        "affiliate_fields",
        "category_ids",
        "country",
        "email_address",
        "enabled",
        "features",
        "lease_id",
        "name",
        "product_tier",
        "retailer_code",
        "retailer_id",
        "retailer_website",
        "service_category_ids",
        "store_profile",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/retailerLinks"
        },
        "affiliate_fields": {
          "description": "List of affiliate fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerAffiliateField"
          }
        },
        "category_ids": {
          "description": "List of Category identifiers associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the retailer was marked as deleted, in `zulu-time` format",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "features": {
          "description": "List of features the retailer has. If 'products' is present the retailer has products on the website. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "products",
              "can_syndicate"
            ]
          }
        },
        "lease_id": {
          "description": "Identifier of the retailer's lease with Westfield",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "retailer_code": {
          "description": "URL-friendly code for the retailer",
          "type": "string"
        },
        "retailer_id": {
          "description": "Retailer identifier. Identifier to retrieve this retailer.",
          "type": "integer"
        },
        "retailer_website": {
          "description": "URL of the retailer's website",
          "type": "string"
        },
        "service_category_ids": {
          "description": "List of Service Category identifiers associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string",
          "maxLength": 1000
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated, in `zulu-time` format",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerCreateBody": {
      "type": "object",
      "description": "Parameters for creating a retailer",
      "required": [
        "name",
        "product_tier",
        "retailer_code"
      ],
      "properties": {
        "cam_ref": {
          "description": "Conversion tracking provider identifier",
          "type": "string"
        },
        "campaign_id": {
          "description": "ID of a Westfield campaign for the retailer",
          "type": "string"
        },
        "category_ids": {
          "description": "List of Category identifiers associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "currency_code": {
          "description": "Three letter code of the currency the retailer uses",
          "type": "string"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "features": {
          "description": "List of features the retailer has. If 'products' is present the retailer can upload products to the Westfield system. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "products",
              "can_syndicate"
            ]
          }
        },
        "enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "lease_id": {
          "description": "Identifier of the retailer's lease with Westfield",
          "type": "string"
        },
        "logo_ref": {
          "description": "Storage provider ID of the retailer's logo image",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "retailer_code": {
          "description": "Code of the retailer, generally its lowercase, dasherized name",
          "type": "string",
          "pattern": "/\\A[-0-9a-z]*\\z/"
        },
        "retailer_website": {
          "description": "URL of the retailer's website",
          "type": "string"
        },
        "service_category_ids": {
          "description": "List of Service Category identifiers associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string",
          "maxLength": 1000
        },
        "storefront_ref": {
          "description": "Storage provider ID of the image of a store front of the retailer",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerUpdateBody": {
      "type": "object",
      "description": "Parameters for updating a retailer",
      "properties": {
        "affiliate_fields": {
          "description": "List of affiliate fields for a retailer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerAffiliateField"
          }
        },
        "cam_ref": {
          "description": "Conversion tracking provider ID",
          "type": "string"
        },
        "campaign_id": {
          "description": "Identifier of a Westfield campaign for the retailer",
          "type": "string"
        },
        "category_ids": {
          "description": "List of Category IDs associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "description": "Two letter code of the country the retailer operates in",
          "type": "string"
        },
        "currency_code": {
          "description": "Three letter code of the currency the retailer uses",
          "type": "string"
        },
        "email_address": {
          "description": "E-mail address of the retailer",
          "type": "string"
        },
        "features": {
          "description": "List of features the retailer has. If 'products' is present the retailer can upload products to the Westfield system. If 'can_syndicate' is present the product data for this retailer can be redistributed by a third party.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "products",
              "can_syndicate"
            ]
          }
        },
        "enabled": {
          "description": "Flag indicating if the retailer is enabled in the Westfield system",
          "type": "boolean"
        },
        "lease_id": {
          "description": "Identifier of the retailer's lease with Westfield",
          "type": "string"
        },
        "logo_ref": {
          "description": "Storage provider ID of the retailer's logo image",
          "type": "string"
        },
        "name": {
          "description": "Name of the retailer",
          "type": "string"
        },
        "product_tier": {
          "description": "Tiers for grouping similar retailers",
          "type": "integer",
          "enum": [
            1,
            2,
            3
          ]
        },
        "retailer_website": {
          "description": "URL of the retailer's website",
          "type": "string"
        },
        "service_category_ids": {
          "description": "List of Service Category identifiers associated with the retailer",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "store_profile": {
          "description": "Long description of the retailer",
          "type": "string",
          "maxLength": 1000
        },
        "storefront_ref": {
          "description": "Storage provider ID of the image of a store front of the retailer",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailerResponse": {
      "type": "object",
      "description": "Information about a specific retailer",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/retailerInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailersListResponse": {
      "type": "object",
      "description": "List of retailers",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/retailerInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeInstance": {
      "type": "object",
      "description": "A store belonging to a retailer.",
      "required": [
        "_links",
        "category_codes",
        "category_ids",
        "centre_id",
        "description",
        "dining",
        "dining_cuisine",
        "dining_price_guide",
        "dining_vendor_id",
        "disabled_at",
        "email_address",
        "enabled",
        "enabled_at",
        "features",
        "has_deals",
        "has_events",
        "has_dining",
        "lease_number",
        "locations",
        "location_levels",
        "name",
        "phone_number",
        "retailer_code",
        "retailer_website",
        "salience",
        "service_category_ids",
        "shop_number",
        "status",
        "store_id",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/storeLinks"
        },
        "category_codes": {
          "description": "List of category codes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category_ids": {
          "description": "List of categories the store belongs to",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "Identifier of the centre where the store is located.",
          "type": "string"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the store was marked as deleted",
          "example": "2018-03-21T21:43:56Z"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining": {
          "description": "Dining information, if this store has a dining facility. Nil otherwise.",
          "$ref": "#/definitions/diningInstance"
        },
        "dining_cuisine": {
          "description": "[DEPRECATED]. Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "[DEPRECATED]. Number indicating the relative price of dining at the store",
          "type": "integer",
          "maximum": 4
        },
        "dining_vendor_id": {
          "description": "[DEPRECATED]. Dining vendor identifier if the store is a dining facility that participates in Open Dining Network; an empty string otherwise.",
          "type": "string"
        },
        "disabled_at": {
          "description": "Date the store was disabled in the Westfield system",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_at": {
          "description": "Date the store was enabled in the Westfield system",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "description": "List of features the store has. If 'foodordering' is present the store supports ordering food via the Food App. If 'products' is present the retailer has products on the website. If 'giftcards' is present the store accepts giftcards.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "cinema",
              "foodordering",
              "giftcards",
              "products"
            ]
          }
        },
        "has_deals": {
          "type": "boolean",
          "description": "Flag indicating if the store has deals associated with it"
        },
        "has_events": {
          "type": "boolean",
          "description": "Flag indicating if the store has events associated with it"
        },
        "has_dining": {
          "type": "boolean",
          "description": "[DEPRECATED]. Flag indicating if the store is a dining facility that participates in Open Dining Network."
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of Jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeLocation"
          }
        },
        "location_levels": {
          "description": "List of level names sourced form Jibestream locations",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_code": {
          "description": "Code of the retailer the store belongs to",
          "type": "string"
        },
        "retailer_website": {
          "description": "URL of the store's website",
          "type": "string"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "service_category_ids": {
          "description": "List of service categories associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "status": {
          "description": "Status details for this store.",
          "$ref": "#/definitions/statusInstance"
        },
        "store_id": {
          "description": "Auto generated identifier",
          "type": "integer"
        },
        "updated_at": {
          "description": "Date and time the retailer was last updated.",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeCreateBody": {
      "type": "object",
      "description": "Parameters for creating a store",
      "required": [
        "centre_id",
        "name",
        "phone_number",
        "retailer_id",
        "salience"
      ],
      "properties": {
        "category_ids": {
          "description": "List of Category IDs associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "Identifier of the centre where the store is located.",
          "type": "string"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining": {
          "description": "Dining information, if this store has a dining facility. Not provided otherwise.",
          "$ref": "#/definitions/diningCreateBody"
        },
        "dining_cuisine": {
          "description": "[DEPRECATED]. Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_image_ref": {
          "description": "[DEPRECATED]. Storage provider identifier of the dining image of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_menu_ref": {
          "description": "[DEPRECATED]. Storage provider identifier of the menu of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "[DEPRECATED]. Number indicating the relative price of dining at the store",
          "type": "integer",
          "maximum": 4
        },
        "dining_vendor_id": {
          "description": "[DEPRECATED]. Dining vendor identifier if the store is a dining facility that participates in Open Dining Network; an empty string otherwise.",
          "type": "string"
        },
        "disabled_at": {
          "description": "Date the store was disabled in the Westfield system",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_at": {
          "description": "Date the store was enabled in the Westfield system",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "description": "List of features the store has. If 'foodordering' is present the store supports ordering food via the Food App. If 'giftcards' is present the store accepts giftcards.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "cinema",
              "foodordering",
              "giftcards",
              "products"
            ]
          }
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeLocation"
          }
        },
        "location_levels": {
          "description": "List of level names sourced form Jibestream locations",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_id": {
          "description": "Identifier of the retailer the store belongs to",
          "type": "integer"
        },
        "retailer_website": {
          "description": "URL of the store's website",
          "type": "string"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "service_category_ids": {
          "description": "List of Service Category identifiers associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "store_front_image_ref": {
          "description": "Storage provider identifier of the store's store front image",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeUpdateBody": {
      "type": "object",
      "description": "Parameters for updating a store",
      "properties": {
        "category_ids": {
          "description": "List of Service Category identifiers associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "description": "Identifier of the centre where the store is located.",
          "type": "string"
        },
        "description": {
          "description": "Long description of the store's retailer",
          "type": "string"
        },
        "dining": {
          "description": "Dining information, if this store has a dining facility.",
          "$ref": "#/definitions/diningCreateBody"
        },
        "dining_cuisine": {
          "description": "[DEPRECATED]. Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "dining_image_ref": {
          "description": "[DEPRECATED]. Storage provider identifier of the dining image of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_menu_ref": {
          "description": "[DEPRECATED]. Storage provider identifier of the menu of the store if it provides dining facilities",
          "type": "string"
        },
        "dining_price_guide": {
          "description": "[DEPRECATED]. Number indicating the relative price of dining at the store",
          "type": "integer",
          "maximum": 4
        },
        "dining_vendor_id": {
          "description": "[DEPRECATED]. Dining vendor identifier if the store is a dining facility that participates in Open Dining Network; an empty string otherwise.",
          "type": "string"
        },
        "disabled_at": {
          "description": "Date the store was disabled in the Westfield system",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "email_address": {
          "description": "E-mail address of the store",
          "type": "string"
        },
        "enabled": {
          "description": "Flag indicating if the store is enabled in the Westfield system",
          "type": "boolean"
        },
        "enabled_at": {
          "description": "Date the store was enabled in the Westfield system",
          "type": "string",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "features": {
          "description": "List of features the store has. If 'foodordering' is present the store supports ordering food via the Food App. If 'giftcards' is present the store accepts giftcards.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "cinema",
              "foodordering",
              "giftcards",
              "products"
            ]
          }
        },
        "lease_number": {
          "description": "Number of the store's lease with Westfield",
          "type": "string"
        },
        "locations": {
          "description": "List of jibestream locations and meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeLocation"
          }
        },
        "location_levels": {
          "description": "List of level names sourced form Jibestream locations",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the store",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number of the store",
          "type": "string"
        },
        "retailer_id": {
          "description": "Identifier of the retailer the store belongs to",
          "type": "integer"
        },
        "retailer_website": {
          "description": "URL of the store's website",
          "type": "string"
        },
        "salience": {
          "description": "Numeric value used for wayfinding applications",
          "type": "integer"
        },
        "service_category_ids": {
          "description": "List of Service Category identifiers associated with the store",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "shop_number": {
          "description": "The shop number in the Westfield centre the store occupies",
          "type": "string"
        },
        "store_front_image_ref": {
          "description": "Storage provider identifier of the store's store front image",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "diningLinks": {
      "description": "Links for stores that provide dining facilities",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "The link to the dining image of the store",
          "$ref": "#/definitions/genericLink"
        },
        "menu": {
          "description": "The link to the menu of the store",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeLinks": {
      "type": "object",
      "description": "Relevant links for the store",
      "required": [
        "deals",
        "dining",
        "events",
        "logo",
        "self",
        "store_front"
      ],
      "additionalProperties": false,
      "properties": {
        "deals": {
          "description": "The link to deals associated with this store",
          "$ref": "#/definitions/genericLink"
        },
        "dining": {
          "description": "Links for stores that provide dining facilities",
          "$ref": "#/definitions/diningLinks"
        },
        "events": {
          "description": "The link to events associated with this store",
          "$ref": "#/definitions/genericLink"
        },
        "logo": {
          "description": "The link to the logo image of the store's retailer",
          "$ref": "#/definitions/genericLink"
        },
        "self": {
          "description": "The link for details about this store",
          "$ref": "#/definitions/genericLink"
        },
        "store_front": {
          "description": "The link to the store front image of the store",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storeResponse": {
      "type": "object",
      "description": "Information about a specific store",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/storeInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "storesListResponse": {
      "type": "object",
      "description": "List of stores",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "statusInstance": {
      "type": "object",
      "description": "Status information for a store.",
      "required": [
        "state"
      ],
      "additionalProperties": false,
      "properties": {
        "ends_at": {
          "description": "Date-time this store is retired or disabled.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "publish_at": {
          "description": "Date-time this store is in preview status mode.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "starts_at": {
          "description": "Date-time this store is opening.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "example": "2018-06-21T00:00:00Z"
        },
        "state": {
          "description": "State of the store. Valid states include: [pending, preview, live, disabled].",
          "type": "string",
          "enum": [
            "pending",
            "preview",
            "live",
            "disabled"
          ]
        }
      },
      "x-services": [
        "store"
      ]
    },
    "diningInstance": {
      "type": [
        "object",
        "null"
      ],
      "description": "Dining information for a store.",
      "required": [
        "_links",
        "allergen_info",
        "cuisine",
        "price_guide",
        "vendor_id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/diningLinks"
        },
        "allergen_info": {
          "description": "Description of allergen information at this store",
          "type": "string",
          "maxLength": 2000
        },
        "cuisine": {
          "description": "Cuisine offered by the store if it provides dining facilities",
          "type": "string"
        },
        "price_guide": {
          "description": "Number indicating the relative price of dining at the store",
          "type": "integer",
          "maximum": 4
        },
        "vendor_id": {
          "description": "Dining vendor identifier if the store is a dining facility that participates in Open Dining Network; an empty string otherwise.",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "diningCreateBody": {
      "type": "object",
      "description": "Parameters for the dining section in a store",
      "required": [
        "allergen_info",
        "cuisine",
        "image_ref",
        "menu_ref",
        "price_guide",
        "vendor_id"
      ],
      "properties": {
        "allergen_info": {
          "description": "Description of allergen information at this store",
          "type": "string",
          "maxLength": 2000
        },
        "cuisine": {
          "description": "Cuisine offered by the store",
          "type": "string"
        },
        "image_ref": {
          "description": "Storage provider identifier of the dining image for the store",
          "type": "string"
        },
        "menu_ref": {
          "description": "Storage provider identifier of the menu for the store",
          "type": "string"
        },
        "price_guide": {
          "description": "Number indicating the relative price of dining at the store",
          "type": "integer",
          "maximum": 4
        },
        "vendor_id": {
          "description": "Dining vendor identifier if the store is a dining facility that participates in Open Dining Network; an empty string otherwise.",
          "type": "string"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailer422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "email_address": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "product_tier": {
          "$ref": "#/definitions/validationError"
        },
        "retailer_code": {
          "$ref": "#/definitions/validationError"
        },
        "store_profile": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "retailer422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/retailer422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "store422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "phone_number": {
          "$ref": "#/definitions/validationError"
        },
        "retailer": {
          "$ref": "#/definitions/validationError"
        },
        "salience": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "store422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/store422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "store"
      ]
    },
    "schedule422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "type": {
          "$ref": "#/definitions/validationError"
        },
        "time_zone": {
          "$ref": "#/definitions/validationError"
        },
        "starts_at": {
          "$ref": "#/definitions/validationError"
        },
        "ends_at": {
          "$ref": "#/definitions/validationError"
        },
        "events": {
          "$ref": "#/definitions/validationError"
        },
        "participant": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "schedule422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/schedule422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleInstance": {
      "type": "object",
      "description": "Schedule instance.",
      "required": [
        "deleted_at",
        "events",
        "name",
        "schedule_id",
        "time_zone",
        "type"
      ],
      "properties": {
        "days_of_week": {
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/scheduleEvent"
            }
          }
        },
        "deleted_at": {
          "type": [
            "string",
            "null"
          ],
          "description": "Date-time the schedule was marked as deleted.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "ends_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the schedule ends.",
          "example": "2018-03-21T21:43:56Z"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scheduleEvent"
          }
        },
        "name": {
          "type": "string",
          "description": "Schedule name."
        },
        "participant": {
          "description": "Schedule participants.",
          "type": "object",
          "$ref": "#/definitions/participantInstance"
        },
        "participants": {
          "description": "Schedule participants.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/participantInstance"
          }
        },
        "schedule_id": {
          "type": "integer",
          "description": "Schedule identifier. Identifier to retrieve this schedule."
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the schedule starts.",
          "example": "2018-03-21T21:43:56Z"
        },
        "time_zone": {
          "type": "string",
          "description": "Schedule time zone."
        },
        "type": {
          "type": "string",
          "description": "Schedule type.",
          "enum": [
            "special_trading",
            "standard_trading"
          ]
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleEvent": {
      "type": "object",
      "description": "Schedule event instance that maps closely to an iCal event.",
      "required": [
        "ends_at",
        "starts_at",
        "summary",
        "type"
      ],
      "properties": {
        "day_of_week": {
          "type": "integer",
          "description": "Day number in a week. 0 is Sunday, 1 is Monday... and 6 is Saturday.",
          "example": "1"
        },
        "ends_at": {
          "type": "string",
          "description": "Event end date-time without offset(maps to ical dtend).",
          "example": "2015-01-01T20:00:00"
        },
        "starts_at": {
          "type": "string",
          "description": "Event start date-time without offset(maps to ical dtstart).",
          "example": "2015-01-01T08:00:00"
        },
        "summary": {
          "type": "string",
          "description": "Event summary(maps to ical summary)."
        },
        "type": {
          "type": "string",
          "description": "Type of the event",
          "enum": [
            "open",
            "closed",
            "overnight"
          ]
        },
        "time_zone": {
          "type": "string",
          "description": "Schedule event time zone."
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleCreateBody": {
      "type": "object",
      "description": "Parameters for creating a schedule.",
      "required": [
        "name",
        "participant_id",
        "time_zone"
      ],
      "properties": {
        "days_of_week": {
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/scheduleEvent"
            }
          }
        },
        "ends_at": {
          "description": "Date-time the schedule starts.",
          "type": "string",
          "format": "date-time"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scheduleEvent"
          }
        },
        "name": {
          "description": "Schedule name.",
          "type": "string"
        },
        "participant_id": {
          "description": "Schedule participant identifier.",
          "type": "string"
        },
        "participant_kind": {
          "description": "Type of participant. Used with participant_kind_id.",
          "type": "string",
          "enum": [
            "Centre",
            "Store"
          ]
        },
        "participant_kind_id": {
          "description": "Participant kind identifier. Identifier for participant of type participant_kind.",
          "type": "string"
        },
        "starts_at": {
          "description": "Date-time the schedule ends.",
          "type": "string",
          "format": "date-time"
        },
        "time_zone": {
          "description": "Schedule's time zone.",
          "type": "string"
        },
        "type": {
          "description": "Type of schedule.",
          "type": "string",
          "enum": [
            "special_trading",
            "standard_trading"
          ]
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleInstanceResponse": {
      "type": "object",
      "description": "Schedule Instance Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/scheduleInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleListResponse": {
      "type": "object",
      "description": "Schedule List Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scheduleInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "scheduleUpdateBody": {
      "type": "object",
      "description": "Data to update a schedule.",
      "additionalProperties": false,
      "required": [
        "time_zone"
      ],
      "properties": {
        "days_of_week": {
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/scheduleEvent"
            }
          }
        },
        "ends_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time that the schedule ends.",
          "example": "2018-03-21T21:43:56Z"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/scheduleEvent"
          }
        },
        "name": {
          "type": "string",
          "description": "Schedule name."
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time that the schedule starts.",
          "example": "2018-03-21T21:43:56Z"
        },
        "time_zone": {
          "type": "string",
          "description": "Schedule time zone."
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participant422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "kind_id": {
          "$ref": "#/definitions/validationError"
        },
        "kind": {
          "$ref": "#/definitions/validationError"
        },
        "schedules": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participant422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/participant422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participantInstance": {
      "type": "object",
      "description": "Participant instance.",
      "required": [
        "kind",
        "kind_id"
      ],
      "properties": {
        "connected": {
          "type": "boolean",
          "description": "Whether participant is connected with its followee."
        },
        "followee": {
          "type": "object",
          "$ref": "#/definitions/participantInstance",
          "description": "Followee of participant."
        },
        "followers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/participantInstance"
          },
          "description": "Followers of participant."
        },
        "kind": {
          "type": "string",
          "description": "Participant type",
          "enum": [
            "Centre",
            "Store"
          ]
        },
        "kind_id": {
          "type": "string",
          "description": "Participant key"
        },
        "participant_id": {
          "type": "integer",
          "description": "Participant Identifier"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participantCreateBody": {
      "type": "object",
      "description": "Parameters for creating a participant.",
      "required": [
        "kind",
        "kind_id"
      ],
      "properties": {
        "kind": {
          "type": "string",
          "description": "Participant type",
          "enum": [
            "Centre",
            "Store"
          ]
        },
        "kind_id": {
          "type": "string",
          "description": "Identifier for participant."
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participantInstanceResponse": {
      "type": "object",
      "description": "Participant Instance Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/participantInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participantListResponse": {
      "type": "object",
      "description": "Participant List Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/participantInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "participantUpdateBody": {
      "type": "object",
      "description": "Data to update a participant.",
      "additionalProperties": false,
      "properties": {
        "kind": {
          "type": "string",
          "description": "Participant type",
          "enum": [
            "Centre",
            "Store"
          ]
        },
        "kind_id": {
          "type": "string",
          "description": "Identifier for participant."
        },
        "link_participants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "unlink_participants": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasion422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "ends_at": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "starts_at": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasion422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/occasion422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasionCreateBody": {
      "type": "object",
      "description": "Parameters for creating an occasion.",
      "required": [
        "centre_id",
        "ends_at",
        "name",
        "starts_at"
      ],
      "properties": {
        "centre_id": {
          "description": "Centre Identifier.",
          "type": "string"
        },
        "ends_at": {
          "description": "Date-time the occasion starts.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Occasion name.",
          "type": "string"
        },
        "starts_at": {
          "description": "Date-time the occasion ends.",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasionInstance": {
      "type": "object",
      "description": "Occasion instance.",
      "required": [
        "centre_id",
        "deleted_at",
        "ends_at",
        "name",
        "occasion_id",
        "schedule_ids",
        "starts_at"
      ],
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre this occasion is related to. Lowercase code name for a specific centre. Examples: ['sanfrancisco','sydney','london']."
        },
        "deleted_at": {
          "type": [
            "string",
            "null"
          ],
          "description": "Date-time the occasion was marked as deleted.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "ends_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the occasion ends.",
          "example": "2018-03-21T21:43:56Z"
        },
        "name": {
          "type": "string",
          "description": "Occasion name."
        },
        "occasion_id": {
          "type": "integer",
          "description": "Occasion identifier. Identifier to retrieve this occasion."
        },
        "schedule_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Schedule identifiers. List of schedules to retrieve the schedules related to this occasion."
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the occasion starts.",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasionInstanceResponse": {
      "type": "object",
      "description": "Occasion Instance Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/occasionInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasionListResponse": {
      "type": "object",
      "description": "Occasion List Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occasionInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occasionUpdateBody": {
      "type": "object",
      "description": "Data to update an occasion.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Occasion name."
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occurrenceInstance": {
      "type": "object",
      "description": "Occurrence instance.",
      "required": [
        "ends_at",
        "starts_at",
        "summary",
        "type"
      ],
      "properties": {
        "ends_at": {
          "type": "string",
          "description": "Date-time the occurrence ends.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "starts_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the occurrence starts.",
          "example": "2018-03-21T21:43:56Z"
        },
        "summary": {
          "type": "string",
          "description": "Summary of the occurrence's event.",
          "example": "Thanksgiving"
        },
        "type": {
          "type": "string",
          "description": "Type of the occurrence.",
          "enum": [
            "open",
            "closed",
            "overnight"
          ]
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "occurrenceListResponse": {
      "type": "object",
      "description": "Occurrences List Response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/occurrenceInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "centreTradingHoursListResponse": {
      "type": "object",
      "description": "List of centre trading hours",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/centreTradingHour"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "storeTradingHoursListResponse": {
      "type": "object",
      "description": "List of centre trading hours",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storeTradingHour"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "centreTradingHour": {
      "type": "object",
      "required": [
        "centre_id",
        "hour_type",
        "id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/tradingHourLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Identifier for centre"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the centre is open"
        },
        "closing_time": {
          "type": "string",
          "description": "When the centre closes"
        },
        "date": {
          "type": "string",
          "example": "2015-05-01",
          "description": "Date the trading hour is for"
        },
        "day_of_week": {
          "type": "integer",
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)"
        },
        "description": {
          "type": "string",
          "description": "Description of trading hour"
        },
        "hour_type": {
          "type": "string",
          "description": "Type of trading hour (special or standard)"
        },
        "id": {
          "type": "integer",
          "description": "Auto generated identifier"
        },
        "opening_time": {
          "type": "string",
          "description": "When the centre opens"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "storeTradingHour": {
      "type": "object",
      "required": [
        "centre_id",
        "hour_type",
        "id",
        "store_id"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/tradingHourLinks"
        },
        "centre_id": {
          "type": "string",
          "description": "Identifier for centre"
        },
        "closed": {
          "type": "boolean",
          "description": "Whether the store is open"
        },
        "closing_time": {
          "type": "string",
          "description": "When the store closes"
        },
        "date": {
          "type": "string",
          "example": "2015-05-01",
          "description": "Date the trading hour is for"
        },
        "day_of_week": {
          "type": "integer",
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)"
        },
        "description": {
          "type": "string",
          "description": "Description of trading hour"
        },
        "hour_type": {
          "type": "string",
          "description": "Type of trading hour (special  or standard)"
        },
        "id": {
          "type": "integer",
          "description": "Auto generated identifier"
        },
        "opening_time": {
          "type": "string",
          "description": "When the store opens"
        },
        "store_id": {
          "type": "string",
          "description": "Identifier for store"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHourLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this trading hour",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHour422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/tradingHour422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "tradingHour422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "centre_id": {
          "$ref": "#/definitions/validationError"
        },
        "date": {
          "$ref": "#/definitions/validationError"
        },
        "day_of_week": {
          "$ref": "#/definitions/validationError"
        },
        "hour_type": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "createCentreHoursBody": {
      "type": "object",
      "description": "Parameters for creating one or more trading hours for a centre.",
      "additionalProperties": false,
      "properties": {
        "closed": {
          "description": "Whether the centre is open or not",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closing_time": {
          "description": "Time the centre closes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "description": "Date the trading hour is for",
          "example": "2015-05-01",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "day_of_week": {
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "description": {
          "description": "Descriptions of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hour_type": {
          "description": "Types of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "opening_time": {
          "description": "Time the centre opens",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "createStoreHoursBody": {
      "type": "object",
      "description": "Parameters for creating one or more trading hours for a store.",
      "required": [
        "centre_id"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "description": "The centre identifer you'd like the hours for",
          "type": "string"
        },
        "closed": {
          "description": "Whether the store is open or not",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "closing_time": {
          "description": "Time the store closes",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "date": {
          "description": "Date the trading hour is for",
          "example": "2015-05-01",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "day_of_week": {
          "description": "0-indexed day of the week (e.g. 0: Mon, 1: Tue)",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "description": {
          "description": "Descriptions of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hour_type": {
          "description": "Types of trading hours",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "opening_time": {
          "description": "Time the store opens",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-services": [
        "trading_hour"
      ]
    },
    "parentLinkData": {
      "description": "Parent category identifier and URL.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "href": {
          "type": "string",
          "description": "Parent category URL.",
          "example": "https://api.exempl.tes/something/delicious"
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent category identifier."
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoriesListResponse": {
      "type": "object",
      "description": "List categories response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryResponse": {
      "type": "object",
      "description": "Individual category response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/categoryInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryChildrenListResponse": {
      "type": "object",
      "description": "List individual category children/parent response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryChildrenInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryChildrenTreeResponse": {
      "type": "object",
      "description": "List category tree response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/categoryChildrenInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryInstance": {
      "type": "object",
      "description": "Category",
      "required": [
        "_links",
        "category_id",
        "depth",
        "updated_at"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/categoryLinks"
        },
        "category_id": {
          "type": "integer",
          "description": "Category identifier. Identifier to retrieve this category."
        },
        "depth": {
          "type": "integer",
          "description": "Depth value in the tree."
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the category was last updated.",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryChildrenInstance": {
      "type": "object",
      "description": "Category",
      "required": [
        "_links",
        "category_id",
        "children_sort_order",
        "depth",
        "description",
        "name",
        "path",
        "slug",
        "updated_at",
        "westfield_locale"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/categoryChildrenLinks"
        },
        "category_id": {
          "type": "integer",
          "description": "Category identifier. Identifier to retrieve this category."
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryChildrenInstance"
          }
        },
        "children_sort_order": {
          "type": "array",
          "description": "Locale identifiers. Array of identifiers to order children.",
          "items": {
            "type": "integer"
          }
        },
        "depth": {
          "type": "integer",
          "description": "Depth value in the tree."
        },
        "description": {
          "type": "string",
          "description": "Description of locale."
        },
        "image": {
          "type": "string",
          "description": "Link to the image."
        },
        "name": {
          "type": "string",
          "description": "Locale name."
        },
        "path": {
          "type": "string",
          "description": "Locale path."
        },
        "slug": {
          "type": "string",
          "description": "Locale slug."
        },
        "sort_order": {
          "type": "integer",
          "description": "Position of the category based on the locale."
        },
        "state": {
          "type": "string",
          "description": "Locale state."
        },
        "status": {
          "$ref": "#/definitions/localeStatus"
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the category was last updated.",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "westfield_locale": {
          "type": "string",
          "description": "Locale identifier.",
          "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
          "example": "en-US"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryLinks": {
      "type": "object",
      "description": "Links relating to the category.",
      "required": [
        "locales",
        "parent",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "locales": {
          "description": "Link to the category locales.",
          "$ref": "#/definitions/genericLink"
        },
        "parent": {
          "description": "Link to parent category.",
          "$ref": "#/definitions/parentLinkData"
        },
        "self": {
          "description": "Canonical link to this category.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryChildrenLinks": {
      "type": "object",
      "description": "Links relating to the category children.",
      "required": [
        "image",
        "parent",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "image": {
          "description": "Canonical link to locale image.",
          "$ref": "#/definitions/genericLink"
        },
        "parent": {
          "description": "Link to parent category.",
          "$ref": "#/definitions/parentLinkData"
        },
        "self": {
          "description": "Canonical link to this category.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "category422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/category422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "category422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "parent_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryCreateBody": {
      "type": "object",
      "description": "Data to create a category.",
      "required": [
        "enabled",
        "parent_id"
      ],
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Enabled category. Category is enabled (true) or not enabled (false).",
          "type": "boolean"
        },
        "parent_id": {
          "description": "Parent category identifier. Identifiers to retrieve the parent category related to this category.",
          "type": "integer"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "categoryUpdateBody": {
      "type": "object",
      "description": "Data to update a category.",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "Enabled category. Category is enabled (true) or not enabled (false).",
          "type": "boolean"
        },
        "parent_id": {
          "description": "Parent category identifier. Identifiers to retrieve the parent category related to this category.",
          "type": "integer"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupResponse": {
      "type": "object",
      "description": "Individual category group response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/groupInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupListResponse": {
      "type": "object",
      "description": "List groups response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/groupInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupInstance": {
      "type": "object",
      "description": "Category group.",
      "required": [
        "_links",
        "category_ids",
        "country",
        "group_id",
        "name",
        "updated_at"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/groupLinks"
        },
        "category_ids": {
          "type": "array",
          "description": "Identifiers for categories in this group.",
          "items": {
            "type": "integer"
          }
        },
        "country": {
          "type": "string",
          "description": "Country."
        },
        "group_id": {
          "type": "integer",
          "description": "Group identifier. Identifier to retrieve this group."
        },
        "name": {
          "type": "string",
          "description": "Group name."
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the locale was last updated.",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupLinks": {
      "type": "object",
      "description": "Links relating to the group.",
      "required": [
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "self": {
          "description": "Canonical link to this group.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "group422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/group422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "group422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "country": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupCreateBody": {
      "type": "object",
      "description": "Data to create a category group.",
      "required": [
        "name",
        "country",
        "category_ids"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Group name.",
          "type": "string"
        },
        "country": {
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ],
          "description": "Country. One per group.",
          "type": "string"
        },
        "category_ids": {
          "type": "array",
          "description": "Identifiers for categories in this group.",
          "items": {
            "type": "integer"
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "groupUpdateBody": {
      "type": "object",
      "description": "Data to update a category group.",
      "required": [
        "name",
        "country",
        "category_ids"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Group name.",
          "type": "string"
        },
        "country": {
          "enum": [
            "au",
            "nz",
            "uk",
            "us"
          ],
          "description": "Country. One per group.",
          "type": "string"
        },
        "category_ids": {
          "type": "array",
          "description": "Identifiers for categories in this group.",
          "items": {
            "type": "integer"
          }
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeListResponse": {
      "type": "object",
      "description": "List of locales for a category.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/localeInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeResponse": {
      "type": "object",
      "description": "Individual category locale.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/localeInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "locale422Response": {
      "type": "object",
      "description": "Response for invalid data on create or update.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/locale422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "locale422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "base": {
          "description": "A list of errors that do not apply to an attribute.",
          "$ref": "#/definitions/validationError"
        },
        "description": {
          "$ref": "#/definitions/validationError"
        },
        "name": {
          "$ref": "#/definitions/validationError"
        },
        "path": {
          "$ref": "#/definitions/validationError"
        },
        "slug": {
          "$ref": "#/definitions/validationError"
        },
        "westfield_locale": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeInstance": {
      "type": "object",
      "description": "Locale",
      "required": [
        "_links",
        "category_id",
        "children_sort_order",
        "description",
        "indexable",
        "name",
        "slug",
        "state",
        "state_events",
        "status",
        "updated_at",
        "westfield_locale"
      ],
      "additionalProperties": false,
      "properties": {
        "_links": {
          "$ref": "#/definitions/localeLinks"
        },
        "category_id": {
          "type": "integer",
          "description": "Category identifier. Identifier to retrieve the category."
        },
        "children_sort_order": {
          "type": "array",
          "description": "Locale identifiers. Array of identifiers to order children.",
          "items": {
            "type": "integer"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of locale."
        },
        "image": {
          "type": "string",
          "description": "Link to the image."
        },
        "indexable": {
          "type": "boolean",
          "description": "Indexable status."
        },
        "name": {
          "type": "string",
          "description": "Locale name."
        },
        "slug": {
          "type": "string",
          "description": "Locale slug."
        },
        "state": {
          "type": "string",
          "description": "Locale state."
        },
        "state_events": {
          "type": "array",
          "description": "Unknown.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/localeStatus"
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the locale was last updated.",
          "format": "date-time",
          "example": "2018-03-21T00:00:00Z"
        },
        "westfield_locale": {
          "type": "string",
          "description": "Locale identifier.",
          "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
          "example": "en-US"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeLinks": {
      "type": "object",
      "required": [
        "category",
        "image",
        "parent",
        "self"
      ],
      "additionalProperties": false,
      "properties": {
        "category": {
          "description": "Link to locale category.",
          "$ref": "#/definitions/genericLink"
        },
        "image": {
          "description": "Link to locale image.",
          "$ref": "#/definitions/genericLink"
        },
        "parent": {
          "description": "Link to parent category.",
          "$ref": "#/definitions/parentLinkData"
        },
        "self": {
          "description": "Link to this locale.",
          "$ref": "#/definitions/genericLink"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeStatus": {
      "type": "object",
      "required": [
        "state"
      ],
      "additionalProperties": false,
      "properties": {
        "state": {
          "description": "State of locale.",
          "type": "string"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeCreateBody": {
      "type": "object",
      "description": "Data to create a locale.",
      "required": [
        "category_id",
        "name",
        "slug",
        "westfield_locale"
      ],
      "additionalProperties": false,
      "properties": {
        "category_id": {
          "type": "integer",
          "description": "Category identifier. Identifier to retrieve the category."
        },
        "name": {
          "description": "Name of locale.",
          "type": "string"
        },
        "slug": {
          "description": "Slug of locale.",
          "type": "string"
        },
        "westfield_locale": {
          "description": "Westfield locale.",
          "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
          "type": "string"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "localeUpdateBody": {
      "type": "object",
      "description": "Data to update a locale.",
      "additionalProperties": false,
      "properties": {
        "category_id": {
          "type": "integer",
          "description": "Category identifier. Identifier to retrieve the category."
        },
        "name": {
          "description": "Name of locale.",
          "type": "string"
        },
        "slug": {
          "description": "Slug of locale.",
          "type": "string"
        },
        "westfield_locale": {
          "description": "Westfield locale.",
          "pattern": "^[a-z]{2}(_[A-Z]{2})?(\\|[a-z]+)?$",
          "type": "string"
        }
      },
      "x-services": [
        "category"
      ]
    },
    "enclosuresListResponse": {
      "type": "object",
      "description": "List enclosures response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enclosureInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosureResponse": {
      "type": "object",
      "description": "Individual enclosure response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/enclosureInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosureInstance": {
      "type": "object",
      "description": "Enclosure.",
      "required": [
        "centre_id",
        "created_at",
        "enabled",
        "enclosure_id",
        "name",
        "updated_at",
        "waypoint_id"
      ],
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "type": "string",
          "description": "Centre identifier."
        },
        "created_at": {
          "type": "string",
          "description": "Date-time the enclosure was created.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "enclosure_id": {
          "type": "integer",
          "description": "Enclosure identifier."
        },
        "name": {
          "type": "string",
          "description": "Enclosure name."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enclosure is enabled (true) or not enabled (false)."
        },
        "updated_at": {
          "type": "string",
          "description": "Date-time the enclosure was last updated.",
          "format": "date-time",
          "example": "2018-03-21T21:43:56Z"
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosureCreateBody": {
      "type": "object",
      "description": "Enclosure create parameters in message body.",
      "required": [
        "kiosk_centre_id"
      ],
      "additionalProperties": false,
      "properties": {
        "kiosk_centre_id": {
          "type": "integer",
          "description": "KioskCentre identifier."
        },
        "name": {
          "type": "string",
          "description": "Enclosure name."
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier."
        },
        "reset_timeout": {
          "type": "integer",
          "description": "Enclosure reset timeout in seconds."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosureUpdateBody": {
      "type": "object",
      "description": "Data to update an enclosure.",
      "additionalProperties": false,
      "properties": {
        "kiosk_centre_id": {
          "type": "integer",
          "description": "KioskCentre identifier."
        },
        "name": {
          "type": "string",
          "description": "Enclosure name."
        },
        "reset_timeout": {
          "type": "integer",
          "description": "Enclosure reset timeout."
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosure422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "kiosk_centre_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "enclosure422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/enclosure422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentreListResponse": {
      "type": "object",
      "description": "List of kiosk centres.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/kioskCentreInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentreInstance": {
      "type": "object",
      "description": "Kiosk centre.",
      "required": [
        "category_ids",
        "centre_id",
        "created_at",
        "enabled",
        "features",
        "landing_page",
        "languages",
        "updated_at"
      ],
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Category identifier."
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at. Date-time that the kiosk centre was created.",
          "example": "2018-03-21T21:43:56Z"
        },
        "enabled": {
          "type": "boolean",
          "description": "Kiosk centre is enabled."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Features at kiosk centre."
          }
        },
        "kiosk_centre_id": {
          "type": "integer",
          "description": "Kiosk centre identifier."
        },
        "landing_page": {
          "type": "string",
          "description": "Kiosk centre landing page."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Kiosk centre languages.",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date-time the kiosk centre was last updated.",
          "example": "2018-03-21T21:43:56Z"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentreCreateBody": {
      "type": "object",
      "description": "Data to create a kiosk centre.",
      "required": [
        "centre_id"
      ],
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Category identifier."
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier."
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Features at kiosk centre."
          }
        },
        "landing_page": {
          "type": "string",
          "description": "Kiosk centre landing page."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Kiosk centre languages.",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentreUpdateBody": {
      "type": "object",
      "description": "Data to update a kiosk centre.",
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "description": "Category identifier."
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Features at centre."
          }
        },
        "landing_page": {
          "type": "string",
          "description": "Kiosk centre landing page."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Kiosk centre languages.",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentreResponse": {
      "type": "object",
      "description": "Individual centre response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/kioskCentreInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentre422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/kioskCentre422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "kioskCentre422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "centre_id": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directoryListResponse": {
      "type": "object",
      "description": "List directories response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/directoryInstance"
          }
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directoryInstance": {
      "type": "object",
      "description": "Directory.",
      "required": [
        "category_ids",
        "centre_id",
        "enabled",
        "enclosure_id",
        "features",
        "heading",
        "landing_page",
        "languages",
        "name",
        "template",
        "waypoint_id"
      ],
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "description": "Category identifiers. List of identifiers to retrieve categories related to the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre related to this kiosk_centre directory."
        },
        "enabled": {
          "type": "boolean",
          "description": "Directory is enabled (true) or not enabled (false)."
        },
        "enclosure_id": {
          "type": "integer",
          "description": "Enclosure identifier. Identifier to retrieve the enclosure related to this kiosk_centre directory."
        },
        "features": {
          "description": "List of features available on this kiosk_centre directory for the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "heading": {
          "type": "integer",
          "description": "Directory heading number.",
          "example": 1
        },
        "landing_page": {
          "type": "string",
          "description": "Landing page for this kiosk_centre directory."
        },
        "languages": {
          "description": "List of languages available on this kiosk_centre directory.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Directory name."
        },
        "template": {
          "type": "string",
          "description": "Directory template."
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier. Identifier to retrieve the waypoint related to the enclosure for this kiosk-centre directory."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directoryCreateBody": {
      "type": "object",
      "description": "Data to create a directory.",
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "description": "Category identifiers. List of identifiers to retrieve categories related to the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre related to this kiosk_centre directory."
        },
        "enabled": {
          "type": "boolean",
          "description": "Directory is enabled (true) or not enabled (false)."
        },
        "enclosure_id": {
          "type": "integer",
          "description": "Enclosure identifier. Identifier to retrieve the enclosure related to this kiosk_centre directory."
        },
        "features": {
          "description": "List of features available on this kiosk_centre directory for the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "heading": {
          "type": "integer",
          "description": "Directory heading number."
        },
        "landing_page": {
          "type": "string",
          "description": "Landing page for this kiosk_centre directory."
        },
        "languages": {
          "description": "List of languages available on this kiosk_centre directory.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Directory name."
        },
        "template": {
          "type": "string",
          "description": "Directory template."
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier. Identifier to retrieve the waypoint related to the enclosure for this kiosk-centre directory."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directoryResponse": {
      "type": "object",
      "description": "Individual directory response.",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/directoryInstance"
        },
        "errors": {
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directoryUpdateBody": {
      "type": "object",
      "description": "Data to update a directory.",
      "additionalProperties": false,
      "properties": {
        "category_ids": {
          "description": "Category identifiers. List of identifiers to retrieve categories related to the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "centre_id": {
          "type": "string",
          "description": "Centre identifier. Identifier to retrieve the centre related to this kiosk_centre directory."
        },
        "enabled": {
          "type": "boolean",
          "description": "Directory is enabled (true) or not enabled (false)."
        },
        "enclosure_id": {
          "type": "integer",
          "description": "Enclosure identifier. Identifier to retrieve the enclosure related to this kiosk_centre directory."
        },
        "features": {
          "description": "List of features available on this kiosk_centre directory for the centre identified by centre_id.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "heading": {
          "type": "integer",
          "description": "Directory heading number."
        },
        "landing_page": {
          "type": "string",
          "description": "Landing page for this kiosk_centre directory."
        },
        "languages": {
          "description": "List of languages available on this kiosk_centre directory.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "en_US",
              "en_GB",
              "es_ES",
              "fr_FR",
              "it_IT",
              "de_DE",
              "pt_PT",
              "ja_JP",
              "zh_CN",
              "ar_SA",
              "he_IL",
              "ru_RU"
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Directory name."
        },
        "template": {
          "type": "string",
          "description": "Directory template."
        },
        "waypoint_id": {
          "type": "string",
          "description": "Waypoint identifier. Identifier to retrieve the waypoint related to the enclosure for this kiosk-centre directory."
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directory422Response": {
      "type": "object",
      "required": [
        "data",
        "errors",
        "meta"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/emptyObject"
        },
        "errors": {
          "$ref": "#/definitions/directory422Error"
        },
        "meta": {
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "directory422Error": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "$ref": "#/definitions/validationError"
        }
      },
      "x-services": [
        "kiosk"
      ]
    },
    "relatedProductsResponse": {
      "type": "object",
      "description": "Related products",
      "required": [
        "data",
        "meta",
        "errors"
      ],
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The `data` component of the response",
          "$ref": "#/definitions/relatedProducts"
        },
        "errors": {
          "description": "The `errors` component of the response",
          "$ref": "#/definitions/emptyObject"
        },
        "meta": {
          "description": "The `meta` component of the response",
          "$ref": "#/definitions/metaResponse"
        }
      },
      "x-services": [
        "recommendation"
      ]
    },
    "relatedProducts": {
      "type": "object",
      "description": "Related products",
      "additionalProperties": false,
      "required": [
        "related",
        "similar"
      ],
      "properties": {
        "related": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          },
          "description": "List of related products"
        },
        "similar": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/product"
          },
          "description": "List of similar products"
        }
      },
      "x-services": [
        "recommendation"
      ]
    }
  }
}
